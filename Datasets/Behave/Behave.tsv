key	project	title	abstract	keywords	authors	venue	doi	references	pages	bibtex	screened_decision	final_decision	mode	inclusion_criteria	exclusion_criteria	reviewer_count	source	year	meta_title	link	publisher	metadata_missing
0	Behave	On the understanding of BDD scenarios' quality: Preliminary practitioners' opinions	[Context & Motivation] In agile development, acceptance tests are written to express the details from the conversations between customers and developers. One of the formats to express those details is BDD (Behavior-Driven Development) scenarios, which use a ubiquitous language, one that business and technical people can understand, to build an executable specification that represents a system behavior. [Question/Problem] Problems caused by bad documentation are known to cause project failure and we believe those problems apply to documentation in the format of acceptance tests as well. Thus, in the long-term, we seek to understand what would be the definition of a good BDD scenario and the criteria to define it. [Principal idea/results] To achieve that, we previously identified known requirements' quality attributes that would be suitable to evaluate BDD scenarios' quality. Based on that list of attributes, we now aim to validate that list with practitioners, identify their interpretation of the listed attributes, and uncover general recommendations to write BDD scenarios. [Contribution] Preliminary results from our initial set of interviews revealed practitioners' interpretations for consistent, testable, valuable, understandable, and unambiguous attributes and some recommendations to write good BDD scenarios, such as the use of declarative form of writing. (c) Springer International Publishing AG, part of Springer Nature 2018.	Acceptance tests; Boolean functions; Computer software selection and evaluation; Requirements engineering; Agile development; Behavior-driven development; Empirical studies; Executable specifications; Project failures; Quality attributes; System behaviors; Quality control	Oliveira, Gabriel; Marczak, Sabrina	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-319-77243-1_18		290 - 296	"@ARTICLE{Oliveira2018290,
    author = ""Oliveira, Gabriel and Marczak, Sabrina"",
    editor = ""E., Kamsties and J., Horkoff and F., Dalpiaz"",
    title = ""On the understanding of BDD scenarios' quality: Preliminary practitioners' opinions"",
    year = ""2018"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""10753 LNCS"",
    pages = ""290 - 296"",
    doi = ""10.1007/978-3-319-77243-1\_18"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043392736\&doi=10.1007\%2f978-3-319-77243-1\_18\&partnerID=40\&md5=090286ca4a05c49ba9db32b1e67f3e31"",
    affiliations = ""Computer Science School, PUCRS, Porto Alegre, Brazil"",
    abstract = ""[Context \& Motivation] In agile development, acceptance tests are written to express the details from the conversations between customers and developers. One of the formats to express those details is BDD (Behavior-Driven Development) scenarios, which use a ubiquitous language, one that business and technical people can understand, to build an executable specification that represents a system behavior. [Question/Problem] Problems caused by bad documentation are known to cause project failure and we believe those problems apply to documentation in the format of acceptance tests as well. Thus, in the long-term, we seek to understand what would be the definition of a good BDD scenario and the criteria to define it. [Principal idea/results] To achieve that, we previously identified known requirements' quality attributes that would be suitable to evaluate BDD scenarios' quality. Based on that list of attributes, we now aim to validate that list with practitioners, identify their interpretation of the listed attributes, and uncover general recommendations to write BDD scenarios. [Contribution] Preliminary results from our initial set of interviews revealed practitioners' interpretations for consistent, testable, valuable, understandable, and unambiguous attributes and some recommendations to write good BDD scenarios, such as the use of declarative form of writing. (c) Springer International Publishing AG, part of Springer Nature 2018."",
    author_keywords = ""Behavior-driven development; Documentation evaluation; Documentation quality; Empirical study"",
    keywords = ""Acceptance tests; Boolean functions; Computer software selection and evaluation; Requirements engineering; Agile development; Behavior-driven development; Empirical studies; Executable specifications; Project failures; Quality attributes; System behaviors; Quality control"",
    correspondence_address = ""G. Oliveira; Computer Science School, PUCRS, Porto Alegre, Brazil; email: gabriel.pimentel@acad.pucrs.br"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    isbn = ""978-331977242-4"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8; Conference name: 24th International Working Conference on Requirements Engineering Foundation for Software Quality, REFSQ 2018; Conference date: 19 March 2018 through 22 March 2018; Conference code: 211359""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		On the understanding of BDD scenarios’ quality: Preliminary practitioners’ opinions	https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043392736&doi=10.1007%2f978-3-319-77243-1_18&partnerID=40&md5=090286ca4a05c49ba9db32b1e67f3e31	Springer Verlag	nan; References
1	Behave	Testing schematron using XSpec	[No abstract available]	Automated Testing;; Behavior Driven Development;; Continuous Integration;; Open Source;; Quality;; Schematron;; Test Driven Development;; Unit Testing;; Validating;; XSpec	[No author name available]	Balisage Series on Markup Technologies	https://www.scopus.com/record/display.uri?eid=2-s2.0-85049661706&origin=resultslist&sort=plf-f&src=s&sid=dc7e7d21a218126cc1889a85a8dbffc1&sot=b&sdt=b&s=TITLE-ABS-KEY%28testing+schematron+using+xspec%29&sl=45&sessionSearchId=dc7e7d21a218126cc1889a85a8dbffc1&relpos=0			"@CONFERENCE{2017,
    title = ""Testing schematron using XSpec"",
    year = ""2017"",
    journal = ""Balisage Series on Markup Technologies"",
    volume = ""19"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049661706\&partnerID=40\&md5=dd53cbd0fd5197101ef5918fe76e91a5"",
    author_keywords = ""Automated Testing; Behavior Driven Development; Continuous Integration; Open Source; Quality; Schematron; Test Driven Development; Unit Testing; Validating; XSpec"",
    publisher = ""Mulberry Tecnologies, Inc."",
    issn = ""19472609"",
    isbn = ""978-193595815-4"",
    language = ""English"",
    abbrev_source_title = ""Balisage Ser. Markup Technol."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 2017 Balisage: The Markup Conference; Conference date: 1 August 2017 through 4 August 2017; Conference code: 137364""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Testing schematron using XSpec	https://www.scopus.com/record/display.uri?eid=2-s2.0-85049661706&origin=resultslist&sort=plf-f&src=s&sid=dc7e7d21a218126cc1889a85a8dbffc1&sot=b&sdt=b&s=TITLE-ABS-KEY%28testing+schematron+using+xspec%29&sl=45&sessionSearchId=dc7e7d21a218126cc1889a85a8dbffc1&relpos=0	Mulberry Tecnologies, Inc.	nan; Authors; Abstract; References; Pages
2	Behave	Enhancing the Student Learning Experience by Adopting TDD and BDD in Course Projects	A demonstration of the application and contribution of Test-Driven Development (TDD) and Behavior-Driven Development (BDD) in the student learning experience in the context of a Software Engineering course. Background: Software testing is an activity for ensuring software quality. Although teaching testing rigorously to students is a priority in academia, undergraduate students often encounter difficulties performing testing tasks effectively. Intended Outcomes: To increase satisfaction rate and course grades, and reduce delivery time. Application Design: We experimented with the Software Engineering Laboratory (LES) course of a Private University in the Bachelor of Computer Science and Information Systems courses. This experiment corroborated the learning difficulties of students. Collected data were assessed both quantitatively and qualitatively. Findings: Backed up with statistical tests, the results showed a reduction in student absences, higher student satisfaction rate, and higher grades in the courses. Furthermore, our approach allowed students to deliver a product in a short period, representing a possibility of adoption of BDD due to their successful learning experience. Finally, we aim to foster a discussion of appropriate teaching methods of software testing.	Software testing;Computer science;Software design;Software quality;Tools;Proposals;Task analysis;Software Testing;Student Learning Experience;Software Engineering Education;course Project;Agile Software Development	Rocha, Fabio Gomes; Souza, Layse Santos; Silva, Thiciane Suely; Rodriguez, Guillermo	2021 IEEE Global Engineering Education Conference (EDUCON)	https://doi.org/10.1109/EDUCON46332.2021.9453916		1116-1125	"@INPROCEEDINGS{9453916,
    author = ""Rocha, Fabio Gomes and Souza, Layse Santos and Silva, Thiciane Suely and Rodriguez, Guillermo"",
    booktitle = ""2021 IEEE Global Engineering Education Conference (EDUCON)"",
    title = ""Enhancing the Student Learning Experience by Adopting TDD and BDD in Course Projects"",
    year = ""2021"",
    volume = """",
    number = """",
    pages = ""1116-1125"",
    abstract = ""A demonstration of the application and contribution of Test-Driven Development (TDD) and Behavior-Driven Development (BDD) in the student learning experience in the context of a Software Engineering course. Background: Software testing is an activity for ensuring software quality. Although teaching testing rigorously to students is a priority in academia, undergraduate students often encounter difficulties performing testing tasks effectively. Intended Outcomes: To increase satisfaction rate and course grades, and reduce delivery time. Application Design: We experimented with the Software Engineering Laboratory (LES) course of a Private University in the Bachelor of Computer Science and Information Systems courses. This experiment corroborated the learning difficulties of students. Collected data were assessed both quantitatively and qualitatively. Findings: Backed up with statistical tests, the results showed a reduction in student absences, higher student satisfaction rate, and higher grades in the courses. Furthermore, our approach allowed students to deliver a product in a short period, representing a possibility of adoption of BDD due to their successful learning experience. Finally, we aim to foster a discussion of appropriate teaching methods of software testing."",
    keywords = ""Software testing;Computer science;Software design;Software quality;Tools;Proposals;Task analysis;Software Testing;Student Learning Experience;Software Engineering Education;course Project;Agile Software Development"",
    doi = ""10.1109/EDUCON46332.2021.9453916"",
    ISSN = ""2165-9567"",
    month = ""April""
}"	Included	Included	new_screen			2	ScopusSignedIn		Enhancing the Student Learning Experience by Adopting TDD and BDD in Course Projects	https://ieeexplore.ieee.org/document/9453916	IEEE	nan; References
3	Behave	How to Evaluate BDD Scenarios' Quality?	A scenario from the Behavior-driven development (BDD) practice is a known format to represent acceptance tests in agile methodologies, communicating assumptions and expectations by expressing the details that result from the conversations between customers and developers. We believe that this formalization of behavior need to be of good quality to avoid known requirement problems that arise from bad documentation, such as incomplete, underspecified and inconsistent requirements. However, there are only informal guidelines to guide practitioners on their BDD scenarios' elaboration and quality evaluations. To address this lack of guidance, we define a set of quality attributes and propose a question-based checklist to assist BDD scenarios' quality evaluations. [Methods] The quality attributes were identified from an interview-based study with 18 practitioners. In this study, practitioners shared their interpretations on an initial set of literature-informed quality attributes and their own personal evaluation criteria. We consolidated both in a single list of newly redefined attributes, used in the definition of our proposed checklist. We believe that our newly re-defined quality attributes and question-based checklist can enhance the existing guidelines and practitioners' ability to evaluate BDD scenario's quality by providing them with an standard guideline for scenarios' refinement conversations.	behavior-driven development;  checklist;  documentation;  empirical study;  quality	Oliveira, Gabriel; Marczak, Sabrina; Moralles, Cassiano	SBES '19: Proceedings of the XXXIII Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3350768.3351301		481-490	"@inproceedings{10.1145/3350768.3351301,
    author = ""Oliveira, Gabriel and Marczak, Sabrina and Moralles, Cassiano"",
    title = ""How to Evaluate BDD Scenarios' Quality?"",
    year = ""2019"",
    isbn = ""9781450376518"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3350768.3351301"",
    doi = ""10.1145/3350768.3351301"",
    abstract = ""A scenario from the Behavior-driven development (BDD) practice is a known format to represent acceptance tests in agile methodologies, communicating assumptions and expectations by expressing the details that result from the conversations between customers and developers. We believe that this formalization of behavior need to be of good quality to avoid known requirement problems that arise from bad documentation, such as incomplete, underspecified and inconsistent requirements. However, there are only informal guidelines to guide practitioners on their BDD scenarios' elaboration and quality evaluations. To address this lack of guidance, we define a set of quality attributes and propose a question-based checklist to assist BDD scenarios' quality evaluations. [Methods] The quality attributes were identified from an interview-based study with 18 practitioners. In this study, practitioners shared their interpretations on an initial set of literature-informed quality attributes and their own personal evaluation criteria. We consolidated both in a single list of newly redefined attributes, used in the definition of our proposed checklist. We believe that our newly re-defined quality attributes and question-based checklist can enhance the existing guidelines and practitioners' ability to evaluate BDD scenario's quality by providing them with an standard guideline for scenarios' refinement conversations."",
    booktitle = ""Proceedings of the XXXIII Brazilian Symposium on Software Engineering"",
    pages = ""481-490"",
    numpages = ""10"",
    keywords = ""behavior-driven development, checklist, documentation, empirical study, quality"",
    location = ""Salvador, Brazil"",
    series = ""SBES '19""
}"	Included	Included	new_screen			2	ScopusSignedIn		How to Evaluate BDD Scenarios' Quality?	https://dl.acm.org/doi/10.1145/3350768.3351301	Association for Computing Machinery	nan; References
4	Behave	Implementing behavior driven development in an open source ERP	A typical problem in Software Engineering is how to guarantee that all system's requirements are correctly implemented through source code. Traditionally, requirement tracing is a manual task comprised of keeping links from requirements to source code, going through different modeling artifacts, including models. However, these techniques cannot guarantee that requirements are always correctly implemented by source code. Aiming at solving this problem, Behavior-Driven Development (BDD) is a specification technique that automatically checks if all functional requirements are treated properly by source code through the connection of the textual description of requirements to automated tests. Given that for Enterprise Information Systems, requirements are usually identified by analyzing business process models, and these processes are implemented through workflows, connecting workflows to automated tests through BDD specifications can provide automated requirements traceability. The aim of this paper is to briefly present this proposal and show how it was implemented for the open source ERP5 system. © 2013 IFIP International Federation for Information Processing.		De Carvalho R.A., De Carvalho E Silva F.L., Manhães R.S., De Oliveira G.L.	Lecture Notes in Business Information Processing					Included	Included	new_screen			2						
5	Behave	Business Language Driven Development: Joining business process models to automated tests	A typical problem in Software Engineering is how to guarantee that every system requirement is correctly implemented by source code. Many techniques were proposed, mostly based on taking notes of relationships between requirements and code in modeling and documenting artifacts. However, these techniques cannot guarantee that the artifacts are always synchronized with source code. Aiming at solving this problem, Behavior-Driven Development (BDD) is a specification technique that automatically checks that all functional requirements are treated properly by source code, through connecting the textual description of requirements to automated tests. Nevertheless, in some software development areas, such as Enterprise Information Systems (EIS), requirements are usually identified by analyzing business process models - which use graphical notations of the underlying processes logic. Therefore, the aim of this paper is to present Business Language Driven Development (BLDD), a method that aims to extend BDD, by connecting business process models directly to automated tests, thus guaranteeing that requirements are properly covered by code. © 2012 Taylor & Francis Group, London.		De Carvalho R.A., De Carvalho E Silva F.L., Manhaes R.S.	Advances in Enterprise Information Systems II - Proceedings of the 5th International Conference on Research and Practical Issues of Enterprise Information Systems, CONFENIS 2011					Included	Included	new_screen			2						
6	Behave	Test Automation Using Selenium Webdriver 3.0 with C#	About the Book Test Automation using Selenium WebDriver with C#, is the latest book released on Selenium 3.0 using C# as a programming language. This Selenium book has been designed with the objectives of simplicity and ease of understanding. After the huge success of author Vaibhav Mittal and Navneesh Gargs Test Automation books on Selenium with Java, UFT and Microsoft Coded UI this book follows a similar step by step approach to Install, configure and design automation framework using Selenium WebDriver using Visual Studio 2017 and its components. Who is this book for? This book is recommended both for those who are beginning to learn test automation (using Selenium WebDriver) and for advanced automation users. It follows a unique training based approach instead of a regular textbook approach. Using a step by step approach, it guides the students through the exercises using pictorial snapshots. It includes many practical examples and issues which most of the automation testers encounter in day-to-day automation. These experiences will give you an insight into what challenges you could face with automation in the real world. Practical examples cover how to use most of the features within Selenium WebDriver using Visual Studio 2017. No Programming Background? A major fear amongst functional testers who want to learn Selenium is of programming language and coding. As a part of this, we will cover just enough basics of C# programming language that will give the readers the confidence to use Selenium WebDriver. Integrations Covered This book covers Selenium Webdriver integration with independent components to be installed like Microsoft Visual Studio 2017, Katalon, Extent Report, VSTS (Continuous Integration tool) and Specflow (Behaviour Driven Development). We will cover step by step installation, configuration and use of each of these components. Those want to know about Cross Browser testing, it covers how to use Selenium WebDriver to run on IE, Firefox and Chrome browsers. It also covers aspects of Continuous Integration tool from Microsoft (VSTS) so that Selenium WebDriver scripts can be integrated with the development environment and run on nightly builds.		Mittal, Vaibhav; Garg, Navneesh						Excluded	Excluded	new_screen			2						
7	Behave	Bridging the Gap between Requirements Modeling and Behavior-Driven Development	Acceptance criteria (AC) are implementation agnostic conditions that a system must meet to be consistent with its requirements and be accepted by its stakeholders. Each acceptance criterion is typically expressed as a natural-language statement with a clear pass or fail outcome. Writing AC is a tedious and error-prone activity, especially when the requirements specifications evolve and there are different analysts and testing teams involved. Analysts and testers must iterate multiple times to ensure that AC are understandable and feasible, and accurately address the most important requirements and workflows of the system being developed. In many cases, analysts express requirements through models, along with natural language, typically in some variant of the UML. AC must then be derived by developers and testers from such models. In this paper, we bridge the gap between requirements models and AC by providing a UML-based modeling methodology and an automated solution to generate AC. We target AC in the form of Behavioral Specifications in the context of Behavioral-Driven Development (BDD), a widely used agile practice in many application domains. More specially we target the well-known Gherkin language to express AC, which then can be used to generate executable test cases. We evaluate our modeling methodology and AC generation solution through an industrial case study in the financial domain. Our results suggest that (1) our methodology is feasible to apply in practice, and (2) the additional modeling effort required by our methodology is outweighed by the benefits the methodology brings in terms of automated and systematic AC generation and improved model precision.	Software testing;BDD;modeling;requirements engineering;text generation;Gherkin;FinTech	Alferez, Mauricio; Pastore, Fabrizio; Sabetzadeh, Mehrdad; Briand, Lionel; Riccardi, Jean-Richard	2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)	https://doi.org/10.1109/MODELS.2019.00008	"1.P. Ammann and J. Offutt, Introduction to software testing, Cambridge University Press, 2016. CrossRef  Google Scholar; 2.M. Wynne and A. Hellesoy, The Cucumber Book: Behaviour-Driven Development for Testers and Developers, Pragmatic Bookshelf, 2017. Google Scholar; 3.""OMG unified modeling language (OMG UML). version 2.5"", Object Management Group Inc., 2015,  [online]  Available: http://www.omg.org/specIUML/2.5/. Google Scholar; 4.Clearstream services SA,  [online]  Available: https://www.clearstream.com. Google Scholar; 5.""Target2-Securities. User detailed functional specifications. v3.0"", European Central Bank, March 2018,  [online]  Available: https://www.ecb.europa.eu/paym/t2s/html/index.en.html. Google Scholar; 6.C. Larman, Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process, Prentice Hall Professional, 2002. Google Scholar; 7.M. Alferez, F. Pastore, M. Sabetzadeh, L. C. Briand and J.-R. Riccardi, Bridging the gap between requirements modeling and behavior-driven development supplementary materials, 2019,  [online]  Available: http://hdl.handle.net/10993/39710. Google Scholar; 8.Enterprise architect,  [online]  Available: https://sparxsystems.com/products/ea/. Google Scholar; 9.T. H. Cormen, C. E. Leiserson, R. L. Rivest and C. Stein, Introduction to Algorithms, MIT Press, 2009. Google Scholar; 10.M. Shirole and R. Kumar, ""UML behavioral model based test case generation: a survey"", ACM SIGSOFT Software Engineering Notes, vol. 38, no. 4, pp. 1-13, 2013. CrossRef  Google Scholar; 11.A. Groce and W. Visser, ""Heuristic model checking for java programs"" in SPIN ser. Lecture Notes in Computer Science, Springer, vol. 2318, pp. 242-245, 2002. CrossRef  Google Scholar; 12.C. Wang, F. Pastore and L. Briand, ""Automated generation of constraints from use case specifications to support system testing"", 2018 IEEE 11 th International Conference on Software Testing Verification and Validation (ICST), pp. 23-33, April 2018. View Article  Google Scholar; 13.C. Wang, F. Pastore and L. C. Briand, ""Automated generation of constraints from use case specifications to support system testing"", ICST. IEEE Computer Society, pp. 23-33, 2018. View Article  Google Scholar; 14.A. Orso and G. Rothermel, ""Software testing: A research travelogue (2000-2014)"", Proceedings of the on Future of Software Engineering ser. FOSE 2014, pp. 117-132, 2014. CrossRef  Google Scholar; 15.S. Anand, E. K. Burke, T. Y. Chen, J. Clark, M. B. Cohen, W. Grieskamp, et al., ""An orchestrated survey of methodologies for automated software test case generation"", J. Syst. Softw., vol. 86, no. 8, pp. 1978-2001, Aug. 2013. CrossRef  Google Scholar; 16.M. J. E. Cuaresma, J. J. Gutierrez, M. Mejias, G. Aragon, I. M. Ramos, J. T. Valderrama, et al., ""An overview on test generation from functional requirements"", Journal of Systems and Software, vol. 84, no. 8, pp. 1379-1393, 2011. Google Scholar; 17.A. C. Dias Neto, R. Subramanyan, M. Vieira and G. H. Travassos, ""A survey on model-based testing approaches: A systematic review"", Proceedings of the 1st ACM International Workshop on Empirical Assessment of Software Engineering Languages and Technologies: Held in Conjunction with the 22Nd IEEE/ACM International Conference on Automated Software Engineering (ASE) 2007 ser. WEASELTech'07, pp. 31-36, 2007. CrossRef  Google Scholar; 18.A. Nayak and D. Samanta, ""Synthesis of test scenarios using UML activity diagrams"", Software and System Modeling, vol. 10, no. 1, pp. 63-89, 2011. CrossRef  Google Scholar; 19.D. Kundu, M. Sarma and D. Samanta, ""A uml model-based approach to detect infeasible paths"", J. Syst. Softw., vol. 107, no. C, pp. 71-92, Sep. 2015. CrossRef  Google Scholar; 20.C. Sun, Y. Zhao, L. Pan, X. He and D. Towey, ""A transformation-based approach to testing concurrent programs using UML activity diagrams"", Softw. Pract. Exper., vol. 46, no. 4, pp. 551-576, 2016. CrossRef  Google Scholar; 21.V. Arora, R. Bhatia and M. Singh, ""Synthesizing test scenarios in uml activity diagram using a bio-inspired approach"", Comput. Lang. Syst. Struct., vol. 50, no. C, pp. 1-19, Dec. 2017. CrossRef  Google Scholar; 22.C. Wang, F. Pastore, A. Goknil, L. C. Briand and M. Z. Z. Iqbal, ""Automatic generation of system test cases from use case specifications"", Proceedings of the 2015 International Symposium on Software Testing and Analysis ISSTA 2015, pp. 385-396, July 12-17, 2015, 2015. CrossRef  Google Scholar; 23.G. Carvalho, D. Falcao, F. Barros, A. Sampaio, A. Mota, L. Motta, et al., ""NAT2TEST SCR: Test case generation from natural language requirements based on SCR specifications"", Science of Computer Programming, vol. 95, no. P3, pp. 275-297, Dec. 2014. CrossRef  Google Scholar; 24.T. Yue, S. Ali and M. Zhang, ""Rtcm: A natural language based automated and practical test case generation framework"", Proceedings of International Symposium on Software Testing and Analysis ser. ISSTA 2015, pp. 397-408, 2015. CrossRef  Google Scholar; 25.E. Sarmiento, J. C. Leite, E. Almentero and G. S. Alzamora, ""Test scenario generation from natural language requirements descriptions based on petri-nets"", Electronic Notes in Theoretical Computer Science, vol. 329, pp. 123-148, 2016. CrossRef  Google Scholar"	239-249	"@INPROCEEDINGS{8906976,
    author = ""Alferez, Mauricio and Pastore, Fabrizio and Sabetzadeh, Mehrdad and Briand, Lionel and Riccardi, Jean-Richard"",
    booktitle = ""2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)"",
    title = ""Bridging the Gap between Requirements Modeling and Behavior-Driven Development"",
    year = ""2019"",
    volume = """",
    number = """",
    pages = ""239-249"",
    abstract = ""Acceptance criteria (AC) are implementation agnostic conditions that a system must meet to be consistent with its requirements and be accepted by its stakeholders. Each acceptance criterion is typically expressed as a natural-language statement with a clear pass or fail outcome. Writing AC is a tedious and error-prone activity, especially when the requirements specifications evolve and there are different analysts and testing teams involved. Analysts and testers must iterate multiple times to ensure that AC are understandable and feasible, and accurately address the most important requirements and workflows of the system being developed. In many cases, analysts express requirements through models, along with natural language, typically in some variant of the UML. AC must then be derived by developers and testers from such models. In this paper, we bridge the gap between requirements models and AC by providing a UML-based modeling methodology and an automated solution to generate AC. We target AC in the form of Behavioral Specifications in the context of Behavioral-Driven Development (BDD), a widely used agile practice in many application domains. More specially we target the well-known Gherkin language to express AC, which then can be used to generate executable test cases. We evaluate our modeling methodology and AC generation solution through an industrial case study in the financial domain. Our results suggest that (1) our methodology is feasible to apply in practice, and (2) the additional modeling effort required by our methodology is outweighed by the benefits the methodology brings in terms of automated and systematic AC generation and improved model precision."",
    keywords = ""Software testing;BDD;modeling;requirements engineering;text generation;Gherkin;FinTech"",
    doi = ""10.1109/MODELS.2019.00008"",
    ISSN = """",
    month = ""Sep.""
}"	Included	Included	new_screen			2	ScopusSignedIn		Bridging the Gap between Requirements Modeling and Behavior-Driven Development	https://ieeexplore.ieee.org/document/8906976	IEEE	
8	Behave	Design and validation of a C++ code generator from Abstract State Machines specifications	According to best practices of model-driven engineering, the implementation of a system should be obtained from its model through a systematic model-to-code transformation. We present in this paper a methodology supported by the Asm2C++ tool, which allows the users to generate C++ code from abstract state machine models. Thanks to Asm2C++, the implementation is generated in a seamless manner with an assurance of potential bug freeness of the generated code. Following the same approach, model-based testing suggests deriving also (unit) tests from abstract models. We extend the Asm2C++ tool such that it can automatically produce unit tests for the generated code. Abstract test sequences, either generated randomly or through model checking, are translated to concrete C++ unit tests using the Boost library. In a similar manner, also, scenarios are generated in a behavior-driven development (BDD) approach. To guarantee the correctness of the transformation process, we define a mechanism to test the correctness of the model-to-code transformation with respect to two main criteria: syntactical correctness and semantic correctness, which is based on the definition of conformance between the specification and the code. Using this approach, we have devised a process able to test the generated code by reusing unit tests. The process has been used to validate our model-to-code transformations. (c) 2019 John Wiley & Sons, Ltd.	Automatic programming; Automatic test pattern generation; C++ (programming language); Cesium; Cosine transforms; Semantics; Specifications; Systems analysis; Abstract state machines; Automatic code generations; Model-driven Engineering; transformation validation; Unit tests; Model checking	Bonfanti, Silvia; Gargantini, Angelo; Mashkoor, Atif	Journal of Software: Evolution and Process	https://doi.org/10.1002/smr.2205			"@ARTICLE{Bonfanti2020,
    author = ""Bonfanti, Silvia and Gargantini, Angelo and Mashkoor, Atif"",
    title = ""Design and validation of a C++ code generator from Abstract State Machines specifications"",
    year = ""2020"",
    journal = ""Journal of Software: Evolution and Process"",
    volume = ""32"",
    number = ""2"",
    doi = ""10.1002/smr.2205"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075467384\&doi=10.1002\%2fsmr.2205\&partnerID=40\&md5=604bc3ff58c979a5f9d8254716d26025"",
    affiliations = ""Department of Management, Information and Production Engineering, University of Bergamo, Bergamo, Italy; Software Competence Center Hagenberg, Hagenberg, Austria; Institute for Software Systems Engineering, Johannes Kepler University, Linz, Austria"",
    abstract = ""According to best practices of model-driven engineering, the implementation of a system should be obtained from its model through a systematic model-to-code transformation. We present in this paper a methodology supported by the Asm2C++ tool, which allows the users to generate C++ code from abstract state machine models. Thanks to Asm2C++, the implementation is generated in a seamless manner with an assurance of potential bug freeness of the generated code. Following the same approach, model-based testing suggests deriving also (unit) tests from abstract models. We extend the Asm2C++ tool such that it can automatically produce unit tests for the generated code. Abstract test sequences, either generated randomly or through model checking, are translated to concrete C++ unit tests using the Boost library. In a similar manner, also, scenarios are generated in a behavior-driven development (BDD) approach. To guarantee the correctness of the transformation process, we define a mechanism to test the correctness of the model-to-code transformation with respect to two main criteria: syntactical correctness and semantic correctness, which is based on the definition of conformance between the specification and the code. Using this approach, we have devised a process able to test the generated code by reusing unit tests. The process has been used to validate our model-to-code transformations. (c) 2019 John Wiley \& Sons, Ltd."",
    author_keywords = ""abstract state machine; automatic code generation; C++; model-driven engineering; transformation validation; unit tests generation"",
    keywords = ""Automatic programming; Automatic test pattern generation; C++ (programming language); Cesium; Cosine transforms; Semantics; Specifications; Systems analysis; Abstract state machines; Automatic code generations; Model-driven Engineering; transformation validation; Unit tests; Model checking"",
    correspondence_address = ""S. Bonfanti; Department of Management, Information and Production Engineering, University of Bergamo, Bergamo, Italy; email: silvia.bonfanti@unibg.it"",
    publisher = ""John Wiley and Sons Ltd"",
    issn = ""20477481"",
    language = ""English"",
    abbrev_source_title = ""J. Softw. Evol. Process"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 23; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Design and validation of a C++ code generator from Abstract State Machines specifications	https://www.scopus.com/record/display.uri?eid=2-s2.0-85075467384&origin=resultslist&sort=plf-f&src=s&sid=57723f09ff9f392a10dfff955495a963&sot=b&sdt=b&s=TITLE-ABS-KEY%28design+and+validation+of+a+c%2B%2B+code+generator+from+abstract+state+machines+specifications%29&sl=104&sessionSearchId=57723f09ff9f392a10dfff955495a963&relpos=0	John Wiley and Sons Ltd	nan; References; Pages
9	Behave	An optimized algorithm on distributed network node data access path based on behavior drive model	According to different node data access objects, and based on the idea of behavior-driven development, an interface-oriented node data access tool is designed and implemented. The tool mainly implements an executable node data access tool that is based on MFC, and writes a set of Win32 console application, which improves the node data automation access scripts and encapsulates the module interfaces, thus improving the distributed network data access speed. (c) (2014) Trans Tech Publications, Switzerland.	Algorithms; Distributed computer systems; Manufacture; Peer to peer networks; Cascading WPP; Distributed systems; Drive development; Node access; P2P; Digital storage	Jiang, Wu Xue; Hu, Xuan Zi; Wang, Shi; Liang, Yan	Applied Mechanics and Materials	https://doi.org/10.4028/www.scientific.net/AMM.687-691.3066		3066 - 3069	"@ARTICLE{Jiang20143066,
    author = ""Jiang, Wu Xue and Hu, Xuan Zi and Wang, Shi and Liang, Yan"",
    editor = ""Z., Lin and H., Hu and Y., Zhang and J., Qiao and J., Xu"",
    title = ""An optimized algorithm on distributed network node data access path based on behavior drive model"",
    year = ""2014"",
    journal = ""Applied Mechanics and Materials"",
    volume = ""687-691"",
    pages = ""3066 - 3069"",
    doi = ""10.4028/www.scientific.net/AMM.687-691.3066"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921418651\&doi=10.4028\%2fwww.scientific.net\%2fAMM.687-691.3066\&partnerID=40\&md5=5ce5fbc7a9a5ca303fa9ac49c61e19b0"",
    affiliations = ""Department of Computer Engineering, Dongguan Polytechnic, Dongguan, 523808, Guangdong, China; Department of Computer Engineering, Maoming Polytechnic, Maoming, 525000, Guangdong, China"",
    abstract = ""According to different node data access objects, and based on the idea of behavior-driven development, an interface-oriented node data access tool is designed and implemented. The tool mainly implements an executable node data access tool that is based on MFC, and writes a set of Win32 console application, which improves the node data automation access scripts and encapsulates the module interfaces, thus improving the distributed network data access speed. (c) (2014) Trans Tech Publications, Switzerland."",
    author_keywords = ""Behavior drive development; Cascading WPP; Distributed system; Node access; P2P"",
    keywords = ""Algorithms; Distributed computer systems; Manufacture; Peer to peer networks; Cascading WPP; Distributed systems; Drive development; Node access; P2P; Digital storage"",
    publisher = ""Trans Tech Publications Ltd"",
    issn = ""16609336"",
    isbn = ""978-303835328-7"",
    language = ""English"",
    abbrev_source_title = ""Appl. Mech. Mater."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 2014 International Conference on Manufacturing Technology and Electronics Applications, ICMTEA 2014; Conference date: 8 November 2014 through 9 November 2014; Conference code: 112049""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		An optimized algorithm on distributed network node data access path based on behavior drive model	https://www.scopus.com/record/display.uri?eid=2-s2.0-84921418651&origin=resultslist&sort=plf-f&src=s&sid=94ae8cbac1d9ae83efe2751652bbb4c7&sot=b&sdt=b&s=TITLE-ABS-KEY%28an+optimized+algorithm+on+distributed+network+node+data+access+path+based+on+behavior+drive+model%29&sl=112&sessionSearchId=94ae8cbac1d9ae83efe2751652bbb4c7&relpos=0	Trans Tech Publications Ltd	nan; References
10	Behave	The new Y Chromosome Haplotype Reference Database	After opening the first version of an internet-accessible worldwide reference database of Y chromosome profiles 14 years ago and six years after the last major relaunch the new YHRD 4.0 repository and website has been rolled-out. By November 2014 about 136k 9-locus haplotypes, among these 84k 17-locus haplotypes, 25k 23-locus haplotypes and 15k Y SNP profiles from 917 sampling locations in 128 countries have been submitted by more than 250 institutes and laboratories. In geographic terms, about 39% of the YHRD samples are from Europe, 32% from Asia, 16% from South America, 6% from North America, 4% from Africa and 2% from Oceania/Australia. Worldwide collaboration is the driving force for the rapid growth of the database and this, in turn, allows the evaluation and implementation of enhanced interpretation tools (variable frequency estimators, LR-based mixture and kinship analysis, Y-SNP-based ancestry assessment).	Database, Y chromosome, Haplotype, Y-STR, Frequency estimation, Metapopulation	Willuweit, Sascha; Roewer, Lutz	Forensic Science International: Genetics					Excluded	Excluded	new_screen			2						
11	Behave	Digital forensics as a service: Stepping up the game	After providing Digital Forensics as a Service (DFaaS) implementations to law enforcement agencies for close to a decade, we present our view from an inside-out perspective. We share the lessons learned from an organizational, operational and development perspective in a forensic and legal context. We conclude with our vision on how to bring the DFaaS concept to the next level for both investigative and innovative purposes.	Digital forensics, Digital forensics as a service, DFaaS, Hansken	van Beek, H. M. A.; van den Bos, J.; Boztas, A.; van Eijk, E. J.; Schramp, R.; Ugen, M.	Forensic Science International: Digital Investigation					Excluded	Excluded	new_screen			2						
12	Behave	Behavior-driven development benefits and challenges: reports from an industrial study	Agile approaches arose as a way of addressing some of the main challenges in software development, such as changing requirements, lack of understanding about the system scope, and out-of-sync between code, requirements, and documentation. Studies show that agile projects still suffer from lack of customer support, resulting in difficulties to represent customer needs on requested features. Behavior-Driven Development (BDD) brings a structured way to represent user behaviors and to validate user stories by using an ubiquitous language, shared among everyone involved on the development of the software. The approach allows the creation of scenarios that can be used by the team to share information between different stakeholders, enabling all those players to successfully collaborate and coordinate their work. In this paper, we report on an empirical study conducted with 24 IT professionals with practical experience on BDD. Through this, we identify the perceived benefits and challenges of adopting BDD.	agile development;  behavior-driven development;  empirical study;  grounded theory	Pereira, Lauriane; Sharp, Helen; de Souza, Cleidson; Oliveira, Gabriel; Marczak, Sabrina; Bastos, Ricardo	XP '18: Proceedings of the 19th International Conference on Agile Software Development: Companion	https://doi.org/10.1145/3234152.3234167		1-4	"@inproceedings{10.1145/3234152.3234167,
    author = ""Pereira, Lauriane and Sharp, Helen and de Souza, Cleidson and Oliveira, Gabriel and Marczak, Sabrina and Bastos, Ricardo"",
    title = ""Behavior-driven development benefits and challenges: reports from an industrial study"",
    year = ""2018"",
    isbn = ""9781450364225"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3234152.3234167"",
    doi = ""10.1145/3234152.3234167"",
    abstract = ""Agile approaches arose as a way of addressing some of the main challenges in software development, such as changing requirements, lack of understanding about the system scope, and out-of-sync between code, requirements, and documentation. Studies show that agile projects still suffer from lack of customer support, resulting in difficulties to represent customer needs on requested features. Behavior-Driven Development (BDD) brings a structured way to represent user behaviors and to validate user stories by using an ubiquitous language, shared among everyone involved on the development of the software. The approach allows the creation of scenarios that can be used by the team to share information between different stakeholders, enabling all those players to successfully collaborate and coordinate their work. In this paper, we report on an empirical study conducted with 24 IT professionals with practical experience on BDD. Through this, we identify the perceived benefits and challenges of adopting BDD."",
    booktitle = ""Proceedings of the 19th International Conference on Agile Software Development: Companion"",
    articleno = ""42"",
    numpages = ""4"",
    keywords = ""agile development, behavior-driven development, empirical study, grounded theory"",
    location = ""Porto, Portugal"",
    series = ""XP '18""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behavior-Driven Development Benefits and Challenges: Reports from an Industrial Study	https://dl.acm.org/doi/10.1145/3234152.3234167	Association for Computing Machinery	nan; References
13	Behave	Legend: an agile DSL toolset for web acceptance testing	Agile development emphasizes collaborations among customers, business analysts, domain experts, developers, and testers. However, the large scale and rapid pace of many agile projects presents challenges during testing activities. Large sets of test artifacts must be comprehensible and available to various stakeholders, traceable to requirements, and easily maintainable as the software evolves. In this paper we describe Legend, a toolset that leverages domain-specific language to streamline functional testing in agile projects. Some key features of the toolset include test template generation from user stories, model-based automation, test inventory synchronization, and centralized test tagging.	Agile Development;  Behavior-Driven Development;  Domain-Specific Languages;  Software Testing;  Test Automation	King, Tariq M.; Nunez, Gabriel; Santiago, Dionny; Cando, Adam; Mack, Cody	ISSTA 2014: Proceedings of the 2014 International Symposium on Software Testing and Analysis	https://doi.org/10.1145/2610384.2628048		409-412	"@inproceedings{10.1145/2610384.2628048,
    author = ""King, Tariq M. and Nunez, Gabriel and Santiago, Dionny and Cando, Adam and Mack, Cody"",
    title = ""Legend: an agile DSL toolset for web acceptance testing"",
    year = ""2014"",
    isbn = ""9781450326452"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2610384.2628048"",
    doi = ""10.1145/2610384.2628048"",
    abstract = ""Agile development emphasizes collaborations among customers, business analysts, domain experts, developers, and testers. However, the large scale and rapid pace of many agile projects presents challenges during testing activities. Large sets of test artifacts must be comprehensible and available to various stakeholders, traceable to requirements, and easily maintainable as the software evolves. In this paper we describe Legend, a toolset that leverages domain-specific language to streamline functional testing in agile projects. Some key features of the toolset include test template generation from user stories, model-based automation, test inventory synchronization, and centralized test tagging."",
    booktitle = ""Proceedings of the 2014 International Symposium on Software Testing and Analysis"",
    pages = ""409-412"",
    numpages = ""4"",
    keywords = ""Agile Development, Behavior-Driven Development, Domain-Specific Languages, Software Testing, Test Automation"",
    location = ""San Jose, CA, USA"",
    series = ""ISSTA 2014""
}"	Included	Included	new_screen			2	ScopusSignedIn		Legend: An Agile DSL Toolset for Web Acceptance Testing	https://dl.acm.org/doi/10.1145/2610384.2628048	Association for Computing Machinery	nan; References
14	Behave	Combining STPA and BDD for safety analysis and verification in agile development	Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment.	agile development;  safety verification;  safety-critical systems	Wang, Yang; Wagner, Stefan	ICSE '18: Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings	https://doi.org/10.1145/3183440.3194973		286-287	"@inproceedings{10.1145/3183440.3194973,
    author = ""Wang, Yang and Wagner, Stefan"",
    title = ""Combining STPA and BDD for safety analysis and verification in agile development"",
    year = ""2018"",
    isbn = ""9781450356633"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3183440.3194973"",
    doi = ""10.1145/3183440.3194973"",
    abstract = ""Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment."",
    booktitle = ""Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings"",
    pages = ""286-287"",
    numpages = ""2"",
    keywords = ""agile development, safety verification, safety-critical systems"",
    location = ""Gothenburg, Sweden"",
    series = ""ICSE '18""
}"	Included	Included	new_screen			2	ScopusSignedIn		Combining STPA and BDD for Safety Analysis and Verification in Agile Development	https://dl.acm.org/doi/10.1145/3183440.3194973	Association for Computing Machinery	nan; References
15	Behave	Combining STPA and BDD for safety analysis and verification in agile development	Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment.	agile development;  safety verification;  safety-critical systems	Wang, Yang; Wagner, Stefan	ICSE '18: Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings	https://doi.org/10.1145/3183440.3194973		286-287	"@inproceedings{10.1145/3183440.3194973,
    author = ""Wang, Yang and Wagner, Stefan"",
    title = ""Combining STPA and BDD for safety analysis and verification in agile development"",
    year = ""2018"",
    isbn = ""9781450356633"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3183440.3194973"",
    doi = ""10.1145/3183440.3194973"",
    abstract = ""Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment."",
    booktitle = ""Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings"",
    pages = ""286-287"",
    numpages = ""2"",
    keywords = ""agile development, safety verification, safety-critical systems"",
    location = ""Gothenburg, Sweden"",
    series = ""ICSE '18""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Poster: Combining STPA and BDD for Safety Analysis and Verification in Agile Development	https://dl.acm.org/doi/10.1145/3183440.3194973	Association for Computing Machinery	nan; References
16	Behave	Identifying critical areas for improvement in agile multi-site co-development	Agile processes potentially ease distributed software development by demanding regular communication and self-management of virtual team members. However, being designed for collocated teams, extensions to the regular process need to be made. We investigate critical areas of improvement based on a case of distributed Scrum involving two unaffiliated Austrian IT organizations that collaborate to build software. We identified eight critical areas for improvement originating from interviews, retrospective meetings and an in-depth case analysis. Key suggestions for practice include the establishment of long-lived single-site Scrum teams and the application of Behavior Driven Development (BDD) to make implicit requirement knowledge explicit and transparent to all of the distributed parties. Copyright (c) 2013 SCITEPRESS.	Engineering; Industrial engineering; Agile software development; Behavior driven development; Distributed software development; Scrum; Software development process; Software design	Vallon, Raoul; Bayrhammer, Klaus; Strobl, Stefan; Bernhart, Mario; Grechenig, Thomas	ENASE 2013 - Proceedings of the 8th International Conference on Evaluation of Novel Approaches to Software Engineering	https://www.scopus.com/record/display.uri?eid=2-s2.0-84887053861&origin=resultslist&sort=plf-f&src=s&sid=25ad9de13816f2c4530c0a07ebb159e2&sot=b&sdt=b&s=TITLE-ABS-KEY%28identifying+critical+areas+for+improvement+in+agile+multi+site+co+development%29&sl=92&sessionSearchId=25ad9de13816f2c4530c0a07ebb159e2&relpos=0		165 - 172	"@CONFERENCE{Vallon2013165,
    author = ""Vallon, Raoul and Bayrhammer, Klaus and Strobl, Stefan and Bernhart, Mario and Grechenig, Thomas"",
    title = ""Identifying critical areas for improvement in agile multi-site co-development"",
    year = ""2013"",
    journal = ""ENASE 2013 - Proceedings of the 8th International Conference on Evaluation of Novel Approaches to Software Engineering"",
    pages = ""165 - 172"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887053861\&partnerID=40\&md5=3cadced8c751aef28f93e71bfddecc39"",
    affiliations = ""Research Group for Industrial Software, Vienna University of Technology, Vienna, Austria"",
    abstract = ""Agile processes potentially ease distributed software development by demanding regular communication and self-management of virtual team members. However, being designed for collocated teams, extensions to the regular process need to be made. We investigate critical areas of improvement based on a case of distributed Scrum involving two unaffiliated Austrian IT organizations that collaborate to build software. We identified eight critical areas for improvement originating from interviews, retrospective meetings and an in-depth case analysis. Key suggestions for practice include the establishment of long-lived single-site Scrum teams and the application of Behavior Driven Development (BDD) to make implicit requirement knowledge explicit and transparent to all of the distributed parties. Copyright (c) 2013 SCITEPRESS."",
    author_keywords = ""Agile software development; Behavior driven development; Distributed software development; Scrum; Software development process"",
    keywords = ""Engineering; Industrial engineering; Agile software development; Behavior driven development; Distributed software development; Scrum; Software development process; Software design"",
    correspondence_address = ""R. Vallon; Research Group for Industrial Software, Vienna University of Technology, Vienna, Austria; email: raoul.vallon@inso.tuwien.ac.at"",
    isbn = ""978-989856562-4"",
    language = ""English"",
    abbrev_source_title = ""ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 6; Conference name: 8th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE 2013; Conference date: 4 July 2013 through 6 July 2013; Conference code: 100615""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Identifying critical areas for improvement in agile multi-site co-development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84887053861&origin=resultslist&sort=plf-f&src=s&sid=25ad9de13816f2c4530c0a07ebb159e2&sot=b&sdt=b&s=TITLE-ABS-KEY%28identifying+critical+areas+for+improvement+in+agile+multi+site+co+development%29&sl=92&sessionSearchId=25ad9de13816f2c4530c0a07ebb159e2&relpos=0		nan; References; Publisher
17	Behave	Quality of software requirements specification in agile projects: A cross-case analysis of six companies	Agile Software Development (ASD) has several limitations concerning its requirements engineering activities. Improving the quality of Software Requirements Specifications (SRSs) in ASD may help to gain a competitive advantage in the software industry. Based on the findings of a Systematic Mapping study, six industrial case studies in different contexts were conducted to investigate and characterize the requirements specification activity in ASD. Data collected from documents, observations, and interviews with software engineers were triangulated, analyzed, and synthesized using Grounded Theory and Meta-Ethnography. The analysis and cross-synthesis of the six case studies resulted in a model describing the phenomenon. This model defines the simplicity and objectivity as essential quality factors of SRSs in ASD. The main factors that affect the SRSs quality in ASD projects are related to their customer-driven nature that leads to prolix SRSs, hindering its understanding from the developer perspective. The emerged model is supported by explanations and provides a deeper understanding of the requirements specification activity in ASD. This creates opportunities for further studies and improvements in SRSs for ASD in industry. (c) 2018 Elsevier Inc.	Competition; Formal specification; Requirements engineering; Software design; Agile methods; Agile software development; Competitive advantage; Empirical studies; Industrial case study; Quality of softwares; Requirements specifications; Systematic mapping studies; Quality control	Medeiros, Juliana; Vasconcelos, Alexandre; Silva, Carla; Goulao, Miguel	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2018.04.064		171 - 194	"@ARTICLE{Medeiros2018171,
    author = ""Medeiros, Juliana and Vasconcelos, Alexandre and Silva, Carla and Goulao, Miguel"",
    title = ""Quality of software requirements specification in agile projects: A cross-case analysis of six companies"",
    year = ""2018"",
    journal = ""Journal of Systems and Software"",
    volume = ""142"",
    pages = ""171 - 194"",
    doi = ""10.1016/j.jss.2018.04.064"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046681152\&doi=10.1016\%2fj.jss.2018.04.064\&partnerID=40\&md5=14e8f2ea07d3b4be4141066baabb83f1"",
    affiliations = ""Instituto Federal de Educacao, Ciencia e Tecnologia da Paraiba (IFPB), Brazil; Centro de Informatica, Universidade Federal de Pernambuco (UFPE), Brazil; NOVA LINCS, Faculdade de Ciencias e Tecnologia, Universidade Nova de Lisboa, Portugal"",
    abstract = ""Agile Software Development (ASD) has several limitations concerning its requirements engineering activities. Improving the quality of Software Requirements Specifications (SRSs) in ASD may help to gain a competitive advantage in the software industry. Based on the findings of a Systematic Mapping study, six industrial case studies in different contexts were conducted to investigate and characterize the requirements specification activity in ASD. Data collected from documents, observations, and interviews with software engineers were triangulated, analyzed, and synthesized using Grounded Theory and Meta-Ethnography. The analysis and cross-synthesis of the six case studies resulted in a model describing the phenomenon. This model defines the simplicity and objectivity as essential quality factors of SRSs in ASD. The main factors that affect the SRSs quality in ASD projects are related to their customer-driven nature that leads to prolix SRSs, hindering its understanding from the developer perspective. The emerged model is supported by explanations and provides a deeper understanding of the requirements specification activity in ASD. This creates opportunities for further studies and improvements in SRSs for ASD in industry. (c) 2018 Elsevier Inc."",
    author_keywords = ""Agile methods; Agile Requirements Engineering; Empirical study; Requirements specification"",
    keywords = ""Competition; Formal specification; Requirements engineering; Software design; Agile methods; Agile software development; Competitive advantage; Empirical studies; Industrial case study; Quality of softwares; Requirements specifications; Systematic mapping studies; Quality control"",
    correspondence_address = ""J. Medeiros; Instituto Federal de Educacao, Ciencia e Tecnologia da Paraiba (IFPB), Brazil; email: juliana.medeiros@ifpb.edu.br"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 30""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Quality of software requirements specification in agile projects: A cross-case analysis of six companies	https://www.scopus.com/record/display.uri?eid=2-s2.0-85046681152&origin=resultslist&sort=plf-f&src=s&sid=567abe17164af32643ff469eb97b17d7&sot=b&sdt=b&s=TITLE-ABS-KEY%28quality+of+software+requirements+specification+in+agile+projects+a+cross+case+analysis+of+six+companies%29&sl=118&sessionSearchId=567abe17164af32643ff469eb97b17d7&relpos=0	Elsevier Inc.	nan; References
18	Behave	Assessing The Effectiveness Of Test-Driven Development and Behavior-Driven Development in an Industry Setting	Agile software development deviates from the traditional and plan-based approaches to software engineering as its iterative cycles embrace changes in software requirements. Test-Driven Development (TDD) and Behavior-Driven Development (BDD) are techniques that have been recently adopted by the software industry and have evolved from agile practices. These techniques aim at improving both the quality of the delivered software and the developers' productivity. They are several studies that have been conducted on TDD in both academic and industry settings with however only a few on BDD. While TDD and BDD have both become popular, many organizations and developers still do not understand the differences between these concepts or where they overlap. The aim of this paper is to assess the effectiveness of these two approaches in terms of external code quality, internal code quality and developers' productivity. To understand the weaknesses and strengths of each of these methods, a literature review was first performed. An experiment was then carried out in an industry setting to observe the effectiveness of TDD and BDD on a number of subjects. Our results showed that both techniques indeed increased the external quality of the delivered product. However, a decrease in productivity and internal quality were noted when BDD was used compared to TDD which might be due to the additional steps involved in BDD.	Test-Driven Development;Behavior-Driven Development;TDD;BDD;productivity;quality;code coverage	A. S. Dookhun; L. Nagowah	2019 International Conference on Computational Intelligence and Knowledge Economy (ICCIKE)					Included	Included	new_screen			2						
19	Behave	The effect of Test-Driven Development and Behavior-Driven Development on Project Success Factors: A Systematic Literature Review Based Study	Agile testing approaches test-driven development (TDD), behavior-driven development (BDD); have gained popularity since the introduction of agile practices. The concept of using these approaches in software projects is to help projects succeed. The effect of TDD and BDD on Project success factors namely, cost, time, and customer satisfaction/external quality, remains an area of investigation. Therefore, this study investigates the results of previously published articles on the effect of TDD and BDD on project success factors. A systematic literature review has been conducted considering articles published between 1999 up to 2020. Thirty-one studies were selected and analyzed. 74.1% of studies are experiments, 25.8% are case studies. 67.7% of these studies were performed in an industrial setting, 29.0% were performed in an academic setting and only one study with 3.22% was mixed academic and industrial settings. The result shows that the TDD and the BDD consume more time and cost compared to traditional testing (TLD). Moreover, the TDD as TLD may not necessarily satisfy the customer unlike the BDD appears that achieve customer satisfaction. Although, when TDD compared to BDD, TDD consumed more time and lower customer acceptance than the BDD. (c) 2021 IEEE.	Boolean functions; Customer satisfaction; Sales; Agile practices; Agile testing; Customer acceptance; Industrial settings; Project success factors; Software project; Systematic literature review; Test driven development; Computer programming	Abushama, Hisham M.; Alassam, Hanaa Altigani; Elhaj, Fatin A.	Proceedings of: 2020 International Conference on Computer, Control, Electrical, and Electronics Engineering, ICCCEEE 2020	https://doi.org/10.1109/ICCCEEE49695.2021.9429593			"@CONFERENCE{Abushama2021,
    author = ""Abushama, Hisham M. and Alassam, Hanaa Altigani and Elhaj, Fatin A."",
    editor = ""D., Mahmoud and S., Gomha and A., Osman"",
    title = ""The effect of Test-Driven Development and Behavior-Driven Development on Project Success Factors: A Systematic Literature Review Based Study"",
    year = ""2021"",
    journal = ""Proceedings of: 2020 International Conference on Computer, Control, Electrical, and Electronics Engineering, ICCCEEE 2020"",
    doi = ""10.1109/ICCCEEE49695.2021.9429593"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107133513\&doi=10.1109\%2fICCCEEE49695.2021.9429593\&partnerID=40\&md5=d319166df0c75cf75c65ae75f08bf3d1"",
    affiliations = ""University of Khartoum, Faculty of Mathematical Science, Department of Computer Sciences, P.O.BOX 321, Khartoum, Sudan"",
    abstract = ""Agile testing approaches test-driven development (TDD), behavior-driven development (BDD); have gained popularity since the introduction of agile practices. The concept of using these approaches in software projects is to help projects succeed. The effect of TDD and BDD on Project success factors namely, cost, time, and customer satisfaction/external quality, remains an area of investigation. Therefore, this study investigates the results of previously published articles on the effect of TDD and BDD on project success factors. A systematic literature review has been conducted considering articles published between 1999 up to 2020. Thirty-one studies were selected and analyzed. 74.1\% of studies are experiments, 25.8\% are case studies. 67.7\% of these studies were performed in an industrial setting, 29.0\% were performed in an academic setting and only one study with 3.22\% was mixed academic and industrial settings. The result shows that the TDD and the BDD consume more time and cost compared to traditional testing (TLD). Moreover, the TDD as TLD may not necessarily satisfy the customer unlike the BDD appears that achieve customer satisfaction. Although, when TDD compared to BDD, TDD consumed more time and lower customer acceptance than the BDD. (c) 2021 IEEE."",
    author_keywords = ""Agile Testing; Behavior Driven Development; Projects Success Factors; Systematic Literature Review; Test Driven Development; Test Last Development"",
    keywords = ""Boolean functions; Customer satisfaction; Sales; Agile practices; Agile testing; Customer acceptance; Industrial settings; Project success factors; Software project; Systematic literature review; Test driven development; Computer programming"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-172819111-9"",
    language = ""English"",
    abbrev_source_title = ""Proc. of: Int. Conf. Comput., Control, Electr., Electron. Eng., ICCCEEE"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8; Conference name: 2020 International Conference on Computer, Control, Electrical, and Electronics Engineering, ICCCEEE 2020; Conference date: 26 February 2021 through 28 February 2021; Conference code: 169057""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		The effect of Test-Driven Development and Behavior-Driven Development on Project Success Factors: A Systematic Literature Review Based Study	https://www.scopus.com/record/display.uri?eid=2-s2.0-85107133513&origin=resultslist&sort=plf-f&src=s&sid=9f2e4b4a377985d16f30475aa8c1cd5f&sot=b&sdt=b&s=TITLE-ABS-KEY%28the+effect+of+test+driven+development+and+behavior+driven+development+on+project+success+factors+a+systematic+literature+review+based+study%29&sl=154&sessionSearchId=9f2e4b4a377985d16f30475aa8c1cd5f&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References; Pages
20	Behave	Behavior driven testing in ALMA telescope calibration software	ALMA software development cycle includes well defined testing stages that involves developers, testers and scientists. We adapted Behavior Driven Development (BDD) to testing activities applied to Telescope Calibration (TELCAL) software. BDD is an agile technique that encourages communication between roles by defining test cases using natural language to specify features and scenarios, what allows participants to share a common language and provides a high level set of automated tests. This work describes how we implemented and maintain BDD testing for TELCAL, the infrastructure needed to support it and proposals to expand this technique to other subsystems. (c) COPYRIGHT SPIE. Downloading of the abstract is permitted for personal use only.	Automation; Boolean functions; Calibration; High level languages; Software design; Telescopes; Agile; ALMA telescope; Automated test; Calibration softwares; Common languages; Natural languages; Software development cycles; TELCAL; Software testing	Gil, Juan P.; Garces, Mario; Broguiere, Dominique; Shen, Tzu-Chiang	Proceedings of SPIE - The International Society for Optical Engineering	https://doi.org/10.1117/12.2232197			"@CONFERENCE{Gil2016,
    author = ""Gil, Juan P. and Garces, Mario and Broguiere, Dominique and Shen, Tzu-Chiang"",
    editor = ""G., Chiozzi and J.C., Guzman"",
    title = ""Behavior driven testing in ALMA telescope calibration software"",
    year = ""2016"",
    journal = ""Proceedings of SPIE - The International Society for Optical Engineering"",
    volume = ""9913"",
    doi = ""10.1117/12.2232197"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006401169\&doi=10.1117\%2f12.2232197\&partnerID=40\&md5=b01b44b2871f0850ad840bdd209cc3ac"",
    affiliations = ""Atacama Large Milimeter/submilimeter Array, Alonso de Cordova 3107, Santiago, Chile; Institut de Radioastronomie Millimetrique (IRAM), Grenoble, France"",
    abstract = ""ALMA software development cycle includes well defined testing stages that involves developers, testers and scientists. We adapted Behavior Driven Development (BDD) to testing activities applied to Telescope Calibration (TELCAL) software. BDD is an agile technique that encourages communication between roles by defining test cases using natural language to specify features and scenarios, what allows participants to share a common language and provides a high level set of automated tests. This work describes how we implemented and maintain BDD testing for TELCAL, the infrastructure needed to support it and proposals to expand this technique to other subsystems. (c) COPYRIGHT SPIE. Downloading of the abstract is permitted for personal use only."",
    author_keywords = ""Agile; Automation; Behavior driven testing; TELCAL"",
    keywords = ""Automation; Boolean functions; Calibration; High level languages; Software design; Telescopes; Agile; ALMA telescope; Automated test; Calibration softwares; Common languages; Natural languages; Software development cycles; TELCAL; Software testing"",
    correspondence_address = ""J.P. Gil; Atacama Large Milimeter/submilimeter Array, Santiago, Alonso de Cordova 3107, Chile; email: jgil@alma.cl"",
    publisher = ""SPIE"",
    issn = ""0277786X"",
    isbn = ""978-151060205-2"",
    coden = ""PSISD"",
    language = ""English"",
    abbrev_source_title = ""Proc SPIE Int Soc Opt Eng"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: Software and Cyberinfrastructure for Astronomy IV; Conference date: 26 June 2016 through 30 June 2016; Conference code: 125147""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behavior driven testing in ALMA telescope calibration software	https://www.scopus.com/record/display.uri?eid=2-s2.0-85006401169&origin=resultslist&sort=plf-f&src=s&sid=6cdf37c9f4b4dda07885455c7c95690e&sot=b&sdt=b&s=TITLE-ABS-KEY%28behavior+driven+testing+in+alma+telescope+calibration+software%29&sl=77&sessionSearchId=6cdf37c9f4b4dda07885455c7c95690e&relpos=0	SPIE	nan; References; Pages
21	Behave	Behavior-driven requirements traceability via automated acceptance tests	Although information retrieval advances significantly improved automated traceability tools, their accuracy is still far from 100% and therefore they still need human intervention. Furthermore, despite the demonstrated benefits of traceability, many practitioners find the overhead for its creation and maintenance too high. We propose the Behavior Driven Traceability Method (BDT) that takes a different standpoint on automated traceability: we establish ubiquitous traceability between user story requirements and source code by taking advantage of the automated acceptance tests that are created as part of the Behavior Driven Development process. (c) 2017 IEEE.	Automation; Requirements engineering; Behavior-driven development; Development process; Human intervention; Requirements; Requirements traceability; Traceability; Traceability methods; User stories; Acceptance tests	Lucassen, Garm; Dalpiaz, Fabiano; Van Der Werf, Jan Martijn E.M.; Brinkkemper, Sjaak; Zowghi, DIdar	Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017	https://doi.org/10.1109/REW.2017.84		431 - 434	"@CONFERENCE{Lucassen2017431,
    author = ""Lucassen, Garm and Dalpiaz, Fabiano and Van Der Werf, Jan Martijn E.M. and Brinkkemper, Sjaak and Zowghi, DIdar"",
    title = ""Behavior-driven requirements traceability via automated acceptance tests"",
    year = ""2017"",
    journal = ""Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017"",
    pages = ""431 - 434"",
    doi = ""10.1109/REW.2017.84"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034638343\&doi=10.1109\%2fREW.2017.84\&partnerID=40\&md5=55fb151a73b47cc8738f10ec74938431"",
    affiliations = ""Utrecht University, Netherlands; University of Technology Sydney, Australia"",
    abstract = ""Although information retrieval advances significantly improved automated traceability tools, their accuracy is still far from 100\% and therefore they still need human intervention. Furthermore, despite the demonstrated benefits of traceability, many practitioners find the overhead for its creation and maintenance too high. We propose the Behavior Driven Traceability Method (BDT) that takes a different standpoint on automated traceability: we establish ubiquitous traceability between user story requirements and source code by taking advantage of the automated acceptance tests that are created as part of the Behavior Driven Development process. (c) 2017 IEEE."",
    author_keywords = ""Automated acceptance tests; Behavior-driven development; Requirements; Traceability; User stories"",
    keywords = ""Automation; Requirements engineering; Behavior-driven development; Development process; Human intervention; Requirements; Requirements traceability; Traceability; Traceability methods; User stories; Acceptance tests"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-153863488-2"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Requir. Eng. Conf. Workshops, REW"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 22; Conference name: 25th IEEE International Requirements Engineering Conference Workshops, REW 2017; Conference date: 4 September 2017 through 8 September 2017; Conference code: 130995""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behavior-Driven Requirements Traceability via Automated Acceptance Tests	https://www.scopus.com/record/display.uri?eid=2-s2.0-85034638343&origin=resultslist&sort=plf-f&src=s&sid=f0708bb46c08d6a4f91a617708227ae2&sot=b&sdt=b&s=TITLE-ABS-KEY%28behavior+driven+requirements+traceability+via+automated+acceptance+tests%29&sl=87&sessionSearchId=f0708bb46c08d6a4f91a617708227ae2&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
22	Behave	Orchestration of Domain Specific Test Languages with a Behavior Driven Development approach	An airplane is composed by many complexes and embedded systems. During the integration testing phase, the design office produces requirements of the targeted system, and the test center produces concrete test procedures to be executed on a test bench. In this context, integration tests are mostly written in natural language and manually executed step by step by a tester. In order to formalize integration tests procedures dedicated to each system with domain specific languages approved by testers, and in order to automatize integration tests, we have introduced agile practices in the integration testing phase. We have chosen a Behavior Driven Development (BDD) approach to orchestrate Domain Specific Test Languages produced for the ACOVAS FUI project.		R. Bussenot; H. Leblanc; C. Percebois	2018 13th Annual Conference on System of Systems Engineering (SoSE)					Included	Included	new_screen			2						
23	Behave	Android Best Practices	Android Best Practices by Godfrey Nolan shows you how to make your Android apps stand out from the crowd with great reviews. Why settle for just making any Android app? Build a brilliant Android app instead that lets your users praise it for ease of use, better performance, and more. Using a series of example apps which gradually evolve throughout this book, Android Best Practices brings together current Android best practices from user interface (UI)/user experience (UX) design, test-driven development (TDD), and design patterns (e.g., MVC) to help you take your app to the next level. In this book youll learn how to: Use Android design patterns for consistent UI experience on many devices Use agile techniques such as test-driven development, behavior-driven development, and continuous integration Improve the speed and overall performance of your app Organize an Android app using design patterns such as MVC/MVP Create and consume REST and SOAP web servicesDesigning and developing an app that runs well on many if not all the leading Android smartphones and tablets today can be one of the most daunting challenges for Android developers. Well, this book takes much of the mystery out of that for you. After reading and using Android Best Practices, you'll become a much better Android app designer and developer, which in turn can make your apps better placed and more successful in the market place. What youll learn How to use Android design patterns for consistent UI experience on many devicesHow to use Agile techniques such as Test Driven Development, Behavior Driven Development and Continuous Integration How to test Android APKs on many devices and master device fragmentation Secure coding practices on Android How to organize an Android app using design patterns such as MVC/MVP etc. How to create and consume REST and SOAP web services Who this book is for This book is for Android developers looking to solidify their coding and overall app design and development skills.		Nolan, Godfrey; Cinar, Onur; Truxall, David						Excluded	Excluded	new_screen			2						
24	Behave	Smells in software test code: A survey of knowledge in industry and academia	"As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a 'multivocal' literature mapping (classification) on both the scientific literature and also practitioners' grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an ""index"" to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects. (c) 2017 Elsevier Inc."	Automation; Codes (symbols); Design for testability; Mapping; Odors; Surveying; Surveys; Testing; Anti-patterns; Automated testing; Systematic mapping; Test Automation; Test scripts; Software testing	Garousi, Vahid; Kucuk, Baris	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2017.12.013		52 - 81	"@ARTICLE{Garousi201852,
    author = ""Garousi, Vahid and Kucuk, Baris"",
    title = ""Smells in software test code: A survey of knowledge in industry and academia"",
    year = ""2018"",
    journal = ""Journal of Systems and Software"",
    volume = ""138"",
    pages = ""52 - 81"",
    doi = ""10.1016/j.jss.2017.12.013"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85039428979\&doi=10.1016\%2fj.jss.2017.12.013\&partnerID=40\&md5=712a9941e4e4d1c5e9ecff82a16a1075"",
    affiliations = ""Information Technology Group, Wageningen University, Netherlands; Atilim University, Ankara, Turkey"",
    abstract = ""As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a 'multivocal' literature mapping (classification) on both the scientific literature and also practitioners' grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an ""index"" to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects. (c) 2017 Elsevier Inc."",
    author_keywords = ""Automated testing; Multivocal literature mapping; Software testing; Survey; Systematic mapping; Test anti-patterns; Test automation; Test scripts; Test smells"",
    keywords = ""Automation; Codes (symbols); Design for testability; Mapping; Odors; Surveying; Surveys; Testing; Anti-patterns; Automated testing; Systematic mapping; Test Automation; Test scripts; Software testing"",
    correspondence_address = ""V. Garousi; Information Technology Group, Wageningen University, Netherlands; email: vahid.garousi@wur.nl"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 114""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Smells in software test code: A survey of knowledge in industry and academia	https://www.scopus.com/record/display.uri?eid=2-s2.0-85039428979&origin=resultslist&sort=plf-f&src=s&sid=c77ab408f002d809a50cc15390d2fd09&sot=b&sdt=b&s=TITLE-ABS-KEY%28smells+in+software+test+code+a+survey+of+knowledge+in+industry+and+academia%29&sl=90&sessionSearchId=c77ab408f002d809a50cc15390d2fd09&relpos=0	Elsevier Inc.	nan; References
25	Behave	Omni-script: Device independent user interface development for omni-channel fintech applications	As the number of devices and platforms gradually increased that serve as a medium for online banking services, the number of replicated services for different platforms also increase. Each service has a different representation in a different platform even though targeting the same business objectives. This situation results in the problem of re-developing similar set of requirements for different devices and services which in turn results in multiplied effort in software development and degradation in the software quality because of the replicated code. The objective of this paper is to present a device independent user interface development approach that eliminates the replicated user interface development effort of the same set of services for different platforms/devices while increasing the presentation performance. In this context, we provide a basic technique that uses a json based user interface definition format, called omni-script, to separate the representation of banking services in different platforms/devices, so called channels. Omni-script is a pioneering solution being used in a real development environment in banking software domain that is experiencing a shift towards omni-channel user experience, where users are able to seamlessly continue using banking services in different platforms and devices. As the evaluation method, we have measured the actual development effort on a representative sample development team and a set of services. Additionally, we later deployed and measured the rendering time and the amount of data communication for the proposed approach in a real production environment. Production deployment resulted in a remarkable decrease in data communication and in loading times at the client side. As importantly, the proposed approach also resulted in a nearly 75% decrease in service development time by enabling analysts to produce user interface prototypes that can be integrated to service development with minimal effort. (c) 2019	Computer software selection and evaluation; Convolutional codes; Software design; Banking services; Development environment; Multimodal user interface; Production environments; Representative sample; User experience; User interface development; User interface prototypes; User interfaces	Ulusoy, Simge; Batioglu, Alper; Ovatman, Tolga	Computer Standards and Interfaces	https://doi.org/10.1016/j.csi.2019.01.003		106 - 116	"@ARTICLE{Ulusoy2019106,
    author = ""Ulusoy, Simge and Batioglu, Alper and Ovatman, Tolga"",
    title = ""Omni-script: Device independent user interface development for omni-channel fintech applications"",
    year = ""2019"",
    journal = ""Computer Standards and Interfaces"",
    volume = ""64"",
    pages = ""106 - 116"",
    doi = ""10.1016/j.csi.2019.01.003"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060113921\&doi=10.1016\%2fj.csi.2019.01.003\&partnerID=40\&md5=92904aa7c38bb6f231042b5f83ec92b1"",
    affiliations = ""SoftTech Software Technologies Research and Development Inc., Turkey; Istanbul Technical University Department of Computer Engineering, Turkey"",
    abstract = ""As the number of devices and platforms gradually increased that serve as a medium for online banking services, the number of replicated services for different platforms also increase. Each service has a different representation in a different platform even though targeting the same business objectives. This situation results in the problem of re-developing similar set of requirements for different devices and services which in turn results in multiplied effort in software development and degradation in the software quality because of the replicated code. The objective of this paper is to present a device independent user interface development approach that eliminates the replicated user interface development effort of the same set of services for different platforms/devices while increasing the presentation performance. In this context, we provide a basic technique that uses a json based user interface definition format, called omni-script, to separate the representation of banking services in different platforms/devices, so called channels. Omni-script is a pioneering solution being used in a real development environment in banking software domain that is experiencing a shift towards omni-channel user experience, where users are able to seamlessly continue using banking services in different platforms and devices. As the evaluation method, we have measured the actual development effort on a representative sample development team and a set of services. Additionally, we later deployed and measured the rendering time and the amount of data communication for the proposed approach in a real production environment. Production deployment resulted in a remarkable decrease in data communication and in loading times at the client side. As importantly, the proposed approach also resulted in a nearly 75\% decrease in service development time by enabling analysts to produce user interface prototypes that can be integrated to service development with minimal effort. (c) 2019"",
    author_keywords = ""Multimodal user interface definition; Omni-channel banking services; Omni-channel user experience"",
    keywords = ""Computer software selection and evaluation; Convolutional codes; Software design; Banking services; Development environment; Multimodal user interface; Production environments; Representative sample; User experience; User interface development; User interface prototypes; User interfaces"",
    correspondence_address = ""T. Ovatman; Istanbul Technical University Department of Computer Engineering, Turkey; email: ovatman@itu.edu.tr"",
    publisher = ""Elsevier B.V."",
    issn = ""09205489"",
    coden = ""CSTIE"",
    language = ""English"",
    abbrev_source_title = ""Comput Stand Interfaces"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Omni-script: Device independent user interface development for omni-channel fintech applications	https://www.scopus.com/record/display.uri?eid=2-s2.0-85060113921&origin=resultslist&sort=plf-f&src=s&sid=f8e0e9a98fe625d76d4cb177c8cce928&sot=b&sdt=b&s=TITLE-ABS-KEY%28omni+script+device+independent+user+interface+development+for+omni+channel+fintech+applications%29&sl=110&sessionSearchId=f8e0e9a98fe625d76d4cb177c8cce928&relpos=0	Elsevier B.V.	nan; References
26	Behave	Validating enterprise architecture using ontology-based approach: A case study of student internship programme	As the practice of Enterprise Architecture (EA) diversifies, the schematic management of its objects, semantics and relationship continues to be complex. Given that EA provides support for the IT environment by simulating alignment between dynamic business architectures, heterogeneous application systems and incongruent technologies, the need to ensure validation of conceptualized EA models has become also critical. As a relatively new discipline, its disparate and widespread methodologies makes it even more challenging to adopt a generic approach in which models can be verified sequel to the unavailability of unified EA modelling languages able to describe a wide range of Information Technology domains. This paper seeks to present an approach for addressing this challenge through the use of ontologies and queries based on constraints specified in the model's motivation taxonomy. The paper is experimental research-based and grounds its hypothesis on initial model created using the ArchiMate modelling language. By transforming its conceptual metamodel into a model instance, a process which can be achieved irrespective of the modeling language used in the design of the EA, it represents extracted triples as resource description framework schema (RDFS) by mapping the model artefacts directly into classes and slots using a more conventional web ontology language. The generated RDF is then queried using Protocol and RDF Query Language (SPARQL) adopting the Behavior Driven Development (BDD) concept. A case study of the Student Internship Program (SIP) is deployed to translate information from business needs to IT solutions encapsulating a view of abstraction of the EA. The paper also proposes an implementation of the approach using an open source platform that allows construction of domain models and knowledge-based applications with ontologies and is a contribution towards effective validation of EA through taxonomy decomposition, systematic generation of testable EA artifacts, creation of structural triples of model elements and alignment of motivational goals to business behavior specifications.	Ontologies;Business;Resource description framework;Computer architecture;Semantics;Collaboration;Data models;Ontology;Enterprise Architecture;Metamodel;Model;Viewpoints;Resource Description Framework;Schema and Query Language;ArchiMate;Validation	Oussena, Samia; Essien, Joe	2013 3rd International Symposium ISKO-Maghreb	https://doi.org/10.1109/ISKO-Maghreb.2013.6728200	1.Ankolekar, A., Burstein, M., Hobbs, J. R., Lassila, O., Martin, D., McDermott, D.,  Sycara, K. (2002). DAML-S: Web service description for the semantic web. In The Semantic Web-ISWC 2002 (pp. 348-363). Springer Berlin Heidelberg. CrossRef  Google Scholar; 2.Boury-Brisset, A. C. (2003, July). Ontology-based approach for information fusion. In Proceedings of the Sixth International Conference on Information Fusion (pp. 522-529). View Article  Google Scholar; 3.Coleman, P., Papp, R., 2006. Strategic Alignment: Analysis of Perspectives. Proceedings of the 2006 Southern Association for Information Systems Conference. Google Scholar; 4.Fischer, C., Winter, R, Aier, S., 2010. What Is an Enterprise Architecture Principle? Towards a Consolidated Definition, Computer and Information Science 2010, SCI 317, pp. 193-205. springerlink.com Springer-Verlag Berlin Heidelberg. CrossRef  Google Scholar; 5.GARTNER, 2013. Available at http://www.gartner.com. Accessed April, 2013; 6.Glimm, B. (2011). Using SPARQL with RDFS and OWL entailment. In Reasoning Web. Semantic Technologies for the Web of Data (pp. 137-201). Springer Berlin Heidelberg. CrossRef  Google Scholar; 7.Green, N., Bate, C.,  Press, E. T. 2007. Lost in Translation: A Handbook for Information Systems in the 21st Century. Google Scholar; 8.Horrocks, I., Patel-Schneider, P. F., Boley, H., Tabet, S., Grosof, B.,  Dean, M. (2004). SWRL: A semantic web rule language combining OWL and RuleML. W3C Member submission, 21, 79. Google Scholar; 9.Heflin, J., Volz, R., Dale, J., Requirements for a Web Ontology Language, Working draft of the W3C Ontology Working Group, http://www.w3c.org/TR/webont- req. accessed:16/9/2013 Google Scholar; 10.Huang, J., Abadi, D. J.,  Ren, K. (2011). Scalable SPARQL querying of large RDF graphs. Proceedings of the VLDB Endowment, 4(11), 1123-1134. CrossRef  Google Scholar; 11.IEEE Computer Society. IEEE Recommended Practice for Architectural Description of Software Intensive Systems. IEEE Standard 1471-2000. Google Scholar; 12.Lankhorst, M., 2013. Enterprise Architecture at Work: Modelling, Communication and Analysis. Springer, Berlin, Heidelberg, New York. CrossRef  Google Scholar; 13.McGovern, J., 2004. A practical guide to enterprise architecture. Prentice Hall Professional. Google Scholar; 14.McGuinness, D. L. Ontologies Come of Age, In Dieter Fensel, J im Hendler, Henry Lieberman, and Wolfgang Wahlster, editors. Spinning the Semantic Web: Bringing the WWW to Its Full Potential. MIT Press, 2002. Google Scholar; 15.North, D., 2006. Introducing BDD. Available at: http://dannorth.net/ introducing-bdd/. Accessed on: March 2013. Google Scholar; 16.Quilitz, B.,  Leser, U. (2008). Querying distributed RDF data sources with SPARQL. In The Semantic Web: Research and Applications (pp. 524-538). Springer Berlin Heidelberg. CrossRef  Google Scholar; 17.Salmans, B., Kappelman, L. A., 2010. The State of EA: Progress, Not Perfection. The SIM guide to enterprise architecture, 165-187. Google Scholar; 18.Samia O, 2012, University of West London, Available at: http://samsa.uwl.ac.uk/mdse/. Accessed 07/01/2103 Google Scholar; 19.Sessions, R., 2007. A Comparison of the Top Four Enterprise-Architecture Methodologies, ObjectWatch, Inc. Google Scholar; 20.Sintek, M.,  Decker, S. (2002). TRIPLE-A query, inference, and transformation language for the semantic web. In The Semantic Web-ISWC 2002 (pp. 364-378). Springer Berlin Heidelberg. Google Scholar; 21.TOGAF, The Open Group. ArchiMate Version 2. http://www.opengroup.org/ archimate, Oct, 2012. Google Scholar; 22.Stanford Univeristy, 2013, Protege Version 3.5, http://protege.stanford.edu/accessed 16/09/2013 Google Scholar; 23.TURTLE, http://www.w3.org/TeamSubmission/turtle/ec-tutorial, accessed 17/09/2013. Google Scholar; 24.Venkatraman, N., Henderson, J., 2010. Strategic Alignment: Leveraging IT for Transforming Organisations, IBM Systems Journal, Vol 32 No 1. Google Scholar; 25.Wache, H., Voegele, T., Visser, U., Stuckenschmidt, H., Schuster, G., Neumann, H.,  Hubner, S. (2001). Ontology-based integration of information-a survey of existing approaaches. In IJCAI-01 workshop: ontologies and information sharing (Vol. 2001, pp. 108-117). Google Scholar; 26.Weston, J., Defee, J., 2004. Performance Based Enterprise Architecture Planning - A white Paper, 2004, http://www.caci.com/. Google Scholar	1-7	"@INPROCEEDINGS{6728200,
    author = ""Oussena, Samia and Essien, Joe"",
    booktitle = ""2013 3rd International Symposium ISKO-Maghreb"",
    title = ""Validating enterprise architecture using ontology-based approach: A case study of student internship programme"",
    year = ""2013"",
    volume = """",
    number = """",
    pages = ""1-7"",
    abstract = ""As the practice of Enterprise Architecture (EA) diversifies, the schematic management of its objects, semantics and relationship continues to be complex. Given that EA provides support for the IT environment by simulating alignment between dynamic business architectures, heterogeneous application systems and incongruent technologies, the need to ensure validation of conceptualized EA models has become also critical. As a relatively new discipline, its disparate and widespread methodologies makes it even more challenging to adopt a generic approach in which models can be verified sequel to the unavailability of unified EA modelling languages able to describe a wide range of Information Technology domains. This paper seeks to present an approach for addressing this challenge through the use of ontologies and queries based on constraints specified in the model's motivation taxonomy. The paper is experimental research-based and grounds its hypothesis on initial model created using the ArchiMate modelling language. By transforming its conceptual metamodel into a model instance, a process which can be achieved irrespective of the modeling language used in the design of the EA, it represents extracted triples as resource description framework schema (RDFS) by mapping the model artefacts directly into classes and slots using a more conventional web ontology language. The generated RDF is then queried using Protocol and RDF Query Language (SPARQL) adopting the Behavior Driven Development (BDD) concept. A case study of the Student Internship Program (SIP) is deployed to translate information from business needs to IT solutions encapsulating a view of abstraction of the EA. The paper also proposes an implementation of the approach using an open source platform that allows construction of domain models and knowledge-based applications with ontologies and is a contribution towards effective validation of EA through taxonomy decomposition, systematic generation of testable EA artifacts, creation of structural triples of model elements and alignment of motivational goals to business behavior specifications."",
    keywords = ""Ontologies;Business;Resource description framework;Computer architecture;Semantics;Collaboration;Data models;Ontology;Enterprise Architecture;Metamodel;Model;Viewpoints;Resource Description Framework;Schema and Query Language;ArchiMate;Validation"",
    doi = ""10.1109/ISKO-Maghreb.2013.6728200"",
    ISSN = """",
    month = ""Nov""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Validating enterprise architecture using ontology-based approach: A case study of student internship programme	https://ieeexplore.ieee.org/document/6728200	IEEE	
27	Behave	Did You Remember To Test Your Tokens?	"Authentication is a critical security feature for confirming the identity of a system's users, typically implemented with help from frameworks like Spring Security. It is a complex feature which should be robustly tested at all stages of development. Unit testing is an effective technique for fine-grained verification of feature behaviors that is not widely-used to test authentication. Part of the problem is that resources to help developers unit test security features are limited. Most security testing guides recommend test cases in a ""black box"" or penetration testing perspective. These resources are not easily applicable to developers writing new unit tests, or who want a security-focused perspective on coverage.In this paper, we address these issues by applying a grounded theory-based approach to identify common (unit) test cases for token authentication through analysis of 481 JUnit tests exercising Spring Security-based authentication implementations from 53 open source Java projects. The outcome of this study is a developer-friendly unit testing guide organized as a catalog of 53 test cases for token authentication, representing unique combinations of 17 scenarios, 40 conditions, and 30 expected outcomes learned from the data set in our analysis. We supplement the test guide with common test smells to avoid. To verify the accuracy and usefulness of our testing guide, we sought feedback from selected developers, some of whom authored unit tests in our dataset."	Unit Test;  Security Test;  Repository Mining;  Java;  Authentication	Gonzalez, Danielle; Rath, Michael; Mirakhorli, Mehdi	MSR '20: Proceedings of the 17th International Conference on Mining Software Repositories	https://doi.org/10.1145/3379597.3387471		232-242	"@inproceedings{10.1145/3379597.3387471,
    author = ""Gonzalez, Danielle and Rath, Michael and Mirakhorli, Mehdi"",
    title = ""Did You Remember To Test Your Tokens?"",
    year = ""2020"",
    isbn = ""9781450375177"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3379597.3387471"",
    doi = ""10.1145/3379597.3387471"",
    abstract = {Authentication is a critical security feature for confirming the identity of a system's users, typically implemented with help from frameworks like Spring Security. It is a complex feature which should be robustly tested at all stages of development. Unit testing is an effective technique for fine-grained verification of feature behaviors that is not widely-used to test authentication. Part of the problem is that resources to help developers unit test security features are limited. Most security testing guides recommend test cases in a ""black box"" or penetration testing perspective. These resources are not easily applicable to developers writing new unit tests, or who want a security-focused perspective on coverage.In this paper, we address these issues by applying a grounded theory-based approach to identify common (unit) test cases for token authentication through analysis of 481 JUnit tests exercising Spring Security-based authentication implementations from 53 open source Java projects. The outcome of this study is a developer-friendly unit testing guide organized as a catalog of 53 test cases for token authentication, representing unique combinations of 17 scenarios, 40 conditions, and 30 expected outcomes learned from the data set in our analysis. We supplement the test guide with common test smells to avoid. To verify the accuracy and usefulness of our testing guide, we sought feedback from selected developers, some of whom authored unit tests in our dataset.},
    booktitle = ""Proceedings of the 17th International Conference on Mining Software Repositories"",
    pages = ""232-242"",
    numpages = ""11"",
    keywords = ""Unit Test, Security Test, Repository Mining, Java, Authentication"",
    location = ""Seoul, Republic of Korea"",
    series = ""MSR '20""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Did You Remember To Test Your Tokens?	https://dl.acm.org/doi/10.1145/3379597.3387471	Association for Computing Machinery	nan; References
28	Behave	XUnit Test Patterns: Refactoring Test Code	"Automated testing is a cornerstone of agile development. An effective testing strategy will deliver new functionality more aggressively, accelerate user feedback, and improve quality. However, for many developers, creating effective automated tests is a unique and unfamiliar challenge.xUnit Test Patterns is the definitive guide to writing automated tests using xUnit, the most popular unit testing framework in use today. Agile coach and test automation expert Gerard Meszaros describes 68 proven patterns for making tests easier to write, understand, and maintain. He then shows you how to make them more robust and repeatable–and far more cost-effective.Loaded with information, this book feels like three books in one. The first part is a detailed tutorial on test automation that covers everything from test strategy to in-depth test coding. The second part, a catalog of 18 frequently encountered ""test smells,"" provides trouble-shooting guidelines to help you determine the root cause of problems and the most applicable patterns. The third part contains detailed descriptions of each pattern, including refactoring instructions illustrated by extensive code samples in multiple programming languages.Topics covered include Writing better tests–and writing them faster The four phases of automated tests: fixture setup, exercising the system under test, result verification, and fixture teardown Improving test coverage by isolating software from its environment using Test Stubs and Mock Objects Designing software for greater testability Using test ""smells"" (including code smells, behavior smells, and project smells) to spot problems and know when and how to eliminate them Refactoring tests for greater simplicity, robustness, and execution speedThis book will benefit developers, managers, and testers working with any agile or conventional development process, whether doing test-driven development or writing the tests last. While the patterns and smells are especially applicable to all members of the xUnit family, they also apply to next-generation behavior-driven development frameworks such as RSpec and JBehave and to other kinds of test automation tools, including recorded test tools and data-driven test tools such as Fit and FitNesse.Visual Summary of the Pattern Languageï Foreword Preface Acknowledgments Introduction Refactoring a TestPART I: The Narratives Chapter 1 A Brief Tour Chapter 2 Test Smells Chapter 3 Goals of Test Automation Chapter 4 Philosophy of Test Automation Chapter 5 Principles of Test Automation Chapter 6 Test Automation Strategy Chapter 7 xUnit Basics Chapter 8 Transient Fixture Management Chapter 9 Persistent Fixture Management Chapter 10 Result Verification Chapter 11 Using Test Doubles Chapter 12 Organizing Our Tests Chapter 13 Testing with Databases Chapter 14 A Roadmap to Effective Test Automation PART II: The Test Smellsï Chapter 15 Code Smells Chapter 16 Behavior Smells Chapter 17 Project Smells PART III: The Patternsï Chapter 18 Test Strategy Patterns Chapter 19 xUnit Basics Patterns Chapter 20 Fixture Setup Patterns Chapter 21 Result Verification Patterns Chapter 22 Fixture Teardown Patterns Chapter 23 Test Double Patterns Chapter 24 Test Organization Patterns Chapter 25 Database Patterns Chapter 26 Design-for-Testability Patterns Chapter 27 Value Patterns PART IV: Appendixes Appendix A Test Refactorings ï Appendix B xUnit Terminologyï Appendix C xUnit Family Members Appendix D Tools Appendix E Goals and Principles Appendix F Smells, Aliases, and Causes Appendix G Patterns, Aliases, and Variations Glossary Referencesï Indexï"		Meszaros, Gerard						Excluded	Excluded	new_screen			2						
29	Behave	Visualizing data, encouraging change: Technical interventions in food purchasing	Baked Potato is a mobile web service geared at addressing the imbalance of power between those who market and those who consume food products. Food marketers rarely provide a detailed range of information about products that would allow consumers to understand how a product and its company connect to their cultural values. The main goal of this application is to connect people in a way that celebrates their differences and gives them agency by helping them make better decisions about their food purchases.	Data structures;Boolean functions;Human computer interaction;Labeling;Prototypes;Food products;Information technology;Behavior Driven Development;decision making;human-computer interaction;incentive design;social gaming	Sackey, Donnie Johnson; Ullmann, Noah	2012 IEEE International Professional Communication Conference	https://doi.org/10.1109/IPCC.2012.6408654	"1.G. Cowburn, ""Consumer understanding and use of nutrition labeling: A systematic review,."" Public Health Nutrition, vol. 8, no. 1, pp. 21-28 , 2005. CrossRef  Google Scholar; 2.E. Golan et al., ""Economics of food labeling,."" J. of Consumer Policy, vol. 24, no. 2, pp. 117-184, 2001. CrossRef  Google Scholar; 3.J. McGonigal, Gaming can make a better world. Available: http://www.ted.com/talks/jane-mcgonigal-gaming-can-make-a-better-world.html. Google Scholar; 4.R. Layard and S. Glaister, Cost-Benefit Analysis. New York, NY: Cambridge University Press, 1994. CrossRef  Google Scholar; 5.S. Bodker, Through the Interface-A Human Activity Approach to User Interface Design. Mahwah, NJ: Lawrence Erlbaum Associates, 1991. Google Scholar; 6.S. Rich and S. Jain, ""Social class and life cycle as predictors of shopping behavior,"" J. of Marketing Research, vol. 5, no. 1, pp. 41-49, 1968. CrossRef  Google Scholar; 7.D. Norman, ""Human-centered design considered harmful,"" Interactions, vol. 24, no. 4, pp. 14-19, 2005. CrossRef  Google Scholar; 8.J. Porter, Designing for the Social Web. Berkeley, CA: New Riders Press, 2008. Google Scholar"	1-5	"@INPROCEEDINGS{6408654,
    author = ""Sackey, Donnie Johnson and Ullmann, Noah"",
    booktitle = ""2012 IEEE International Professional Communication Conference"",
    title = ""Visualizing data, encouraging change: Technical interventions in food purchasing"",
    year = ""2012"",
    volume = """",
    number = """",
    pages = ""1-5"",
    abstract = ""Baked Potato is a mobile web service geared at addressing the imbalance of power between those who market and those who consume food products. Food marketers rarely provide a detailed range of information about products that would allow consumers to understand how a product and its company connect to their cultural values. The main goal of this application is to connect people in a way that celebrates their differences and gives them agency by helping them make better decisions about their food purchases."",
    keywords = ""Data structures;Boolean functions;Human computer interaction;Labeling;Prototypes;Food products;Information technology;Behavior Driven Development;decision making;human-computer interaction;incentive design;social gaming"",
    doi = ""10.1109/IPCC.2012.6408654"",
    ISSN = ""2158-1002"",
    month = ""Oct""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Visualizing data, encouraging change: Technical interventions in food purchasing	https://ieeexplore.ieee.org/document/6408654	IEEE	
30	Behave	Visualizing data, encouraging change: Technical interventions in food purchasing	Baked Potato is a mobile web service geared at addressing the imbalance of power between those who market and those who consume food products. Food marketers rarely provide a detailed range of information about products that would allow consumers to understand how a product and its company connect to their cultural values. The main goal of this application is to connect people in a way that celebrates their differences and gives them agency by helping them make better decisions about their food purchases.	Data structures;Boolean functions;Human computer interaction;Labeling;Prototypes;Food products;Information technology;Behavior Driven Development;decision making;human-computer interaction;incentive design;social gaming	Sackey, Donnie Johnson; Ullmann, Noah	2012 IEEE International Professional Communication Conference	https://doi.org/10.1109/IPCC.2012.6408654	"1.G. Cowburn, ""Consumer understanding and use of nutrition labeling: A systematic review,."" Public Health Nutrition, vol. 8, no. 1, pp. 21-28 , 2005. CrossRef  Google Scholar; 2.E. Golan et al., ""Economics of food labeling,."" J. of Consumer Policy, vol. 24, no. 2, pp. 117-184, 2001. CrossRef  Google Scholar; 3.J. McGonigal, Gaming can make a better world. Available: http://www.ted.com/talks/jane-mcgonigal-gaming-can-make-a-better-world.html. Google Scholar; 4.R. Layard and S. Glaister, Cost-Benefit Analysis. New York, NY: Cambridge University Press, 1994. CrossRef  Google Scholar; 5.S. Bodker, Through the Interface-A Human Activity Approach to User Interface Design. Mahwah, NJ: Lawrence Erlbaum Associates, 1991. Google Scholar; 6.S. Rich and S. Jain, ""Social class and life cycle as predictors of shopping behavior,"" J. of Marketing Research, vol. 5, no. 1, pp. 41-49, 1968. CrossRef  Google Scholar; 7.D. Norman, ""Human-centered design considered harmful,"" Interactions, vol. 24, no. 4, pp. 14-19, 2005. CrossRef  Google Scholar; 8.J. Porter, Designing for the Social Web. Berkeley, CA: New Riders Press, 2008. Google Scholar"	1-5	"@INPROCEEDINGS{6408654,
    author = ""Sackey, Donnie Johnson and Ullmann, Noah"",
    booktitle = ""2012 IEEE International Professional Communication Conference"",
    title = ""Visualizing data, encouraging change: Technical interventions in food purchasing"",
    year = ""2012"",
    volume = """",
    number = """",
    pages = ""1-5"",
    abstract = ""Baked Potato is a mobile web service geared at addressing the imbalance of power between those who market and those who consume food products. Food marketers rarely provide a detailed range of information about products that would allow consumers to understand how a product and its company connect to their cultural values. The main goal of this application is to connect people in a way that celebrates their differences and gives them agency by helping them make better decisions about their food purchases."",
    keywords = ""Data structures;Boolean functions;Human computer interaction;Labeling;Prototypes;Food products;Information technology;Behavior Driven Development;decision making;human-computer interaction;incentive design;social gaming"",
    doi = ""10.1109/IPCC.2012.6408654"",
    ISSN = ""2158-1002"",
    month = ""Oct""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Visualizing data, encouraging change: Technical interventions in food purchasing	https://ieeexplore.ieee.org/document/6408654	IEEE	
31	Behave	Behavior driven development for airborne software engineering	Behavior Driven Development (BDD) is a test driven development approach which aims at bridging the gap between the end-user and the software development. It promotes a semi-formal ubiquitous language for executable behavior specification and automated acceptance testing. The BDD infrastructure Cucumber and the language Gherkin have been established in many application domains. This paper discusses their utilization for airborne software engineering with an example application, Class C Terrain Awareness and Warning System, being developed using Rust language with Rust BDD infrastructure. (c) 2021, American Institute of Aeronautics and Astronautics Inc, AIAA. All rights reserved.	Acceptance tests; Application programs; Boolean functions; C (programming language); Software testing; Airborne software; Applications domains; Automated acceptance testing; Behavior specifications; Development approach; Development infrastructure; End-users; Executables; Terrain Awareness and Warning System; Test driven development; Software design	Zaeske, Wanja; Beck, Janick; Torrens, Christoph; Durak, Umut	AIAA Scitech 2021 Forum	https://www.scopus.com/record/display.uri?eid=2-s2.0-85099811159&origin=resultslist&sort=plf-f&src=s&sid=916dc0070b1239390a0926ef6d01455f&sot=b&sdt=b&s=TITLE-ABS-KEY%28behavior+driven+development+for+airborne+software+engineering%29&sl=76&sessionSearchId=916dc0070b1239390a0926ef6d01455f&relpos=0		1 - 10	"@CONFERENCE{Zaeske20211,
    author = ""Zaeske, Wanja and Beck, Janick and Torrens, Christoph and Durak, Umut"",
    title = ""Behavior driven development for airborne software engineering"",
    year = ""2021"",
    journal = ""AIAA Scitech 2021 Forum"",
    pages = ""1 - 10"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099811159\&partnerID=40\&md5=903e28f166fa5c9cb35d1106f40f039c"",
    affiliations = ""Clausthal University of Technology, Institute of Informatics, Clausthal-Zellerfeld, 38678, Germany; German Aerospace Center (DLR), Institute of Flight Systems, Braunschweig, 38108, Germany"",
    abstract = ""Behavior Driven Development (BDD) is a test driven development approach which aims at bridging the gap between the end-user and the software development. It promotes a semi-formal ubiquitous language for executable behavior specification and automated acceptance testing. The BDD infrastructure Cucumber and the language Gherkin have been established in many application domains. This paper discusses their utilization for airborne software engineering with an example application, Class C Terrain Awareness and Warning System, being developed using Rust language with Rust BDD infrastructure. (c) 2021, American Institute of Aeronautics and Astronautics Inc, AIAA. All rights reserved."",
    keywords = ""Acceptance tests; Application programs; Boolean functions; C (programming language); Software testing; Airborne software; Applications domains; Automated acceptance testing; Behavior specifications; Development approach; Development infrastructure; End-users; Executables; Terrain Awareness and Warning System; Test driven development; Software design"",
    publisher = ""American Institute of Aeronautics and Astronautics Inc, AIAA"",
    isbn = ""978-162410609-5"",
    language = ""English"",
    abbrev_source_title = ""AIAA Scitech Forum"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: AIAA Science and Technology Forum and Exposition, AIAA SciTech Forum 2021; Conference date: 11 January 2021 through 15 January 2021; Conference code: 253579""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behavior driven development for airborne software engineering	https://www.scopus.com/record/display.uri?eid=2-s2.0-85099811159&origin=resultslist&sort=plf-f&src=s&sid=916dc0070b1239390a0926ef6d01455f&sot=b&sdt=b&s=TITLE-ABS-KEY%28behavior+driven+development+for+airborne+software+engineering%29&sl=76&sessionSearchId=916dc0070b1239390a0926ef6d01455f&relpos=0	American Institute of Aeronautics and Astronautics Inc, AIAA	nan; References
32	Behave	Predicting co-changes between functionality specifications and source code in behavior driven development	Behavior Driven Development (BDD) is an agile approach that uses .feature files to describe the functionalities of a software system using natural language constructs (English-like phrases). Because of the English-like structure of .feature files, BDD specifications become an evolving documentation that helps all (even non-technical) stakeholders to understand and contribute to a software project. After specifying a .feature files, developers can use a BDD tool (e.g., Cucumber) to automatically generate test cases and implement the code of the specified functionality. However, maintaining traceability between .feature files and source code requires human efforts. Therefore, .feature files can be out-of-date, reducing the advantages of using BDD. Furthermore, existing research do not attempt to improve the traceability between .feature files and source code files. In this paper, we study the co-changes between .feature files and source code files to improve the traceability between .feature files and source code files. Due to the English-like syntax of .feature files, we use natural language processing to identify co-changes, with an accuracy of 79\%. We study the characteristics of BDD co-changes and build random forest models to predict when a .feature files should be modified before committing a code change. The random forest model obtains an AUC of 0.77. The model can assist developers in identifying when a .feature files should be modified in code commits. Once the traceability is up-to-date, BDD developers can write test code more efficiently and keep the software documentation up-to-date.	traceability;  empirical software engineering;  co-changes;  behavior driven development	Yang, Aidan Z. H.; da Costa, Daniel Alencar; Zou, Ying	MSR '19: Proceedings of the 16th International Conference on Mining Software Repositories	https://doi.org/10.1109/MSR.2019.00080		534-544	"@inproceedings{10.1109/MSR.2019.00080,
    author = ""Yang, Aidan Z. H. and da Costa, Daniel Alencar and Zou, Ying"",
    title = ""Predicting co-changes between functionality specifications and source code in behavior driven development"",
    year = ""2019"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/MSR.2019.00080"",
    doi = ""10.1109/MSR.2019.00080"",
    abstract = ""Behavior Driven Development (BDD) is an agile approach that uses .feature files to describe the functionalities of a software system using natural language constructs (English-like phrases). Because of the English-like structure of .feature files, BDD specifications become an evolving documentation that helps all (even non-technical) stakeholders to understand and contribute to a software project. After specifying a .feature files, developers can use a BDD tool (e.g., Cucumber) to automatically generate test cases and implement the code of the specified functionality. However, maintaining traceability between .feature files and source code requires human efforts. Therefore, .feature files can be out-of-date, reducing the advantages of using BDD. Furthermore, existing research do not attempt to improve the traceability between .feature files and source code files. In this paper, we study the co-changes between .feature files and source code files to improve the traceability between .feature files and source code files. Due to the English-like syntax of .feature files, we use natural language processing to identify co-changes, with an accuracy of 79\\%. We study the characteristics of BDD co-changes and build random forest models to predict when a .feature files should be modified before committing a code change. The random forest model obtains an AUC of 0.77. The model can assist developers in identifying when a .feature files should be modified in code commits. Once the traceability is up-to-date, BDD developers can write test code more efficiently and keep the software documentation up-to-date."",
    booktitle = ""Proceedings of the 16th International Conference on Mining Software Repositories"",
    pages = ""534-544"",
    numpages = ""11"",
    keywords = ""traceability, empirical software engineering, co-changes, behavior driven development"",
    location = ""Montreal, Quebec, Canada"",
    series = ""MSR '19""
}"	Included	Included	new_screen			2	ScopusSignedIn		Predicting Co-Changes between Functionality Specifications and Source Code in Behavior Driven Development	https://dl.acm.org/doi/10.1109/MSR.2019.00080	IEEE Press	nan; References
33	Behave	Theoretical verification of test cases for behavior driven development	Behavior Driven Development insists on generation of early test cases during requirements elicitation. These would form the basis for pseudo use cases in TDD. These early test cases for BDD, aka theoretical test cases, are developed using Named Entity Recognition approaches over expanded use cases. This paper proposes the algorithm for theoretical verification of obtaining the original reduced use case sequences from the obtained BDD test cases. (c) 2017 IEEE.	Boolean functions; Computation theory; Computational methods; Dependency graphs; Named entity recognition; Reduced UC Sequence; Requirements elicitation; Test case; Testing	Mahalakshmi, G.S.; Vani, V.	Proceedings - 2017 2nd International Conference on Recent Trends and Challenges in Computational Models, ICRTCCM 2017	https://doi.org/10.1109/ICRTCCM.2017.83		309 - 314	"@CONFERENCE{Mahalakshmi2017309,
    author = ""Mahalakshmi, G.S. and Vani, V."",
    editor = ""L.J., Deborah and P., Vijayakumar"",
    title = ""Theoretical verification of test cases for behavior driven development"",
    year = ""2017"",
    journal = ""Proceedings - 2017 2nd International Conference on Recent Trends and Challenges in Computational Models, ICRTCCM 2017"",
    pages = ""309 - 314"",
    doi = ""10.1109/ICRTCCM.2017.83"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034644893\&doi=10.1109\%2fICRTCCM.2017.83\&partnerID=40\&md5=a39e4c607bde6ce6c276ebf24fe6b3ba"",
    affiliations = ""Department of Computer Science and Engineering, Anna University, Chennai, India; Department of Information Technology, Eswari Engineering College, Anna University, Chennai Tamilnadu, India"",
    abstract = ""Behavior Driven Development insists on generation of early test cases during requirements elicitation. These would form the basis for pseudo use cases in TDD. These early test cases for BDD, aka theoretical test cases, are developed using Named Entity Recognition approaches over expanded use cases. This paper proposes the algorithm for theoretical verification of obtaining the original reduced use case sequences from the obtained BDD test cases. (c) 2017 IEEE."",
    author_keywords = ""Reduced UC Sequence; Test cases; Usecase Dependency Graph"",
    keywords = ""Boolean functions; Computation theory; Computational methods; Dependency graphs; Named entity recognition; Reduced UC Sequence; Requirements elicitation; Test case; Testing"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-150904799-4"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Int. Conf. Recent Trends Chall. Comput. Model., ICRTCCM"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 2; Conference name: 2nd International Conference on Recent Trends and Challenges in Computational Models, ICRTCCM 2017; Conference date: 3 February 2017 through 4 February 2017; Conference code: 131021""
}"	Included	Included	new_screen			2	ScopusSignedIn		Theoretical Verification of Test Cases for Behavior Driven Development	https://www.scopus.com/record/display.uri?eid=2-s2.0-85034644893&origin=resultslist&sort=plf-f&src=s&sid=ea5b234fb0a2b77df0b58c15d6b27f3d&sot=b&sdt=b&s=TITLE-ABS-KEY%28theoretical+verification+of+test+cases+for+behavior+driven+development%29&sl=85&sessionSearchId=ea5b234fb0a2b77df0b58c15d6b27f3d&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
34	Behave	A model-driven approach for behavior-driven GUI testing	Behavior-driven development (BDD) brings requirement specifications and their test cases closer together by using a ubiquitous language to describe requirements that are automatically mapped to test methods. Although industry-proven tools support this automated requirement mapping, the test methods need to be implemented manually. The approach presented in this paper transforms BDD-like requirement specifications and low fidelity graphical user interface (GUI) descriptions in the format of wireframes into automatically executable graphical user interface test cases. The requirement descriptions are defined in a domain-specific language (DSL) that obeys the rules of the ubiquitous language enhanced by references to screens and widgets in a graphical user interface model. The paper reports on a controlled AB/BA crossover experiment comparing the efficiency of our approach to the industry-proven JBehave tooling. The results show that the introduced approach on average takes 63\% less time to specify automated tests and thereby diminishes the problem of graphical user interface test cases being expensive to write. The experimental results were supported by experience made applying the approach in three differently sized components at a large Swiss bank.	model-driven engineering;  domain-specific language;  behavior-driven development;  GUI test case generation	"B\""{u}nder, Hendrik; Kuchen, Herbert"	SAC '19: Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing	https://doi.org/10.1145/3297280.3297450		1742-1751	"@inproceedings{10.1145/3297280.3297450,
    author = {B\""{u}nder, Hendrik and Kuchen, Herbert},
    title = ""A model-driven approach for behavior-driven GUI testing"",
    year = ""2019"",
    isbn = ""9781450359337"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3297280.3297450"",
    doi = ""10.1145/3297280.3297450"",
    abstract = ""Behavior-driven development (BDD) brings requirement specifications and their test cases closer together by using a ubiquitous language to describe requirements that are automatically mapped to test methods. Although industry-proven tools support this automated requirement mapping, the test methods need to be implemented manually. The approach presented in this paper transforms BDD-like requirement specifications and low fidelity graphical user interface (GUI) descriptions in the format of wireframes into automatically executable graphical user interface test cases. The requirement descriptions are defined in a domain-specific language (DSL) that obeys the rules of the ubiquitous language enhanced by references to screens and widgets in a graphical user interface model. The paper reports on a controlled AB/BA crossover experiment comparing the efficiency of our approach to the industry-proven JBehave tooling. The results show that the introduced approach on average takes 63\\% less time to specify automated tests and thereby diminishes the problem of graphical user interface test cases being expensive to write. The experimental results were supported by experience made applying the approach in three differently sized components at a large Swiss bank."",
    booktitle = ""Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing"",
    pages = ""1742-1751"",
    numpages = ""10"",
    keywords = ""model-driven engineering, domain-specific language, behavior-driven development, GUI test case generation"",
    location = ""Limassol, Cyprus"",
    series = ""SAC '19""
}"	Included	Included	new_screen			2	ScopusSignedIn		A Model-Driven Approach for Behavior-Driven GUI Testing	https://dl.acm.org/doi/10.1145/3297280.3297450	Association for Computing Machinery	nan; References
35	Behave	Evaluating the usage of predefined interactive behaviors for writing user stories: an empirical study with potential product owners	Behavior-driven development (BDD) has gained popularity in agile software development as a means of specifying user requirements through user stories and scenarios for interactive systems under construction. Templates for guiding the writing of such stories are widely employed and can be helpful to ensure that consistent information about the requirements is provided. With the aim of getting preliminary results about how product owners (POs) write their own user stories under a predefined template, we conducted a case study with potential POs at the department in charge of business trips in a French research institute. The participants were invited to write their own user stories to describe a feature they are used to perform. The resultant stories have been analyzed to check their adherence to a template including common interactive behaviors defined by an ontology for interactive systems. Although the participants have followed different specification strategies, we observed an overall high level of adherence to the proposed template (62.26%). The results also pointed out to a wide use of domain-dependent behaviors, with the interactive behaviors defined by the ontology being, to some extent, reproduced by the participants even without prior training in the adopted vocabulary. © 2019, Springer-Verlag London Ltd., part of Springer Nature.		Rocha Silva T., Winckler M., Bach C.	Cognition, Technology and Work					Included	Included	new_screen			2						
36	Behave	On the empirical evaluation of BDD scenarios quality: Preliminary findings of an empirical study	"Behavior-Driven Development (BDD) is a set of software engineering practices which uses a ubiquitous language, one that business and technical people can understand, to describe and model a system by a series of textual scenarios. However, we believe that the value of those textual scenarios is connected with how well they convey and document the details discussed by the team about the behaviors needed to fulfill customer needs. Thus, there is the need to define what would be a ""good"" BDD scenario and how to evaluate scenarios. On this research design paper, we describe a study designed to understand how known quality attributes from other types of requirements specifications (like use cases or user stories) can be used with BDD scenarios. We also report our preliminary findings after performing it with novice evaluators. Those findings indicate that some of those attributes can be used to support BDD scenarios assessments. (c) 2017 IEEE."	Boolean functions; Requirements engineering; Software engineering; Behavior-driven development; Empirical evaluations; Empirical studies; Quality attributes; Requirements specifications; Research designs; Scenarios assessment; Software engineering practices; Quality control	Oliveira, Gabriel; Marczak, Sabrina	Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017	https://doi.org/10.1109/REW.2017.62		299 - 302	"@CONFERENCE{Oliveira2017299,
    author = ""Oliveira, Gabriel and Marczak, Sabrina"",
    title = ""On the empirical evaluation of BDD scenarios quality: Preliminary findings of an empirical study"",
    year = ""2017"",
    journal = ""Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017"",
    pages = ""299 - 302"",
    doi = ""10.1109/REW.2017.62"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034661005\&doi=10.1109\%2fREW.2017.62\&partnerID=40\&md5=e05cad68558aa8c1c7e41c54a4e9123e"",
    affiliations = ""Computer Science School, PUCRS, Porto Alegre, Brazil"",
    abstract = {Behavior-Driven Development (BDD) is a set of software engineering practices which uses a ubiquitous language, one that business and technical people can understand, to describe and model a system by a series of textual scenarios. However, we believe that the value of those textual scenarios is connected with how well they convey and document the details discussed by the team about the behaviors needed to fulfill customer needs. Thus, there is the need to define what would be a ""good"" BDD scenario and how to evaluate scenarios. On this research design paper, we describe a study designed to understand how known quality attributes from other types of requirements specifications (like use cases or user stories) can be used with BDD scenarios. We also report our preliminary findings after performing it with novice evaluators. Those findings indicate that some of those attributes can be used to support BDD scenarios assessments. (c) 2017 IEEE.},
    author_keywords = ""Behavior-driven development; Documentation evaluation; Documentation quality; Empirical study"",
    keywords = ""Boolean functions; Requirements engineering; Software engineering; Behavior-driven development; Empirical evaluations; Empirical studies; Quality attributes; Requirements specifications; Research designs; Scenarios assessment; Software engineering practices; Quality control"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-153863488-2"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Requir. Eng. Conf. Workshops, REW"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8; Conference name: 25th IEEE International Requirements Engineering Conference Workshops, REW 2017; Conference date: 4 September 2017 through 8 September 2017; Conference code: 130995""
}"	Included	Included	new_screen			2	ScopusSignedIn		On the Empirical Evaluation of BDD Scenarios Quality: Preliminary Findings of an Empirical Study	https://www.scopus.com/record/display.uri?eid=2-s2.0-85034661005&origin=resultslist&sort=plf-f&src=s&sid=dfd52977a55f8a538e6a8d16f81616d4&sot=b&sdt=b&s=TITLE-ABS-KEY%28on+the+empirical+evaluation+of+bdd+scenarios+quality+preliminary+findings+of+an+empirical+study%29&sl=110&sessionSearchId=dfd52977a55f8a538e6a8d16f81616d4&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
37	Behave	On the applicability of BDD in a Business Intelligence project: experience report	Behavior-driven development (BDD) is a software development technique that in order to succeed relies heavily on the definition of clear acceptance criteria by software developers in the form of behavioral scenarios, later translated into acceptance tests. The adoption of BDD in Business Intelligence (BI) projects requires developers to have a broad acquaintance to business that often even customers themselves do not possess. This article presents an experience report on the use of BDD in the development of a large public health related BI project. Experience suggests that the use of BDD may not be appropriate for BI projects, especially during the early stages of development, when there is still insufficient clarity about business acceptance criteria. The need for broad maturity towards business understanding makes it complex to adopt the behavioral approach within the development process in projects of this nature.	Software quality;  behavior-driven development;  business intelligence.	Mello, Patr\'{\i}cia; Ximenes, Pablo; Lemos, Rousiany; Bessa, Ana Lu\'{\i}za; Cort\'{e}s, Mariela I.; Rocha, Cleilton Lima	SBQS '18: Proceedings of the XVII Brazilian Symposium on Software Quality	https://doi.org/10.1145/3275245.3275276		296-304	"@inproceedings{10.1145/3275245.3275276,
    author = ""Mello, Patr\'{\i}cia and Ximenes, Pablo and Lemos, Rousiany and Bessa, Ana Lu\'{\i}za and Cort\'{e}s, Mariela I. and Rocha, Cleilton Lima"",
    title = ""On the applicability of BDD in a Business Intelligence project: experience report"",
    year = ""2018"",
    isbn = ""9781450365659"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3275245.3275276"",
    doi = ""10.1145/3275245.3275276"",
    abstract = ""Behavior-driven development (BDD) is a software development technique that in order to succeed relies heavily on the definition of clear acceptance criteria by software developers in the form of behavioral scenarios, later translated into acceptance tests. The adoption of BDD in Business Intelligence (BI) projects requires developers to have a broad acquaintance to business that often even customers themselves do not possess. This article presents an experience report on the use of BDD in the development of a large public health related BI project. Experience suggests that the use of BDD may not be appropriate for BI projects, especially during the early stages of development, when there is still insufficient clarity about business acceptance criteria. The need for broad maturity towards business understanding makes it complex to adopt the behavioral approach within the development process in projects of this nature."",
    booktitle = ""Proceedings of the XVII Brazilian Symposium on Software Quality"",
    pages = ""296-304"",
    numpages = ""9"",
    keywords = ""Software quality, behavior-driven development, business intelligence."",
    location = ""Curitiba, Brazil"",
    series = ""SBQS '18""
}"	Included	Included	new_screen			2	ScopusSignedIn		On the Applicability of BDD in a Business Intelligence Project: Experience Report	https://dl.acm.org/doi/10.1145/3275245.3275276	Association for Computing Machinery	nan; References
38	Behave	BHive: Behavior-Driven development meets B-Method	"Behavior-Driven Development (BDD) is an ""outside-in"" approach to software development built upon semi-formal mediums for specifying the behavior of a system as it would be observed externally. Through the representation of a system as a collection of user stories and scenarios using BDD's notation, practitioners automate acceptance tests using examples of desired behavior for the envisioned system. A formal model created in concert with BDD tests would provide valuable insight into test validity and enhance the visibility of the problem domain. This work called BHive builds upon the formal underpinnings of BDD scenarios by mapping their ""Given,"" ""When,"" and ""Then"" statements to ""Precondition,"" ""Command,"" and ""Postcondition"" constructs as introduced by Floyd-Hoare logic. We posit that this mapping allows for a B-Method representation to be created and that such a model is useful for exploring system behavior and exposing gaps in requirements and test plans. In this extension of previous work, we outline recent additions to BDD tooling required for the described integration, present a new strategy for test case generation from our approach, and expand on the benefits of the BHive approach to integrating formalism within a BDD project. (c) 2018, Springer International Publishing AG."	Boolean functions; Formal methods; Mapping; Software design; Testing; Agile; B method; Behaviour-Driven development; Floyd-hoare logic; Problem domain; System behaviors; Test case generation; Test generations; Acceptance tests	Carter, John Douglas; Gardner, William Bennett	Advances in Intelligent Systems and Computing	https://doi.org/10.1007/978-3-319-56157-8_11		232 - 255	"@ARTICLE{Carter2018232,
    author = ""Carter, John Douglas and Gardner, William Bennett"",
    title = ""BHive: Behavior-Driven development meets B-Method"",
    year = ""2018"",
    journal = ""Advances in Intelligent Systems and Computing"",
    volume = ""561"",
    pages = ""232 - 255"",
    doi = ""10.1007/978-3-319-56157-8\_11"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027834905\&doi=10.1007\%2f978-3-319-56157-8\_11\&partnerID=40\&md5=cc56ee1095813b94d042d58a10c32fbc"",
    affiliations = ""School of Computer Science, University of Guelph, Guelph, ON, Canada"",
    abstract = ""Behavior-Driven Development (BDD) is an ""outside-in"" approach to software development built upon semi-formal mediums for specifying the behavior of a system as it would be observed externally. Through the representation of a system as a collection of user stories and scenarios using BDD's notation, practitioners automate acceptance tests using examples of desired behavior for the envisioned system. A formal model created in concert with BDD tests would provide valuable insight into test validity and enhance the visibility of the problem domain. This work called BHive builds upon the formal underpinnings of BDD scenarios by mapping their ""Given,"" ""When,"" and ""Then"" statements to ""Precondition,"" ""Command,"" and ""Postcondition"" constructs as introduced by Floyd-Hoare logic. We posit that this mapping allows for a B-Method representation to be created and that such a model is useful for exploring system behavior and exposing gaps in requirements and test plans. In this extension of previous work, we outline recent additions to BDD tooling required for the described integration, present a new strategy for test case generation from our approach, and expand on the benefits of the BHive approach to integrating formalism within a BDD project. (c) 2018, Springer International Publishing AG."",
    author_keywords = ""Agile; B-Method; BDD; Behaviour-Driven development; Test generation"",
    keywords = ""Boolean functions; Formal methods; Mapping; Software design; Testing; Agile; B method; Behaviour-Driven development; Floyd-hoare logic; Problem domain; System behaviors; Test case generation; Test generations; Acceptance tests"",
    correspondence_address = ""J.D. Carter; School of Computer Science, University of Guelph, Guelph, Canada; email: jcarter@uoguelph.ca"",
    publisher = ""Springer Verlag"",
    issn = ""21945357"",
    language = ""English"",
    abbrev_source_title = ""Adv. Intell. Sys. Comput."",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1""
}"	Included	Included	new_screen			2	ScopusSignedIn		BHive: Behavior-Driven development meets B-Method	https://www.scopus.com/record/display.uri?eid=2-s2.0-85027834905&origin=resultslist&sort=plf-f&src=s&sid=445507d9977fa23ce6754b9de7250330&sot=b&sdt=b&s=TITLE-ABS-KEY%28bhive+behavior+driven+development+meets+b+method%29&sl=63&sessionSearchId=445507d9977fa23ce6754b9de7250330&relpos=0	Springer Verlag	nan; References
39	Behave	Automatically generating tests from natural language descriptions of software behavior	"Behavior-Driven Development (BDD) is an emerging agile development approach where all stakeholders (including developers and customers) work together to write user stories in structured natural language to capture a software application's functionality in terms of required ""behaviors."" Developers can then manually write ""glue"" code so that these scenarios can be translated into executable software tests. This glue code represents individual steps within unit and acceptance test cases, and tools exist that automate the mapping from scenario descriptions to manually written code steps (typically using regular expressions). This paper takes the position that, instead of requiring programmers to write manual glue code, it is practical to convert natural language scenario descriptions into executable software tests fully automatically. To show feasibility, this paper presents preliminary results from a tool called Kirby that uses natural language processing techniques to automatically generate executable software tests from structured English scenario descriptions. Kirby relieves the developer from the laborious work of writing code for the individual steps described in scenarios, so that both developers and customers can both focus on the scenarios as pure behavior descriptions (understandable to all, not just programmers). Preliminary results from assessing the performance and accuracy of this technique are presented. Copyright (c) 2013 SCITEPRESS."	Acceptance tests; Application programs; Automatic test pattern generation; Glues; Gluing; Natural language processing systems; Pattern matching; Software engineering; Tools; Agile methods; Automated code generation; Automated testing; Behavior-driven development; Feature description; NAtural language processing; Probabilistic analysis; Test driven development; Software testing	Kamalakar, Sunil; Edwards, Stephen H.; Dao, Tung M.	ENASE 2013 - Proceedings of the 8th International Conference on Evaluation of Novel Approaches to Software Engineering	https://www.scopus.com/record/display.uri?eid=2-s2.0-84887061776&origin=resultslist&sort=plf-f&src=s&sid=2c169b420f9be7389f07afb2fde8a78a&sot=b&sdt=b&s=TITLE-ABS-KEY%28automatically+generating+tests+from+natural+language+descriptions+of+software+behavior%29&sl=101&sessionSearchId=2c169b420f9be7389f07afb2fde8a78a&relpos=0		238 - 245	"@CONFERENCE{Kamalakar2013238,
    author = ""Kamalakar, Sunil and Edwards, Stephen H. and Dao, Tung M."",
    title = ""Automatically generating tests from natural language descriptions of software behavior"",
    year = ""2013"",
    journal = ""ENASE 2013 - Proceedings of the 8th International Conference on Evaluation of Novel Approaches to Software Engineering"",
    pages = ""238 - 245"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887061776\&partnerID=40\&md5=6159a06fc6995d15a944ba55917b2a55"",
    affiliations = ""Department of Computer Science, Virginia Tech, Blacksburg, VA, 2202 Kraft Drive (0902), United States"",
    abstract = {Behavior-Driven Development (BDD) is an emerging agile development approach where all stakeholders (including developers and customers) work together to write user stories in structured natural language to capture a software application's functionality in terms of required ""behaviors."" Developers can then manually write ""glue"" code so that these scenarios can be translated into executable software tests. This glue code represents individual steps within unit and acceptance test cases, and tools exist that automate the mapping from scenario descriptions to manually written code steps (typically using regular expressions). This paper takes the position that, instead of requiring programmers to write manual glue code, it is practical to convert natural language scenario descriptions into executable software tests fully automatically. To show feasibility, this paper presents preliminary results from a tool called Kirby that uses natural language processing techniques to automatically generate executable software tests from structured English scenario descriptions. Kirby relieves the developer from the laborious work of writing code for the individual steps described in scenarios, so that both developers and customers can both focus on the scenarios as pure behavior descriptions (understandable to all, not just programmers). Preliminary results from assessing the performance and accuracy of this technique are presented. Copyright (c) 2013 SCITEPRESS.},
    author_keywords = ""Agile methods; Automated code generation; Automated testing; Behavior-driven development; Feature description; Natural language processing; Probabilistic analysis; Software testing; Test-driven development"",
    keywords = ""Acceptance tests; Application programs; Automatic test pattern generation; Glues; Gluing; Natural language processing systems; Pattern matching; Software engineering; Tools; Agile methods; Automated code generation; Automated testing; Behavior-driven development; Feature description; NAtural language processing; Probabilistic analysis; Test driven development; Software testing"",
    isbn = ""978-989856562-4"",
    language = ""English"",
    abbrev_source_title = ""ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 9; Conference name: 8th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE 2013; Conference date: 4 July 2013 through 6 July 2013; Conference code: 100615""
}"	Included	Included	new_screen			2	ScopusSignedIn		Automatically generating tests from natural language descriptions of software behavior	https://www.scopus.com/record/display.uri?eid=2-s2.0-84887061776&origin=resultslist&sort=plf-f&src=s&sid=2c169b420f9be7389f07afb2fde8a78a&sot=b&sdt=b&s=TITLE-ABS-KEY%28automatically+generating+tests+from+natural+language+descriptions+of+software+behavior%29&sl=101&sessionSearchId=2c169b420f9be7389f07afb2fde8a78a&relpos=0		nan; References; Publisher
40	Behave	On the Understanding of How to Measure the Benefits of Behavior-Driven Development Adoption: Preliminary Literature Results from a Grey Literature Study	Behavior-Driven Development (BDD) is the integration of a ubiquitous language with Test-Driven Development and Automated Testing. From this integration, BDD supports software teams to build and deliver software. Although the perceived arguments of better results and of a more efficient development process, we still have no consolidated evidence of such benefits and how to measure them. Therefore, this long-term research aims to characterize how BDD adoption benefits can be measured. To do so, our research design includes a Multivocal Literature Review, composed of a Grey Literature to explore how industry tackles the topic and a Systematic Review to gather scientific evidences, followed of a Snowballing Review to supplement the search. Next, we will conduct empirical studies to characterize the topic from practice. This paper introduces our research and presents the results from our exploratory Grey Literature. We learned from these preliminary results that there are no models or frameworks defined to measure BDD adoption benefits but that teams indeed perceive improvements in software quality, communication, rework rates, among others. We also found that these teams also perceive that team engagement improves with the adoption of BDD and that although there is a certain cost (e.g., time and financial) involved, the investment pays off in the end. These results will inform the design of our Systematic Review and of our downstream empirical studies.	BDD Adoption;  Behavior-Driven Development;  Benefits;  Grey Literature Review;  Quality Measurement	Couto, Thiciane; Marczak, Sabrina; Gomes, Fabio	SBQS '20: Proceedings of the XIX Brazilian Symposium on Software Quality	https://doi.org/10.1145/3439961.3440000		1-7	"@inproceedings{10.1145/3439961.3440000,
    author = ""Couto, Thiciane and Marczak, Sabrina and Gomes, Fabio"",
    title = ""On the Understanding of How to Measure the Benefits of Behavior-Driven Development Adoption: Preliminary Literature Results from a Grey Literature Study"",
    year = ""2021"",
    isbn = ""9781450389235"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3439961.3440000"",
    doi = ""10.1145/3439961.3440000"",
    abstract = ""Behavior-Driven Development (BDD) is the integration of a ubiquitous language with Test-Driven Development and Automated Testing. From this integration, BDD supports software teams to build and deliver software. Although the perceived arguments of better results and of a more efficient development process, we still have no consolidated evidence of such benefits and how to measure them. Therefore, this long-term research aims to characterize how BDD adoption benefits can be measured. To do so, our research design includes a Multivocal Literature Review, composed of a Grey Literature to explore how industry tackles the topic and a Systematic Review to gather scientific evidences, followed of a Snowballing Review to supplement the search. Next, we will conduct empirical studies to characterize the topic from practice. This paper introduces our research and presents the results from our exploratory Grey Literature. We learned from these preliminary results that there are no models or frameworks defined to measure BDD adoption benefits but that teams indeed perceive improvements in software quality, communication, rework rates, among others. We also found that these teams also perceive that team engagement improves with the adoption of BDD and that although there is a certain cost (e.g., time and financial) involved, the investment pays off in the end. These results will inform the design of our Systematic Review and of our downstream empirical studies."",
    booktitle = ""Proceedings of the XIX Brazilian Symposium on Software Quality"",
    articleno = ""39"",
    numpages = ""7"",
    keywords = ""BDD Adoption, Behavior-Driven Development, Benefits, Grey Literature Review, Quality Measurement"",
    location = ""S\\textasciitilde {a}o Lu\'{\i}s, Brazil"",
    series = ""SBQS '20""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		On the Understanding of How to Measure the Benefits of Behavior-Driven Development Adoption: Preliminary Literature Results from a Grey Literature Study	https://dl.acm.org/doi/10.1145/3439961.3440000	Association for Computing Machinery	nan; References
41	Behave	Behavior-driven development: conference tutorial	Behavior-driven development is a software development technique in which system behaviors are determined and made into test cases before the software itself is written. Benefits can include a richer and deeper understanding of system requirements in addition to making these requirements executable. Moreover, this technique helps guide software developers in knowing what to test as well as knowing how much to test. In this tutorial, we introduce the fundamentals of this approach, a language for expressing system behaviors, and explain how to use this technique effectively in the undergraduate computer science curriculum.		Kart, Michael	J. Comput. Sci. Coll.	https://doi.org/10.5555/2167431.2167445		75	"@article{10.5555/2167431.2167445,
    author = ""Kart, Michael"",
    title = ""Behavior-driven development: conference tutorial"",
    year = ""2012"",
    issue_date = ""April 2012"",
    publisher = ""Consortium for Computing Sciences in Colleges"",
    address = ""Evansville, IN, USA"",
    volume = ""27"",
    number = ""4"",
    issn = ""1937-4771"",
    abstract = ""Behavior-driven development is a software development technique in which system behaviors are determined and made into test cases before the software itself is written. Benefits can include a richer and deeper understanding of system requirements in addition to making these requirements executable. Moreover, this technique helps guide software developers in knowing what to test as well as knowing how much to test. In this tutorial, we introduce the fundamentals of this approach, a language for expressing system behaviors, and explain how to use this technique effectively in the undergraduate computer science curriculum."",
    journal = ""J. Comput. Sci. Coll."",
    month = ""apr"",
    pages = ""75"",
    numpages = ""1""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Behavior-Driven Development: Conference Tutorial	https://dl.acm.org/doi/10.5555/2167431.2167445	Consortium for Computing Sciences in Colleges	nan; Keywords; References
42	Behave	A Study of the Characteristics of Behaviour Driven Development	Behaviour Driven Development (BDD) has gained increasing attention as an agile development approach in recent years. However, characteristics that constituite the BDD approach are not clearly defined. In this paper, we present a set of main BDD charactersitics identified through an analysis of relevant literature and current BDD toolkits. Our study can provide a basis for understanding BDD, as well as for extending the exisiting BDD toolkits or developing new ones.	Automated Acceptance Testing; Behaviour Driven Development; Test Driven Development; Ubiquitous Language	Solis, Carlos; Wang, Xiaofeng	Proceedings of the 2011 37th EUROMICRO Conference on Software Engineering and Advanced Applications					Included	Included	new_screen			2						
43	Behave	Behave Nicely! Automatic Generation of Code for Behaviour Driven Development Test Suites	Behaviour driven development (BDD) has gained widespread use in the software industry. System specifications can be expressed as test scenarios, describing the circumstances, actions and expected outcomes. These scenarios are written in a structured natural language (Gherkin), with each step in the scenario associated with a corresponding step implementation function in the underlying programming language. A challenge recognised by industry is ensuring that the natural language scenarios, step implementation functions and underlying system implementation remain consistent with one another, requiring on-going maintenance effort as changes are made to a system. To address this, we have developed behave_nicely, a tool, for automatically generating step implementation functions from structured natural language steps, with the intention of eliminating the need for maintaining step implementation functions. We evaluated our approach on a sample of 20 white box and 50 black box projects using behaviour driven development, drawn from GitHub. Our results show that behave_nicely can generate step implementation functions for 80% of the white box and 17% of black box projects. We conclude that (a) there is significant potential for automating the process of code generation for BDD tests and (b) that the development of guidelines for writing tests in Gherkin would significantly improve the results.	Natural languages;Maintenance engineering;Tools;Software;Testing;Industries;Computer languages;Behaviour driven development;code generation	Storer, Tim; Bob, Ruxandra	2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM)	https://doi.org/10.1109/SCAM.2019.00033	"1.Behave nicely repository,  [online]  Available: https://gitlab.com/rbob96/behave_nicely. Google Scholar; 2.Introducing bdd,  [online]  Available: https://dannorth.net/introducing-bdd/. Google Scholar; 3.A. Carrera, C. A. Iglesias and M. Garijo, ""Beast methodology: An agile testing methodology for multi-agent systems based on behaviour driven development"", Information Systems Frontiers, vol. 16, no. 2, pp. 169-182, April 2014. CrossRef  Google Scholar; 4.E. Keogh, ""Bdd: A lean toolkit"", Processings of Lean Software & Systems Conference, 2010. Google Scholar; 5.C. Solis and X. Wang, ""A study of the characteristics of behaviour driven development"", 2011 37th EUROMICRO Conference on Software Engineering and Advanced Applications, pp. 383-387, Aug 2011. View Article  Google Scholar; 6.Behave,  [online]  Available: https://behave.readthedocs.io/en/latest/. Google Scholar; 7.Jbehave,  [online]  Available: https://jbehave.org/. Google Scholar; 8.Cucumber,  [online]  Available: https://docs.cucumber.io/. Google Scholar; 9.SpecFlow,  [online]  Available: https://specflow.org. Google Scholar; 10.CollabNet VersionOne, 13th annual state of agile report, May 2019,  [online]  Available: https://www.stateofagile.com. Google Scholar; 11.L. P. Binamungu, S. M. Embury and N. Konstantinou, ""Maintaining behaviour driven development specifications: Challenges and opportunities"", 2018 IEEE 25th International Conference on Software Analysis Evolution and Reengineering (SANER), pp. 175-184, March 2018. View Article  Google Scholar; 12.R. A. DeMillo, R. J. Lipton and F. G. Sayward, ""Hints on test data selection: Help for the practicing programmer"", IEEE Computer, vol. 11, no. 4, pp. 34-41, 1978. View Article  Google Scholar; 13.S. Kamalakar, Automatically generating tests from natural language descriptions of software behavior, 2013. Google Scholar; 14. [online]  Available: http://github.com.; 15.K. Beck, Test Driven Development by Example ser. Signature, Addison Wesley, November 2002. Google Scholar; 16.J. Dick and A. Faivre, ""Automating the generation and sequencing of test cases from model-based specifications"" in FME '93: Industrial-Strength Formal Methods, Berlin, Heidelberg:Springer Berlin Heidelberg, pp. 268-284, 1993. CrossRef  Google Scholar; 17.Y. G. Kim, H. S. Hong, D. H. Bae and S. D. Cha, ""Test cases generation from uml state diagrams"", IEE Proceedings - Software, vol. 146, no. 4, pp. 187-192, August 1999. CrossRef  Google Scholar; 18.N. Ismail, R. Ibrahim and N. Ibrahim, ""Automatic generation of test cases from use-case diagram"", Proceedings of the International Conference on Electrical Engineering and Informatics Institut Teknologi Bandung, June 17-19, 2007, January 2007. Google Scholar; 19.G. Fink and M. Bishop, ""Property-based testing: A new approach to testing for assurance"", SIGSOFT Softw. Eng. Notes, vol. 22, no. 4, pp. 74-80, Jul. 1997. CrossRef  Google Scholar; 20.Crowdsourced testing,  [online]  Available: https://www.rainforestqa.com/blog/2016-08-17-what-is-crowdsourced-testing/. Google Scholar; 21.A. Fatwanto, ""Software requirements specification analysis using natural language processing technique"", 2013 International Conference on QiR, pp. 105-110, June 2013. View Article  Google Scholar; 22.C. Arora, M. Sabetzadeh, L. Briand and F. Zimmer, ""Automated checking of conformance to requirements templates using natural language processing"", IEEE Transactions on Software Engineering, vol. 41, no. 10, pp. 944-968, October 2015. View Article  Google Scholar; 23.J. Kocerka, M. Krzeslak and A. Galuszka, ""Analysing quality of textual requirements using natural language processing: A literature review"", 23rd International Conference on Methods & Models in Automation & Robotics MMAR 2018, pp. 876-880, August 27-30, 2018. View Article  Google Scholar; 24.E. C. Groen, J. Schowalter, S. Kopczynska, S. Polst and S. Alvani, ""Is there really a need for using NLP to elicit requirements? A benchmarking study to assess scalability of manual analysis"", Joint Proceedings of REFSQ-2018 Workshops Doctoral Symposium Live Studies Track and Poster Track co-located with the 23rd International Conference on Requirements Engineering: Foundation for Software Quality (REFSQ 2018) Utrecht The Netherlands March 19 2018. ser. CEUR Workshop Proceedings, vol. 2075, 2018. Google Scholar; 25.A. Ferrari, ""Natural language requirements processing: From research to practice"", 2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion), pp. 536-537, May 2018. CrossRef  Google Scholar; 26.C. Wang, F. Pastore, A. Goknil, L. Briand and Z. Iqbal, ""Automatic generation of system test cases from use case specifications"", Proceedings of the 2015 International Symposium on Software Testing and Analysis ser. ISSTA 2015, pp. 385-396, 2015. CrossRef  Google Scholar; 27.P. M. Duvall, S. Matyas and A. Glover, Continuous Integration: Improving Software Quality ser. Addison Wesley Signature Series, New Jersey:Addison Wesley, June 2007. Google Scholar; 28.Natural language toolkit,  [online]  Available: https://www.nltk.org/. Google Scholar; 29.Allennlp,  [online]  Available: https://allennlp.org/. Google Scholar; 30.T. C. Lethbridge, ""Priorities for the education and training of software engineers"", The Journal of Systems and Software, vol. 53, pp. 53-71, 2000. CrossRef  Google Scholar"	228-237	"@INPROCEEDINGS{8930836,
    author = ""Storer, Tim and Bob, Ruxandra"",
    booktitle = ""2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM)"",
    title = ""Behave Nicely! Automatic Generation of Code for Behaviour Driven Development Test Suites"",
    year = ""2019"",
    volume = """",
    number = """",
    pages = ""228-237"",
    abstract = ""Behaviour driven development (BDD) has gained widespread use in the software industry. System specifications can be expressed as test scenarios, describing the circumstances, actions and expected outcomes. These scenarios are written in a structured natural language (Gherkin), with each step in the scenario associated with a corresponding step implementation function in the underlying programming language. A challenge recognised by industry is ensuring that the natural language scenarios, step implementation functions and underlying system implementation remain consistent with one another, requiring on-going maintenance effort as changes are made to a system. To address this, we have developed behave\_nicely, a tool, for automatically generating step implementation functions from structured natural language steps, with the intention of eliminating the need for maintaining step implementation functions. We evaluated our approach on a sample of 20 white box and 50 black box projects using behaviour driven development, drawn from GitHub. Our results show that behave\_nicely can generate step implementation functions for 80\% of the white box and 17\% of black box projects. We conclude that (a) there is significant potential for automating the process of code generation for BDD tests and (b) that the development of guidelines for writing tests in Gherkin would significantly improve the results."",
    keywords = ""Natural languages;Maintenance engineering;Tools;Software;Testing;Industries;Computer languages;Behaviour driven development;code generation"",
    doi = ""10.1109/SCAM.2019.00033"",
    ISSN = ""2470-6892"",
    month = ""Sep.""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behave nicely! automatic generation of code for behaviour driven development test suites	https://ieeexplore.ieee.org/document/8930836	IEEE	
44	Behave	Characterising the Quality of Behaviour Driven Development Specifications	Behaviour Driven Development (BDD) is an agile testing technique that enables software requirements to be specified as example interactions with the system, using structured natural language. While (in theory) being readable by non-technical stakeholders, the examples can also be executed against the code base to identify behaviours that are not yet correctly implemented. Writing good BDD suites, however, is challenging. A typical suite can contain hundreds of individual scenarios, that must correctly specify the system as a whole as well as individually. Despite much discussion amongst practitioners and in the blogosphere, as yet no formal definition of what makes for a high quality BDD suite has been given. To shed light on this, we surveyed BDD practitioners, asking for their opinions on the quality criteria that are important for BDD suites. We proposed, and asked for opinions on, four quality principles, and gave practitioners the option to add more principles of their own. This paper reports on the results of the survey, and presents an approach to defining BDD suite quality. © The Author(s) 2020.		Binamungu L.P., Embury S.M., Konstantinou N.	Lecture Notes in Business Information Processing	https://doi.org/doi:10.1007/978-3-030-49392-9_6				Included	Included	new_screen			2	Pub Med Central		Characterising the Quality of Behaviour Driven Development Specifications	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7251619/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
45	Behave	Behaviour-driven development of foundational UML components	Behaviour-Driven Development (BDD) focuses all development activities on the delivery of behaviours - what a system should do, described such that developers and domain experts speak the same language. BDD frameworks allow users to represent the required system behaviour as executable user stories and the acceptance criteria as executable scenarios attached to user stories. In this paper we define a UML profile that allows users to create executable Foundational UML (fUML) stories and scenarios. In order to easily construct scenarios we introduce a BDD model library which contains fUML activities for testing equalities and inclusions. We also present an Eclipse-based development tool that supports a BDD approach for developing fUML components. The tool provides developers a concrete syntax for defining executable scenarios, and automatically updates the project status based on verified delivered behaviorus. (c) 2010 Elsevier B.V.	Specifications; Acceptance criteria; behaviour-driven development; Executable specifications; Executable UML; User stories; Formal logic	Lazar, Ioan; Motogna, Simona; Parv, Bazil	Electronic Notes in Theoretical Computer Science	https://doi.org/10.1016/j.entcs.2010.07.007		91 - 105	"@ARTICLE{Lazar201091,
    author = ""Lazar, Ioan and Motogna, Simona and Parv, Bazil"",
    title = ""Behaviour-driven development of foundational UML components"",
    year = ""2010"",
    journal = ""Electronic Notes in Theoretical Computer Science"",
    volume = ""264"",
    number = ""1"",
    pages = ""91 - 105"",
    doi = ""10.1016/j.entcs.2010.07.007"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77955705236\&doi=10.1016\%2fj.entcs.2010.07.007\&partnerID=40\&md5=f60d0321c5d64335bfed145a66821f27"",
    affiliations = ""Department of Computer Science, Babes-Bolyai University, Cluj-Napoca, Romania"",
    abstract = ""Behaviour-Driven Development (BDD) focuses all development activities on the delivery of behaviours - what a system should do, described such that developers and domain experts speak the same language. BDD frameworks allow users to represent the required system behaviour as executable user stories and the acceptance criteria as executable scenarios attached to user stories. In this paper we define a UML profile that allows users to create executable Foundational UML (fUML) stories and scenarios. In order to easily construct scenarios we introduce a BDD model library which contains fUML activities for testing equalities and inclusions. We also present an Eclipse-based development tool that supports a BDD approach for developing fUML components. The tool provides developers a concrete syntax for defining executable scenarios, and automatically updates the project status based on verified delivered behaviorus. (c) 2010 Elsevier B.V."",
    author_keywords = ""acceptance criteria; behaviour-driven development; executable specification; executable UML; user story"",
    keywords = ""Specifications; Acceptance criteria; behaviour-driven development; Executable specifications; Executable UML; User stories; Formal logic"",
    correspondence_address = ""I. Lazar; Department of Computer Science, Babes-Bolyai University, Cluj-Napoca, Romania; email: ilazar@cs.ubbcluj.ro"",
    issn = ""15710661"",
    language = ""English"",
    abbrev_source_title = ""Electron. Notes Theor. Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 34; All Open Access, Gold Open Access""
}"	Included	Included	new_screen			2	ScopusSignedIn		Behaviour-Driven Development of Foundational UML Components	https://www.scopus.com/record/display.uri?eid=2-s2.0-77955705236&origin=resultslist&sort=plf-f&src=s&sid=10418915816aa4ee79e237b8c1bc0461&sot=b&sdt=b&s=TITLE-ABS-KEY%28behaviour+driven+development+of+foundational+uml+components%29&sl=74&sessionSearchId=10418915816aa4ee79e237b8c1bc0461&relpos=0		nan; References; Publisher
46	Behave	BHive: Towards Behaviour-Driven Development Supported by B-Method	"Behaviour-Driven Development (BDD) is an ""outside-in"" approach to software development built upon semi-formal mediums for specifying the behaviour of a system as it would be observed externally. Through the representation of a system as a collection of user stories and scenarios using BDD's notation, practitioners automate acceptance tests using examples of desired behaviour for the envisioned system. A formal model created in concert with BDD tests would provide valuable insight into test validity and enhance the visibility of the problem domain. This work called BHive builds upon the formal underpinnings of BDD scenarios by mapping their ""Given,"" ""When,"" and ""Then"" statements to ""Precondition,"" ""Command,"" and ""Postcondition"" constructs as introduced by Floyd-Hoare logic. We posit that this mapping allows for a B-Method representation to be created and that such a model is useful for exploring system behaviour and exposing gaps in requirements. We also outline extensions to BDD tooling required for the described integration and present benefits of the BHive approach to integrating formalism within a BDD project."	Software;Testing;Stakeholders;Shape;Documentation;Conferences;BDD;Behaviour-Driven Development;B-Method;Agile	Carter, J.; Gardner, W. B.	2016 IEEE 17th International Conference on Information Reuse and Integration (IRI)	https://doi.org/10.1109/IRI.2016.39	"1.K. Beck, M. Beedle, A. van Bennekum, A. Cockburn, W. Cunningham, M. Fowler, et al., ""Manifesto for Agile Software Development"", 2001,  [online]  Available: http://www.agilemanifesto.org/. Google Scholar; 2.K. Forsberg and H. Mooz, ""The relationship of system engineering to the project cycle"", Proc. of the National Council for Systems Engineering First Annual Conference, pp. 57-61, 1991. CrossRef  Google Scholar; 3.D. North, ""Behavior modification: The evolution of behaviour-driven development"", Better Software Magazine, Mar. 2006. Google Scholar; 4.E. Evans, Domain-Driven Design: Tackling Complexity in the Heart of Software, Boston:Addison-Wesley Longman, 2003. Google Scholar; 5.""Gherkin wiki"", 2016,  [online]  Available: https://github.com/cucumber/cucumber/wiki/Gherkin. Google Scholar; 6.B. Rice, R. Jones and J. Enge, ""Welcome to behave!"", 2014,  [online]  Available: http://pythonhosted.org/behave/. Google Scholar; 7.C. A. R. Hoare, ""An axiomatic basis for computer programming"", Communications of the ACM, vol. 12, no. 10, pp. 576-580, 1969. CrossRef  Google Scholar; 8.J.-R. Abrial, The B-book: Assigning Programs to Meanings, New York:Cambridge University Press, 1996. CrossRef  Google Scholar; 9.J.-R. Abrial, Modeling in Event-B: System and Software Engineering, New York:Cambridge University Press, 2010. CrossRef  Google Scholar; 10.G. Eleftherakis and A. J. Cowling, ""An agile formal development methodology"", Proc. 1st South-East European Workshop on Formal Methods (SEEFM 03), pp. 36-47, 2003. Google Scholar; 11.K. Scott, The Unified Process Explained, Boston:Addison- Wesley Longman, 2002. Google Scholar; 12.J. S. Ostroff, D. Makalsky and R. F. Paige, ""Agile specification-driven development"", Lecture Notes in Computer Science, vol. 3092, pp. 104-112, 2004. CrossRef  Google Scholar; 13.B. Meyer, ""Applying ""Design by Contract"", Computer, vol. 25, pp. 40-51, Oct. 1992. View Article  Google Scholar; 14.K. Beck, Test-Driven Development: By Example, Boston:Addison-Wesley Longman, 2002. Google Scholar; 15.K. Beck and C. Andres, Extreme Programming Explained: Embrace Change, Boston:Addison-Wesley Professional, 2004. Google Scholar; 16.M. Lopez-Nores, J. J. Pazos-Arias, J. Garcia-Duque and B. Barragans-Martinez, ""An agile approach to support incremental development of requirements specifications"", Proc. Australian Software Engineering Conference (ASWEC 06), pp. 9-18, 2006. View Article  Google Scholar; 17.S. Black, P. P. Boca, J. P. Bowen, J. Gorman and M. Hinchey, ""Formal Versus Agile: Survival of the Fittest"", Computer, vol. 42, pp. 37-45, Sep. 2009. View Article  Google Scholar; 18.R. C. Martin, ""The bowling game kata"",  [online]  Available: http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata. Google Scholar; 19.M. Leuschel, J. Bendisposto, I. Dobrikov, S. Krings and D. Plagge, ""From animation to data validation: The ProB constraint solver 10 years on"" in Formal Methods Applied to Complex Systems: Implementation of the B Method, Hoboken, NJ:Wiley ISTE, pp. 427-446, 2014. CrossRef  Google Scholar"	249-256	"@INPROCEEDINGS{7785748,
    author = ""Carter, J. and Gardner, W. B."",
    booktitle = ""2016 IEEE 17th International Conference on Information Reuse and Integration (IRI)"",
    title = ""BHive: Towards Behaviour-Driven Development Supported by B-Method"",
    year = ""2016"",
    volume = """",
    number = """",
    pages = ""249-256"",
    abstract = {Behaviour-Driven Development (BDD) is an ""outside-in"" approach to software development built upon semi-formal mediums for specifying the behaviour of a system as it would be observed externally. Through the representation of a system as a collection of user stories and scenarios using BDD's notation, practitioners automate acceptance tests using examples of desired behaviour for the envisioned system. A formal model created in concert with BDD tests would provide valuable insight into test validity and enhance the visibility of the problem domain. This work called BHive builds upon the formal underpinnings of BDD scenarios by mapping their ""Given,"" ""When,"" and ""Then"" statements to ""Precondition,"" ""Command,"" and ""Postcondition"" constructs as introduced by Floyd-Hoare logic. We posit that this mapping allows for a B-Method representation to be created and that such a model is useful for exploring system behaviour and exposing gaps in requirements. We also outline extensions to BDD tooling required for the described integration and present benefits of the BHive approach to integrating formalism within a BDD project.},
    keywords = ""Software;Testing;Stakeholders;Shape;Documentation;Conferences;BDD;Behaviour-Driven Development;B-Method;Agile"",
    doi = ""10.1109/IRI.2016.39"",
    ISSN = """",
    month = ""July""
}"	Included	Included	new_screen			2	ScopusSignedIn		BHive: Towards Behaviour-Driven Development Supported by B-Method	https://ieeexplore.ieee.org/document/7785748	IEEE	
47	Behave	Empirical Findings on BDD Story Parsing to Support Consistency Assurance between Requirements and Artifacts	Behaviour-Driven Development (BDD) stories have gained considerable attention in recent years as an effective way to specify and test user requirements in agile software development projects. External testing frameworks also allow developers to automate the execution of BDD stories and check whether a fully functional software system behaves as expected. However, other software artifacts may quite often lose synchronization with the stories, and many inconsistencies can arise with respect to requirements representation. This paper reports on preliminary empirical findings regarding the performance of two existing approaches in the literature intended to support consistency assurance between BDD stories and software artifacts. The first approach involves the parsing of BDD stories in order to identify conceptual elements to automatically generate consistent class diagrams, while the second approach seeks to identify interaction elements to automatically assess the consistency of task models and GUI prototypes. We report on the precision of these approaches when applied to a study with BDD stories previously written by Product Owners (POs). Based on the results, we also identify a set of challenges and opportunities for BDD stories in the consistency assurance of such artifacts.	User Stories;  User Requirements;  Software Artifacts.;  Consistency Assurance;  Behaviour-Driven Development	Silva, Thiago Rocha; Fitzgerald, Brian	EASE '21: Proceedings of the 25th International Conference on Evaluation and Assessment in Software Engineering	https://doi.org/10.1145/3463274.3463807		266-271	"@inproceedings{10.1145/3463274.3463807,
    author = ""Silva, Thiago Rocha and Fitzgerald, Brian"",
    title = ""Empirical Findings on BDD Story Parsing to Support Consistency Assurance between Requirements and Artifacts"",
    year = ""2021"",
    isbn = ""9781450390538"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3463274.3463807"",
    doi = ""10.1145/3463274.3463807"",
    abstract = ""Behaviour-Driven Development (BDD) stories have gained considerable attention in recent years as an effective way to specify and test user requirements in agile software development projects. External testing frameworks also allow developers to automate the execution of BDD stories and check whether a fully functional software system behaves as expected. However, other software artifacts may quite often lose synchronization with the stories, and many inconsistencies can arise with respect to requirements representation. This paper reports on preliminary empirical findings regarding the performance of two existing approaches in the literature intended to support consistency assurance between BDD stories and software artifacts. The first approach involves the parsing of BDD stories in order to identify conceptual elements to automatically generate consistent class diagrams, while the second approach seeks to identify interaction elements to automatically assess the consistency of task models and GUI prototypes. We report on the precision of these approaches when applied to a study with BDD stories previously written by Product Owners (POs). Based on the results, we also identify a set of challenges and opportunities for BDD stories in the consistency assurance of such artifacts."",
    booktitle = ""Proceedings of the 25th International Conference on Evaluation and Assessment in Software Engineering"",
    pages = ""266-271"",
    numpages = ""6"",
    keywords = ""User Stories, User Requirements, Software Artifacts., Consistency Assurance, Behaviour-Driven Development"",
    location = ""Trondheim, Norway"",
    series = ""EASE '21""
}"	Included	Included	new_screen			2	ScopusSignedIn		Empirical Findings on BDD Story Parsing to Support Consistency Assurance between Requirements and Artifacts	https://dl.acm.org/doi/10.1145/3463274.3463807	Association for Computing Machinery	nan; References
48	Behave	Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities	Blockchain as a distributed computing platform enables users to deploy pieces of software (known as smart contracts) for a wealth of next-generation decentralized applications without involving a trusted third-party. The advantages of smart contracts do, however, come at a price. As with most technologies, there are potential security threats, vulnerabilities and various other issues associated with smart contracts. Writing secure and safe smart contracts can be extremely difficult due to various business logics, as well as platform vulnerabilities and limitations. Formal methods have recently been advocated to mitigate these vulnerabilities. This paper aims to provide a first-time study on current formalization research on all smart contract-related platforms on blockchains, which is scarce in the literature. To this end, a timely and rigorous systematic review to examine the state-of-the-art research and achievements published between 2015 and July 2019 is provided. This study is based on a comprehensive review of a set of 35 research papers that have been extracted from eight major online digital databases. The results indicate that the most common formalization technique is theorem proving, which is most often used to verify security properties relating to smart contracts, while other techniques such as symbolic execution and model checking were also frequently used. These techniques were most commonly used to verify the functional correctness of smart contracts. From the language and automation point of views, there were 12 languages (domain specific/specification/general purpose) proposed or used for the formalization of smart contracts on blockchains, while 15 formal method-specific automated tools/frameworks were identified for mitigating various vulnerabilities of smart contracts. From the results of this work, we further highlight three open issues for future research in this emerging domain including: formal testing, automated verification of smart contracts, and domain specific languages (DSLs) for Ethereum. These issues suggest the need for additional, in-depth research. Our study also provides possible future research directions. (c) 2019	Application programs; Automation; Formal methods; Formal verification; Model checking; Problem oriented languages; Verification; Automated verification; Distributed computing platform; Domain specific languages; Functional correctness; Security properties; Symbolic execution; Systematic Review; Trusted third parties; Blockchain	Singh, Amritraj; Parizi, Reza M.; Zhang, Qi; Choo, Kim-Kwang Raymond; Dehghantanha, Ali	Computers and Security	https://doi.org/10.1016/j.cose.2019.101654			"@ARTICLE{Singh2020,
    author = ""Singh, Amritraj and Parizi, Reza M. and Zhang, Qi and Choo, Kim-Kwang Raymond and Dehghantanha, Ali"",
    title = ""Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities"",
    year = ""2020"",
    journal = ""Computers and Security"",
    volume = ""88"",
    doi = ""10.1016/j.cose.2019.101654"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074192785\&doi=10.1016\%2fj.cose.2019.101654\&partnerID=40\&md5=62cd9ec151a449f7acf2b5b06c09e75c"",
    affiliations = ""Department of Software Engineering and Game Development, Kennesaw State University, 30060, GA, United States; IBM Thomas J. Research Center, Yorktown Heights, 10598, NY, United States; Department of Information Systems and Cyber Security, University of Texas at San Antonio, TX, United States; Cyber Science Lab, School of Computer Science, University of Guelph, Ontario, Canada"",
    abstract = ""Blockchain as a distributed computing platform enables users to deploy pieces of software (known as smart contracts) for a wealth of next-generation decentralized applications without involving a trusted third-party. The advantages of smart contracts do, however, come at a price. As with most technologies, there are potential security threats, vulnerabilities and various other issues associated with smart contracts. Writing secure and safe smart contracts can be extremely difficult due to various business logics, as well as platform vulnerabilities and limitations. Formal methods have recently been advocated to mitigate these vulnerabilities. This paper aims to provide a first-time study on current formalization research on all smart contract-related platforms on blockchains, which is scarce in the literature. To this end, a timely and rigorous systematic review to examine the state-of-the-art research and achievements published between 2015 and July 2019 is provided. This study is based on a comprehensive review of a set of 35 research papers that have been extracted from eight major online digital databases. The results indicate that the most common formalization technique is theorem proving, which is most often used to verify security properties relating to smart contracts, while other techniques such as symbolic execution and model checking were also frequently used. These techniques were most commonly used to verify the functional correctness of smart contracts. From the language and automation point of views, there were 12 languages (domain specific/specification/general purpose) proposed or used for the formalization of smart contracts on blockchains, while 15 formal method-specific automated tools/frameworks were identified for mitigating various vulnerabilities of smart contracts. From the results of this work, we further highlight three open issues for future research in this emerging domain including: formal testing, automated verification of smart contracts, and domain specific languages (DSLs) for Ethereum. These issues suggest the need for additional, in-depth research. Our study also provides possible future research directions. (c) 2019"",
    author_keywords = ""Blockchain; Formal methods; Smart contracts; Systematic review; Verification"",
    keywords = ""Application programs; Automation; Formal methods; Formal verification; Model checking; Problem oriented languages; Verification; Automated verification; Distributed computing platform; Domain specific languages; Functional correctness; Security properties; Symbolic execution; Systematic Review; Trusted third parties; Blockchain"",
    correspondence_address = ""K.-K.R. Choo; Department of Information Systems and Cyber Security, University of Texas at San Antonio, United States; email: raymond.choo@fulbrightmail.org"",
    publisher = ""Elsevier Ltd"",
    issn = ""01674048"",
    coden = ""CPSED"",
    language = ""English"",
    abbrev_source_title = ""Comput Secur"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 157""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities	https://www.scopus.com/record/display.uri?eid=2-s2.0-85074192785&origin=resultslist&sort=plf-f&src=s&sid=16841f25098bea10f74ed6fb9a96d753&sot=b&sdt=b&s=TITLE-ABS-KEY%28blockchain+smart+contracts+formalization+approaches+and+challenges+to+address+vulnerabilities%29&sl=108&sessionSearchId=16841f25098bea10f74ed6fb9a96d753&relpos=0	Elsevier Ltd	nan; References; Pages
49	Behave	Survey on blockchain based smart contracts: Applications, opportunities and challenges	Blockchain is one of the disruptive technical innovation in the recent computing paradigm. Many applications already notoriously hard and complex are fortunate to ameliorate the service with the blessings of blockchain and smart contracts. The decentralized and autonomous execution with in-built transparency of blockchain based smart contracts revolutionize most of the applications with optimum and effective functionality. The paper explores the significant applications which already benefited from the smart contracts. We also highlight the future potential of the blockchain based smart contracts in these applications perspective.	Blockchain, Smart contracts, Applications, DLT, Hyperledger Fabric, Ethereum, Corda, Stellar	Hewa, Tharaka; Ylianttila, Mika; Liyanage, Madhusanka	Journal of Network and Computer Applications					Excluded	Excluded	new_screen			2						
50	Behave	End-to-End Automatic Business Process Validation	Business Process Testing is the act of validating that end-to-end transactions through enterprise systems continue to work correctly as the underlying packaged applications evolve. End-to-end automatic business process validation can be a challenging task, but an important way to check that business rules continue to work properly and that problems are detected and corrected as soon as possible. This paper presents the design of a test automation platform, ETAP-Pro, to test end-to-end business processes that aims to overcome some challenges in validating business processes.	Business Process Testing; End-to-end Process Testing; Model Based Testing; Software Testing	Paiva, Ana C.R.; Flores, Nuno H.; Faria, Joo P.; Marques, Jos M.G.	Procedia Comput. Sci.					Excluded	Excluded	new_screen			2						
51	Behave	A Reusable Automated Acceptance Testing Architecture for Microservices in Behavior-Driven Development	Cloud Computing and Mobile Cloud Computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability, guaranteed fault tolerance, near zero downtime, etc. and also daunting challenges such as security, reliability, continuous deployment and update capability. Microservices architecture, where application is composed of a set of independently deployable services, is increasingly becoming popular due to its capability to address most of these needs and challenges. In recent years, the Behavior-Driven Development (BDD) has become one of the most popular agile software development processes, and frequently used in microservices development. The key to success of BDD is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax. The reusability, auditability, and maintainability become some of the major concerns when BDD test framework is applied for each microservice repository and no previous research addresses these concerns. In this paper, we present a reusable automated acceptance testing architecture to address all these concerns.	Data structures;Boolean functions;Business;Testing;Software;Maintenance engineering;executable automated acceptance testing; Gherkin; functional testing; behavior-driven development; microservice	Rahman, Mazedur; Gao, Jerry	2015 IEEE Symposium on Service-Oriented System Engineering	https://doi.org/10.1109/SOSE.2015.55	"1.D. North, ""Introducing behaviour driven development"", Sep 2014,  [online]  Available: http://dannorth.net/introducing-bdd/. Google Scholar; 2.K. Beck, ""Test-Driven Development: by Example"" in , Addison Wesley, 2003. Google Scholar; 3.K. Beck and C. Andres, ""Extreme Programming Explained"" in , Addison-Wesley, 2005. Google Scholar; 4.M. Fowler, ""BusinessReadableDSL"", Nov 2014,  [online]  Available: http://martinfowler.com/bliki/BusinessReadableDSL.html. Google Scholar; 5.Gherkin, Nov 2014,  [online]  Available: http://cukes.info/gherkin.html.; 6.Gherkin, Nov 2014,  [online]  Available: https://github.com/cucumber/cucumber/wiki/Gherkin.; 7.Nov 2014,  [online]  Available: http://guide.agilealliance.org/guide/acceptance.html.; 8.M. Fowler, ""Agile Software Development"", Sep 2014,  [online]  Available: http://martinfowler.com/agile.html. Google Scholar; 9.S. Ambler, ""2013 IT Project Success Rates Survey Results"", Sep 2014,  [online]  Available: http://www.ambysoft.com/surveys/success2013.html. Google Scholar; 10.B. Murphy et al., ""Have Agile Techniques been the Silver Bullet for Software Development at Microsoft?"", Empirical Software Engineering and Measurement ACM / IEEE International Symposium (2013), pp. 75-84, 2013. CrossRef  Google Scholar; 11.R. Osherove, ""The art of unit testing: with examples in.NET. Greenwich (Connecticut): Manning"", 2009. Google Scholar; 12.Nov 2014,  [online]  Available: http://guide.agilealliance.org/guide/unittest.html.; 13.M. Fowler, ""Eradicating Non-Determinism in Tests"", Nov 2014,  [online]  Available: http://martinfowler.com/articles/nonDeterminism.html. Google Scholar; 14.R. Borg and M. Kropp, ""Automated acceptance test refactoring"", Proceedings of the 4th Workshop on Refactoring Tools WRT '11, pp. 15-21, 2011. CrossRef  Google Scholar; 15.M. Fowler, ""Microservices"", Nov 2014,  [online]  Available: http://martinfowler.com/articles/microservices.html. Google Scholar; 16.Nov 2014,  [online]  Available: http://microservices.io/patterns/microservices.html.; 17.J. Marciniak, ""Encyclopedia of software engineering"" in , New York:Wiley, 1994. Google Scholar; 18.Nov 2014,  [online]  Available: http://guide.agilealliance.org/guide/mocks.html.; 19. [online]  Available: http://cukes.info/.; 20. [online]  Available: http://docs.behat.org/en/v2.5/.; 21. [online]  Available: http://pythonhosted.orglbehave/."	321-325	"@INPROCEEDINGS{7133548,
    author = ""Rahman, Mazedur and Gao, Jerry"",
    booktitle = ""2015 IEEE Symposium on Service-Oriented System Engineering"",
    title = ""A Reusable Automated Acceptance Testing Architecture for Microservices in Behavior-Driven Development"",
    year = ""2015"",
    volume = """",
    number = """",
    pages = ""321-325"",
    abstract = ""Cloud Computing and Mobile Cloud Computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability, guaranteed fault tolerance, near zero downtime, etc. and also daunting challenges such as security, reliability, continuous deployment and update capability. Microservices architecture, where application is composed of a set of independently deployable services, is increasingly becoming popular due to its capability to address most of these needs and challenges. In recent years, the Behavior-Driven Development (BDD) has become one of the most popular agile software development processes, and frequently used in microservices development. The key to success of BDD is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax. The reusability, auditability, and maintainability become some of the major concerns when BDD test framework is applied for each microservice repository and no previous research addresses these concerns. In this paper, we present a reusable automated acceptance testing architecture to address all these concerns."",
    keywords = ""Data structures;Boolean functions;Business;Testing;Software;Maintenance engineering;executable automated acceptance testing; Gherkin; functional testing; behavior-driven development; microservice"",
    doi = ""10.1109/SOSE.2015.55"",
    ISSN = """",
    month = ""March""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		A Reusable Automated Acceptance Testing Architecture for Microservices in Behavior-Driven Development	https://ieeexplore.ieee.org/document/7133548	IEEE	
52	Behave	A reusable automated acceptance testing architecture for microservices in behavior-driven development	Cloud Computing and Mobile Cloud Computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability, guaranteed fault tolerance, near zero downtime, etc. and also daunting challenges such as security, reliability, continuous deployment and update capability. Microservices architecture, where application is composed of a set of independently deployable services, is increasingly becoming popular due to its capability to address most of these needs and challenges. In recent years, the Behavior-Driven Development (BDD) has become one of the most popular agile software development processes, and frequently used in microservices development. The key to success of BDD is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax. The reusability, auditability, and maintainability become some of the major concerns when BDD test framework is applied for each microservice repository and no previous research addresses these concerns. In this paper, we present a reusable automated acceptance testing architecture to address all these concerns. (c) 2015 IEEE.	Automation; Boolean functions; Cloud computing; Computer software reusability; Fault tolerance; Mobile cloud computing; Reusability; Software design; Software engineering; Systems engineering; Automated acceptance testing; Behavior-driven development; Functional testing; Gherkin; Microservice; Acceptance tests	Rahman, Mazedur; Gao, Jerry	Proceedings - 9th IEEE International Symposium on Service-Oriented System Engineering, IEEE SOSE 2015	https://doi.org/10.1109/SOSE.2015.55		321 - 325	"@CONFERENCE{Rahman2015321,
    author = ""Rahman, Mazedur and Gao, Jerry"",
    title = ""A reusable automated acceptance testing architecture for microservices in behavior-driven development"",
    year = ""2015"",
    journal = ""Proceedings - 9th IEEE International Symposium on Service-Oriented System Engineering, IEEE SOSE 2015"",
    volume = ""30"",
    pages = ""321 - 325"",
    doi = ""10.1109/SOSE.2015.55"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84990950599\&doi=10.1109\%2fSOSE.2015.55\&partnerID=40\&md5=fd8ac0b9d3c45d4f7f08aed564876ab2"",
    affiliations = ""San Jose State University, United States"",
    abstract = ""Cloud Computing and Mobile Cloud Computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability, guaranteed fault tolerance, near zero downtime, etc. and also daunting challenges such as security, reliability, continuous deployment and update capability. Microservices architecture, where application is composed of a set of independently deployable services, is increasingly becoming popular due to its capability to address most of these needs and challenges. In recent years, the Behavior-Driven Development (BDD) has become one of the most popular agile software development processes, and frequently used in microservices development. The key to success of BDD is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax. The reusability, auditability, and maintainability become some of the major concerns when BDD test framework is applied for each microservice repository and no previous research addresses these concerns. In this paper, we present a reusable automated acceptance testing architecture to address all these concerns. (c) 2015 IEEE."",
    author_keywords = ""Behavior-driven development; Executable automated acceptance testing; Functional testing; Gherkin; Microservice"",
    keywords = ""Automation; Boolean functions; Cloud computing; Computer software reusability; Fault tolerance; Mobile cloud computing; Reusability; Software design; Software engineering; Systems engineering; Automated acceptance testing; Behavior-driven development; Functional testing; Gherkin; Microservice; Acceptance tests"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-147998355-1"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Symp. Serv.-Oriented Syst. Eng., IEEE SOSE"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 60; Conference name: 9th IEEE International Symposium on Service-Oriented System Engineering, IEEE SOSE 2015; Conference date: 30 March 2015 through 3 April 2015; Conference code: null""
}"	Included	Included	new_screen			2	ScopusSignedIn		A reusable automated acceptance testing architecture for microservices in behavior-driven development	https://ieeexplore.ieee.org/document/7133548	Institute of Electrical and Electronics Engineers Inc.	nan; References
53	Behave	Generating educational mobile applications using UIDPs identified by artificial intelligence techniques	Commercial mobile devices vary in brand, size, and functionalities, but they all allow people to interact with educational applications. In software engineering, application development techniques, approaches, methodologies, and processes (e.g., BBD, FDD, RAD, DDD) are often time consuming, costly, or aim at expert developers - which implies that users outside the software development field (e.g., teachers) need great practice to become experienced application developers. This work proposes an artificial-intelligence-based process for generating educational mobile apps from freehand-generated images. The images' design is based on User Interface Design Pattern (UIDP) representations. As a proof of concept, we introduce EduMatic, an application development tool. To test our process, we assessed Wiki-Comp, an application built with EduMatic, along with three other external educational applications: Khan Academy, Wiki encyclopedia, and Kiwix. According to the evaluation results, Wiki-Comp outstands in functionality, usability, and performance aspects. (c) 2019 Elsevier B.V.	Application programs; Artificial intelligence; Automatic programming; Cost engineering; Image processing; Software design; Application developers; Application development; Application development tools; Artificial intelligence techniques; Automatic code generations; Educational Applications; Mobile development; User interface design patterns; User interfaces	Sanchez-Morales, Laura Nely; Alor-Hernandez, Giner; Rosales-Morales, Viviana Yarel; Cortes-Camarillo, Cesar Augusto; Sanchez-Cervantes, Jose Luis	Computer Standards and Interfaces	https://doi.org/10.1016/j.csi.2019.103407			"@ARTICLE{Sanchez-Morales2020,
    author = ""Sanchez-Morales, Laura Nely and Alor-Hernandez, Giner and Rosales-Morales, Viviana Yarel and Cortes-Camarillo, Cesar Augusto and Sanchez-Cervantes, Jose Luis"",
    title = ""Generating educational mobile applications using UIDPs identified by artificial intelligence techniques"",
    year = ""2020"",
    journal = ""Computer Standards and Interfaces"",
    volume = ""70"",
    doi = ""10.1016/j.csi.2019.103407"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077512434\&doi=10.1016\%2fj.csi.2019.103407\&partnerID=40\&md5=69ec97202b618a7b84c5ed09da7224ed"",
    affiliations = ""Tecnologico Nacional de Mexico/I.T. Orizaba, Oriente 9 \#852 Col. Emiliano Zapata, Orizaba, 94320, Veracruz, Mexico; Centro de Investigacion en Inteligencia Artificial, Universidad Veracruzana, Xalapa, Veracruz, Mexico; CONACYT-Tecnologico Nacional de Mexico/I.T. Orizaba, Mexico"",
    abstract = ""Commercial mobile devices vary in brand, size, and functionalities, but they all allow people to interact with educational applications. In software engineering, application development techniques, approaches, methodologies, and processes (e.g., BBD, FDD, RAD, DDD) are often time consuming, costly, or aim at expert developers - which implies that users outside the software development field (e.g., teachers) need great practice to become experienced application developers. This work proposes an artificial-intelligence-based process for generating educational mobile apps from freehand-generated images. The images' design is based on User Interface Design Pattern (UIDP) representations. As a proof of concept, we introduce EduMatic, an application development tool. To test our process, we assessed Wiki-Comp, an application built with EduMatic, along with three other external educational applications: Khan Academy, Wiki encyclopedia, and Kiwix. According to the evaluation results, Wiki-Comp outstands in functionality, usability, and performance aspects. (c) 2019 Elsevier B.V."",
    author_keywords = ""Automatic code generation; Educational apps; Image processing; Mobile development; User interface design pattern"",
    keywords = ""Application programs; Artificial intelligence; Automatic programming; Cost engineering; Image processing; Software design; Application developers; Application development; Application development tools; Artificial intelligence techniques; Automatic code generations; Educational Applications; Mobile development; User interface design patterns; User interfaces"",
    correspondence_address = ""G. Alor-Hernandez; Tecnologico Nacional de Mexico/I.T. Orizaba, Orizaba, Oriente 9 \#852 Col. Emiliano Zapata, 94320, Mexico; email: galor@ito-depi.edu.mx"",
    publisher = ""Elsevier B.V."",
    issn = ""09205489"",
    coden = ""CSTIE"",
    language = ""English"",
    abbrev_source_title = ""Comput Stand Interfaces"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 11""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Generating educational mobile applications using UIDPs identified by artificial intelligence techniques	https://www.scopus.com/record/display.uri?eid=2-s2.0-85077512434&origin=resultslist&sort=plf-f&src=s&sid=0f5a45986a501fd77d504c7f3a7b4f9c&sot=b&sdt=b&s=TITLE-ABS-KEY%28generating+educational+mobile+applications+using+uidps+identified+by+artificial+intelligence+techniques%29&sl=118&sessionSearchId=0f5a45986a501fd77d504c7f3a7b4f9c&relpos=0	Elsevier B.V.	nan; References; Pages
54	Behave	Concurrent development and verification of an all-software baseband for satellite ground operations	Communication systems are adopting all-software architectures, because of their scalability, extensibility, flexibility, and cost-effectiveness. This paper introduces a concurrent approach to the development and verification of baseband systems for satellite ground operations based on the behaviour-driven development methodology. The open-source GNU Radio development kit is used for developing the software-defined radio baseband signal processing, as well as simulating the satellite and realistic channel impairments. The system performance at the end shows deviations of less than 1 dB with respect to the ideal performance and the Green Book standards specified by the Consultative Committee for Space Data Systems. (c) 2019 John Wiley & Sons, Ltd.	Analog circuits; C (programming language); Cost effectiveness; Ground operations; Open systems; Radio; Radio receivers; Satellites; Signal processing; Software radio; Verification; Base bands; behaviour-driven development; CCSDS; GNU radio; Software-defined radios; Open source software	Mwakyanjala, Moses B.; Nieto-Peroy, Cristobal; Emami, M. Reza; van de Beek, Jaap	International Journal of Satellite Communications and Networking	https://doi.org/10.1002/sat.1336		209 - 227	"@ARTICLE{Mwakyanjala2020209,
    author = ""Mwakyanjala, Moses B. and Nieto-Peroy, Cristobal and Emami, M. Reza and van de Beek, Jaap"",
    title = ""Concurrent development and verification of an all-software baseband for satellite ground operations"",
    year = ""2020"",
    journal = ""International Journal of Satellite Communications and Networking"",
    volume = ""38"",
    number = ""2"",
    pages = ""209 - 227"",
    doi = ""10.1002/sat.1336"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077909388\&doi=10.1002\%2fsat.1336\&partnerID=40\&md5=1bd6c26ba4ded16ceda75297f7ee2bdc"",
    affiliations = ""Onboard Space Systems, Department of Computer Science, Electrical and Space Engineering, Lulea University of Technology, Norrbotten, Sweden; Institute for Aerospace Studies,University of Toronto, ON, Canada; Signals and Systems, Department of Computer Science, Electrical and Space Engineering, Lulea University of Technology, Norrbotten, Sweden"",
    abstract = ""Communication systems are adopting all-software architectures, because of their scalability, extensibility, flexibility, and cost-effectiveness. This paper introduces a concurrent approach to the development and verification of baseband systems for satellite ground operations based on the behaviour-driven development methodology. The open-source GNU Radio development kit is used for developing the software-defined radio baseband signal processing, as well as simulating the satellite and realistic channel impairments. The system performance at the end shows deviations of less than 1 dB with respect to the ideal performance and the Green Book standards specified by the Consultative Committee for Space Data Systems. (c) 2019 John Wiley \& Sons, Ltd."",
    author_keywords = ""baseband; behaviour-driven development; CCSDS; GNU radio; satellite TT\&C; software-defined radio"",
    keywords = ""Analog circuits; C (programming language); Cost effectiveness; Ground operations; Open systems; Radio; Radio receivers; Satellites; Signal processing; Software radio; Verification; Base bands; behaviour-driven development; CCSDS; GNU radio; Software-defined radios; Open source software"",
    correspondence_address = ""M.R. Emami; Onboard Space Systems, Department of Computer Science, Electrical and Space Engineering, Lulea University of Technology, Sweden; email: emami@utias.utoronto.ca"",
    publisher = ""John Wiley and Sons Ltd"",
    issn = ""15420973"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Satell. Commun. Networking"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3""
}"	Included	Included	new_screen			2	ScopusSignedIn		Concurrent development and verification of an all-software baseband for satellite ground operations	https://www.scopus.com/record/display.uri?eid=2-s2.0-85077909388&origin=resultslist&sort=plf-f&src=s&sid=d8273dd7d69762fd4eb1b403c528d51b&sot=b&sdt=b&s=TITLE-ABS-KEY%28concurrent+development+and+verification+of+an+all+software+baseband+for+satellite+ground+operations%29&sl=114&sessionSearchId=d8273dd7d69762fd4eb1b403c528d51b&relpos=0	John Wiley and Sons Ltd	nan; References
55	Behave	Automation Support for Mobile App Quality Assurance – A Tool Landscape	Competitive pressure in app stores, as well as direct and transparent feedback of app store reviews have resulted in an increased demand for outstanding app quality and user experience. At the same time, reduced time-to-market, decreased budgets and time available for quality assurance, and careful user experience design have to be considered. In response, an enormous market for mobile app quality and user experience measurement tools has grown around the mobile app store ecosystems. Developers following lean and agile development approaches continuously produce new features and ready-to-ship software increments. In those settings, budgets for evaluation and familiarization into new tools are very limited. Currently there are alone more than 28 tools and frameworks for functional test automation and more than 16 different device clouds available. For most of the software developing companies, it is impossible to evaluate and test all of them. In this paper, we present a classification in order to help navigation through the mobile app quality tools landscape for easier selection and more targeted evaluation of tools.	Mobile Applications, Quality, Quality Assurance, User Experience	Braun, Susanne; Elberzhager, Frank; Holl, Konstantin	Procedia Computer Science					Excluded	Excluded	new_screen			2						
56	Behave	CIaaS - computational intelligence as a service with Athena	Computational Intelligence (CI) is a sub-branch of Artificial Intelligence (AI) that focus on studying adaptive mechanisms to enable intelligent behavior in complex environments. CI techniques have been successful in solving complex problems in many different knowledge areas. However, despite their usefulness, developing solutions based on CI techniques is not a trivial activity, since it involves the codification/adaptation of algorithms to specific context and problems. In this paper, we present and validate through a quasi-experiment a new paradigm to develop CI-based solutions using a more mature version of Athena (2.0): Computational Intelligence as a Service (CIaaS). Using this tool, both researchers and practitioners can design and evaluate CI-based solutions by dragging and dropping components in a visual environment, in a cloud-based platform. The results of the quasi-experiment suggest that our approach can help researchers to design and evaluate CI-based systems in a simple, reliable and fast way.	Computational intelligence, Tool, Visual programming	Oliveira, Pedro; Santos Neto, Pedro; Britto, Ricardo; Rabêlo, Ricardo; Braga, Ronyerison; Souza, Matheus	Computer Languages, Systems & Structures					Excluded	Excluded	new_screen			2						
57	Behave	Optimizing stock assessment workflows by applying software development methodology	Considering that stock assessment requires iterative work including exploratory calculations and discussion, efficiency in completing projects is the key to a successful contribution to stock management. However, if the production speed of each process of the project is inconsistent, a faster process may be worse than a slower process because a large amount of information produced by a faster process induces human error. To coordinate the production speed of each process, we applied software development methodology to the whole assessment project, including small important tasks such as scenario selection, debugging, and yearly updates. First, we established a continuously integrated (CI) document system that monitors project files and triggers report generation when they are updated. The system is composed of four cloud services: a code hosting service, a cloud computing service, cloud storage, and a website hosting service. Because of the CI document system, all the following iterative work was reflected in the report without creating any unused output. The workflow benefited not only from the collaboration but also from the maintainability of the project because work progress and the discussion remained visible for all collaborators. We discuss the effectiveness of a workflow by Lean manufacturing that allows us to focus on the essential problem of the assessment project. (c) 2021 Elsevier B.V.	Continuous integration;; Lean manufacturing;; Open science;; Reproducible research	Hayashi, Akira; Ichinokawa, Momoko; Kinoshita, Junji; Manabe, Akihiro	Fisheries Research	https://doi.org/10.1016/j.fishres.2021.106108			"@ARTICLE{Hayashi2021,
    author = ""Hayashi, Akira and Ichinokawa, Momoko and Kinoshita, Junji and Manabe, Akihiro"",
    title = ""Optimizing stock assessment workflows by applying software development methodology"",
    year = ""2021"",
    journal = ""Fisheries Research"",
    volume = ""244"",
    doi = ""10.1016/j.fishres.2021.106108"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85118781565\&doi=10.1016\%2fj.fishres.2021.106108\&partnerID=40\&md5=2036c71aae79d8808127392e46fcd711"",
    affiliations = ""Fisheries Resources Institute, Japan Fisheries Research and Education Agency, 2-12-4 Fuku-ura, Kanazawa ward Yokohama, Kanagawa, Japan"",
    abstract = ""Considering that stock assessment requires iterative work including exploratory calculations and discussion, efficiency in completing projects is the key to a successful contribution to stock management. However, if the production speed of each process of the project is inconsistent, a faster process may be worse than a slower process because a large amount of information produced by a faster process induces human error. To coordinate the production speed of each process, we applied software development methodology to the whole assessment project, including small important tasks such as scenario selection, debugging, and yearly updates. First, we established a continuously integrated (CI) document system that monitors project files and triggers report generation when they are updated. The system is composed of four cloud services: a code hosting service, a cloud computing service, cloud storage, and a website hosting service. Because of the CI document system, all the following iterative work was reflected in the report without creating any unused output. The workflow benefited not only from the collaboration but also from the maintainability of the project because work progress and the discussion remained visible for all collaborators. We discuss the effectiveness of a workflow by Lean manufacturing that allows us to focus on the essential problem of the assessment project. (c) 2021 Elsevier B.V."",
    author_keywords = ""Continuous integration; Lean manufacturing; Open science; Reproducible research"",
    correspondence_address = ""A. Hayashi; Fisheries Resources Institute, Japan Fisheries Research and Education Agency, Kanazawa ward Yokohama, 2-12-4 Fuku-ura, Japan; email: hayashi@fixpoint.co.jp"",
    publisher = ""Elsevier B.V."",
    issn = ""01657836"",
    coden = ""FISRD"",
    language = ""English"",
    abbrev_source_title = ""Fish. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 2""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Optimizing stock assessment workflows by applying software development methodology	https://www.scopus.com/record/display.uri?eid=2-s2.0-85118781565&origin=resultslist&sort=plf-f&src=s&sid=09de4a8d28b835e0cea1be205a31eaa7&sot=b&sdt=b&s=TITLE-ABS-KEY%28optimizing+stock+assessment+workflows+by+applying+software+development+methodology%29&sl=97&sessionSearchId=09de4a8d28b835e0cea1be205a31eaa7&relpos=0	Elsevier B.V.	nan; References; Pages
58	Behave	Architecting with microservices: A systematic mapping study	Context A microservice architecture is composed of a set of small services, each running in its own process and communicating with lightweight mechanisms. Many aspects on architecting with microservices are still unexplored and existing research is still far from being crispy clear. Objective We aim at identifying, classifying, and evaluating the state of the art on architecting with microservices from the following perspectives: publication trends, focus of research, and potential for industrial adoption. Method We apply the systematic mapping methodology. We rigorously selected 103 primary studies and we defined and applied a classification framework to them for extracting key information for subsequent analysis. We synthesized the obtained data and produced a clear overview of the state of the art. Results This work contributes with (i) a classification framework for research studies on architecting with microservices, (ii) a systematic map of current research of the field, (iii) an evaluation of the potential for industrial adoption of research results, and (iv) a discussion of emerging findings and implications for future research. Conclusion This study provides a solid, rigorous, and replicable picture of the state of the art on architecting with microservices. Its results can benefit both researchers and practitioners of the field.	Microservices, Software architecture, Systematic mapping study	Di Francesco, Paolo; Lago, Patricia; Malavolta, Ivano	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
59	Behave	Design from detail: Analyzing data from a global day of coderetreat	Context Coderetreats are reflective communities of practice, where participants congregate informally to apply their coding abilities to a clearly defined problem setting with the aim of developing their software design skills. One of these events is the global day of coderetreat (GDCR) involving more than two thousand software developers worldwide. Objective The GDCR provided an opportunity to explore the ways that the coderetreat activity is perceived by its participants as a medium for reflective practice, and to suggest ways that we can enhance the design of coderetreats for improving both the experience and learning outcomes. Method We conducted both quantitative and qualitative surveys from a number of participants in the GDCR to understand how software developers hone their craft in the context of a coderetreat. Results Our study indicates that future coderetreats, particularly those that are likely to attract less experienced developers, should consider providing more structural scaffolding to the initial processes of test driven development. Conclusion We believe that all coderetreats should more explicitly encourage practice and reflection on the four elements of simple design. We suggest a more sustained approach throughout the coderetreat with provision of more structural scaffolding. Accordingly, we have derived a set of recommended practices to make the coderetreat more effective for less experienced developers. (c) 2016 Published by Elsevier B.V.	Scaffolds; Surveying; Surveys; Communities of Practice; Global day of coderetreat; Legacy coderetreat; Qualitative surveys; Recommended practice; Reflective practices; Software developer; Test driven development; Software design	Parsons, David; Susnjak, Teo; Mathrani, Anuradha	Information and Software Technology	https://doi.org/10.1016/j.infsof.2016.03.005		39 - 55	"@ARTICLE{Parsons201639,
    author = ""Parsons, David and Susnjak, Teo and Mathrani, Anuradha"",
    title = ""Design from detail: Analyzing data from a global day of coderetreat"",
    year = ""2016"",
    journal = ""Information and Software Technology"",
    volume = ""75"",
    pages = ""39 - 55"",
    doi = ""10.1016/j.infsof.2016.03.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963972098\&doi=10.1016\%2fj.infsof.2016.03.005\&partnerID=40\&md5=e7999355a83fff09750d1b76bd06ffe0"",
    affiliations = ""Mind Lab by Unitec, 69 Carlton Gore Road, Auckland, 1023, New Zealand; School of Engineering and Advanced Technology, Massey University, Auckland, 102904, New Zealand"",
    abstract = ""Context Coderetreats are reflective communities of practice, where participants congregate informally to apply their coding abilities to a clearly defined problem setting with the aim of developing their software design skills. One of these events is the global day of coderetreat (GDCR) involving more than two thousand software developers worldwide. Objective The GDCR provided an opportunity to explore the ways that the coderetreat activity is perceived by its participants as a medium for reflective practice, and to suggest ways that we can enhance the design of coderetreats for improving both the experience and learning outcomes. Method We conducted both quantitative and qualitative surveys from a number of participants in the GDCR to understand how software developers hone their craft in the context of a coderetreat. Results Our study indicates that future coderetreats, particularly those that are likely to attract less experienced developers, should consider providing more structural scaffolding to the initial processes of test driven development. Conclusion We believe that all coderetreats should more explicitly encourage practice and reflection on the four elements of simple design. We suggest a more sustained approach throughout the coderetreat with provision of more structural scaffolding. Accordingly, we have derived a set of recommended practices to make the coderetreat more effective for less experienced developers. (c) 2016 Published by Elsevier B.V."",
    author_keywords = ""Global day of coderetreat; Legacy coderetreat; Simple design; Survey; Test driven development"",
    keywords = ""Scaffolds; Surveying; Surveys; Communities of Practice; Global day of coderetreat; Legacy coderetreat; Qualitative surveys; Recommended practice; Reflective practices; Software developer; Test driven development; Software design"",
    correspondence_address = ""A. Mathrani; School of Engineering and Advanced Technology, Massey University, Auckland, 102904, New Zealand; email: A.S.Mathrani@massey.ac.nz"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Design from detail: Analyzing data from a global day of coderetreat	https://www.scopus.com/record/display.uri?eid=2-s2.0-84963972098&origin=resultslist&sort=plf-f&src=s&sid=dd4306a4b0a56472e548146a01d3ed52&sot=b&sdt=b&s=TITLE-ABS-KEY%28design+from+detail+analyzing+data+from+a+global+day+of+coderetreat%29&sl=81&sessionSearchId=dd4306a4b0a56472e548146a01d3ed52&relpos=0	Elsevier B.V.	nan; References
60	Behave	A multi-case study of agile requirements engineering and the use of test cases as requirements	Context It is an enigma that agile projects can succeed ‘without requirements’ when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases. Objective We have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies. Method We performed an iterative case study at three companies and collected data through 14 interviews and two focus groups. Results The use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements practice, namely de facto, behaviour-driven, story-test driven, stand-alone strict and stand-alone manual for which the application of the practice varies concerning the time frame of requirements documentation, the requirements format, the extent to which the test cases are a machine executable specification and the use of tools which provide specific support for the practice of using test cases as requirements. Conclusions The findings provide empirical insight into how agile development projects manage and communicate requirements. The identified variants of the practice of using test cases as requirements can be used to perform in-depth investigations into agile requirements engineering. Practitioners can use the provided recommendations as a guide in designing and improving their agile requirements practices based on project characteristics such as number of stakeholders and rate of change. © 2016 Elsevier B.V.		Bjarnason E., Unterkalmsteiner M., Borg M., Engström E.	Information and Software Technology					Excluded	Excluded	new_screen			2						
61	Behave	NLP-assisted software testing: A systematic mapping of the literature	"Context: To reduce manual effort of extracting test cases from natural-language requirements, many approaches based on Natural Language Processing (NLP) have been proposed in the literature. Given the large amount of approaches in this area, and since many practitioners are eager to utilize such techniques, it is important to synthesize and provide an overview of the state-of-the-art in this area. Objective: Our objective is to summarize the state-of-the-art in NLP-assisted software testing which could benefit practitioners to potentially utilize those NLP-based techniques. Moreover, this can benefit researchers in providing an overview of the research landscape. Method: To address the above need, we conducted a survey in the form of a systematic literature mapping (classification). After compiling an initial pool of 95 papers, we conducted a systematic voting, and our final pool included 67 technical papers. Results: This review paper provides an overview of the contribution types presented in the papers, types of NLP approaches used to assist software testing, types of required input requirements, and a review of tool support in this area. Some key results we have detected are: (1) only four of the 38 tools (11%) presented in the papers are available for download; (2) a larger ratio of the papers (30 of 67) provided a shallow exposure to the NLP aspects (almost no details). Conclusion: This paper would benefit both practitioners and researchers by serving as an ""index"" to the body of knowledge in this area. The results could help practitioners utilizing the existing NLP-based techniques; this in turn reduces the cost of test-case design and decreases the amount of human resources spent on test activities. After sharing this review with some of our industrial collaborators, initial insights show that this review can indeed be useful and beneficial to practitioners. (c) 2020 Elsevier B.V."	Mapping; Natural language processing systems; Body of knowledge; Industrial collaborators; Large amounts; NAtural language processing; Natural language requirements; Review papers; State of the art; Systematic mapping; Software testing	Garousi, Vahid; Bauer, Sara; Felderer, Michael	Information and Software Technology	https://doi.org/10.1016/j.infsof.2020.106321			"@ARTICLE{Garousi2020,
    author = ""Garousi, Vahid and Bauer, Sara and Felderer, Michael"",
    title = ""NLP-assisted software testing: A systematic mapping of the literature"",
    year = ""2020"",
    journal = ""Information and Software Technology"",
    volume = ""126"",
    doi = ""10.1016/j.infsof.2020.106321"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084949953\&doi=10.1016\%2fj.infsof.2020.106321\&partnerID=40\&md5=0ff581bcf04c671a8156eb239a1d8a58"",
    affiliations = ""Queen's University Belfast, Northern Ireland, United Kingdom; University of Innsbruck, Austria; Blekinge Institute of Technology, Sweden"",
    abstract = ""Context: To reduce manual effort of extracting test cases from natural-language requirements, many approaches based on Natural Language Processing (NLP) have been proposed in the literature. Given the large amount of approaches in this area, and since many practitioners are eager to utilize such techniques, it is important to synthesize and provide an overview of the state-of-the-art in this area. Objective: Our objective is to summarize the state-of-the-art in NLP-assisted software testing which could benefit practitioners to potentially utilize those NLP-based techniques. Moreover, this can benefit researchers in providing an overview of the research landscape. Method: To address the above need, we conducted a survey in the form of a systematic literature mapping (classification). After compiling an initial pool of 95 papers, we conducted a systematic voting, and our final pool included 67 technical papers. Results: This review paper provides an overview of the contribution types presented in the papers, types of NLP approaches used to assist software testing, types of required input requirements, and a review of tool support in this area. Some key results we have detected are: (1) only four of the 38 tools (11\%) presented in the papers are available for download; (2) a larger ratio of the papers (30 of 67) provided a shallow exposure to the NLP aspects (almost no details). Conclusion: This paper would benefit both practitioners and researchers by serving as an ""index"" to the body of knowledge in this area. The results could help practitioners utilizing the existing NLP-based techniques; this in turn reduces the cost of test-case design and decreases the amount of human resources spent on test activities. After sharing this review with some of our industrial collaborators, initial insights show that this review can indeed be useful and beneficial to practitioners. (c) 2020 Elsevier B.V."",
    author_keywords = ""Natural Language Processing (NLP); Software testing; Systematic literature mapping; Systematic literature review"",
    keywords = ""Mapping; Natural language processing systems; Body of knowledge; Industrial collaborators; Large amounts; NAtural language processing; Natural language requirements; Review papers; State of the art; Systematic mapping; Software testing"",
    correspondence_address = ""V. Garousi; Queen's University Belfast, Northern Ireland, United Kingdom; email: v.garousi@qub.ac.uk"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 48; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		NLP-assisted software testing: A systematic mapping of the literature	https://www.scopus.com/record/display.uri?eid=2-s2.0-85084949953&origin=resultslist&sort=plf-f&src=s&sid=4d5f1a59e5352a20571f1e9e7ead15ad&sot=b&sdt=b&s=TITLE-ABS-KEY%28nlp+assisted+software+testing+a+systematic+mapping+of+the+literature%29&sl=83&sessionSearchId=4d5f1a59e5352a20571f1e9e7ead15ad&relpos=0	Elsevier B.V.	nan; References; Pages
62	Behave	Speed up BDD for safety verification in agile development: a partially replicated controlled experiment	Context: Agile development has aroused interest in developing safety-critical systems. Problem statement: However, an increasingly changing architecture makes traditional safety assurance, especially safety analysis and verification, difficult to work. Recently, we proposed STPA-BDD (System-Theoretic Process Analysis-Behaviour Driven Development) for safety analysis and verification in agile development. It showed a good communication effectiveness in a controlled experiment with 44 undergraduate students. However, productivity, test thoroughness and fault detection effectiveness show no statistically significant difference in comparison with UAT (User Acceptance Testing). Objective: In this article, we aim to speed up STPA-BDD through improving productivity, test thoroughness and fault detection effectiveness of STPA-BDD. We develop a semi-automated tool to speed up BDD for safety verification. Method: We evaluate the semi-automated tool concerning productivity, test thoroughness and fault detection effectiveness in a replicated experiment with 11 additional undergraduate students by comparing them with the results from 22 students in the original experiment. Results: The results turn out that productivity is more than 7 times greater, while test thoroughness is more than 1.5 times greater and fault detection effectiveness is more than 2 times greater by using this semi-automated tool than without using it. Conclusion: BDD for safety verification has beed sped up by using this semi-automated tool. Using professionals instead of students as subjects might provide a clearer impact.	agile development;  controlled experiment;  safety verification	Wang, Yang; Degutis, Daniel Ryan; Wagner, Stefan	XP '18: Proceedings of the 19th International Conference on Agile Software Development: Companion	https://doi.org/10.1145/3234152.3234181		1-8	"@inproceedings{10.1145/3234152.3234181,
    author = ""Wang, Yang and Degutis, Daniel Ryan and Wagner, Stefan"",
    title = ""Speed up BDD for safety verification in agile development: a partially replicated controlled experiment"",
    year = ""2018"",
    isbn = ""9781450364225"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3234152.3234181"",
    doi = ""10.1145/3234152.3234181"",
    abstract = ""Context: Agile development has aroused interest in developing safety-critical systems. Problem statement: However, an increasingly changing architecture makes traditional safety assurance, especially safety analysis and verification, difficult to work. Recently, we proposed STPA-BDD (System-Theoretic Process Analysis-Behaviour Driven Development) for safety analysis and verification in agile development. It showed a good communication effectiveness in a controlled experiment with 44 undergraduate students. However, productivity, test thoroughness and fault detection effectiveness show no statistically significant difference in comparison with UAT (User Acceptance Testing). Objective: In this article, we aim to speed up STPA-BDD through improving productivity, test thoroughness and fault detection effectiveness of STPA-BDD. We develop a semi-automated tool to speed up BDD for safety verification. Method: We evaluate the semi-automated tool concerning productivity, test thoroughness and fault detection effectiveness in a replicated experiment with 11 additional undergraduate students by comparing them with the results from 22 students in the original experiment. Results: The results turn out that productivity is more than 7 times greater, while test thoroughness is more than 1.5 times greater and fault detection effectiveness is more than 2 times greater by using this semi-automated tool than without using it. Conclusion: BDD for safety verification has beed sped up by using this semi-automated tool. Using professionals instead of students as subjects might provide a clearer impact."",
    booktitle = ""Proceedings of the 19th International Conference on Agile Software Development: Companion"",
    articleno = ""12"",
    numpages = ""8"",
    keywords = ""agile development, controlled experiment, safety verification"",
    location = ""Porto, Portugal"",
    series = ""XP '18""
}"	Included	Included	new_screen			2	ScopusSignedIn		Speed up BDD for Safety Verification in Agile Development: A Partially Replicated Controlled Experiment	https://dl.acm.org/doi/10.1145/3234152.3234181	Association for Computing Machinery	nan; References
63	Behave	Combining STPA and BDD for safety analysis and verification in agile development	Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment.	agile development;  safety verification;  safety-critical systems	Wang, Yang; Wagner, Stefan	ICSE '18: Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings	https://doi.org/10.1145/3183440.3194973		286-287	"@inproceedings{10.1145/3183440.3194973,
    author = ""Wang, Yang and Wagner, Stefan"",
    title = ""Combining STPA and BDD for safety analysis and verification in agile development"",
    year = ""2018"",
    isbn = ""9781450356633"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3183440.3194973"",
    doi = ""10.1145/3183440.3194973"",
    abstract = ""Agile development is in widespread use, even in safety-critical domains. However, there is a lack of an appropriate safety analysis and verification method in agile development. In this poster, we propose the use of Behavior Driven Development for safety verification with System-Theoretic Process Analysis for safety analysis in agile development. It shows a good capability on communication effectiveness through a preliminary controlled experiment."",
    booktitle = ""Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings"",
    pages = ""286-287"",
    numpages = ""2"",
    keywords = ""agile development, safety verification, safety-critical systems"",
    location = ""Gothenburg, Sweden"",
    series = ""ICSE '18""
}"	Included	Included	new_screen			2	ScopusSignedIn		Combining STPA and BDD for safety analysis and verification in agile development: A controlled experiment	https://dl.acm.org/doi/10.1145/3183440.3194973	Association for Computing Machinery	nan; References
64	Behave	Is business domain language support beneficial for creating test case specifications: A controlled experiment	Context: Behavior Driven Development (BDD), widely used in modern software development, enables easy creation of acceptance test case specifications and serves as a communication basis between business- and technical-oriented stakeholders. BDD is largely facilitated through simple domain specific languages (DSL) and usually restricted to technical test domain concepts. Integrating business domain concepts to implement a ubiquitous language for all members of the development team is an appealing test language improvement issue. But the integration of business domain concepts into BDD toolkits has so far not been investigated. Objective: The objective of the study presented in this paper is to examine whether supporting the ubiquitous language features inside a DSL, by extending a DSL with business domain concepts, is beneficial over using a DSL without those concepts. In the context of the study, benefit is measured in terms of perceived quality, creation time and length of the created test case specifications. In addition, we analyze if participants feel supported when using predefined business domain concepts. Method: We investigate the creation of test case specifications, similar to BDD, in a controlled student experiment performed with graduate students based on a novel platform for DSL experimentation. The experiment was carried out by two groups, each solving a similar comparable test case, one with the simple DSL, the other one with the DSL that includes business domain concepts. A crossover design was chosen for evaluating the perceived quality of the resulting specifications. Results: Our experiment indicates that a business domain aware language allows significant faster creation of documents without lowering the perceived quality. Subjects felt better supported by the DSL with business concepts. Conclusion: Based on our findings we propose that existing BDD toolkits could be further improved by integrating business domain concepts. (c) 2016 Elsevier B.V.	Boolean functions; Computer programming languages; Problem oriented languages; Software design; Software testing; Specifications; Students; Testing; Behavior driven development; Controlled experiment; Development teams; Domain specific languages; Language features; Perceived quality; Student experiments; Test case specifications; Acceptance tests	Haser, Florian; Felderer, Michael; Breu, Ruth	Information and Software Technology	https://doi.org/10.1016/j.infsof.2016.07.001		52 - 62	"@ARTICLE{Haser201652,
    author = ""Haser, Florian and Felderer, Michael and Breu, Ruth"",
    title = ""Is business domain language support beneficial for creating test case specifications: A controlled experiment"",
    year = ""2016"",
    journal = ""Information and Software Technology"",
    volume = ""79"",
    pages = ""52 - 62"",
    doi = ""10.1016/j.infsof.2016.07.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84990036753\&doi=10.1016\%2fj.infsof.2016.07.001\&partnerID=40\&md5=23042425f7a84d0ada295d7b9e0547d3"",
    affiliations = ""University of Innsbruck, Technikerstr. 21a, A-6020 Innsbruck, Austria"",
    abstract = ""Context: Behavior Driven Development (BDD), widely used in modern software development, enables easy creation of acceptance test case specifications and serves as a communication basis between business- and technical-oriented stakeholders. BDD is largely facilitated through simple domain specific languages (DSL) and usually restricted to technical test domain concepts. Integrating business domain concepts to implement a ubiquitous language for all members of the development team is an appealing test language improvement issue. But the integration of business domain concepts into BDD toolkits has so far not been investigated. Objective: The objective of the study presented in this paper is to examine whether supporting the ubiquitous language features inside a DSL, by extending a DSL with business domain concepts, is beneficial over using a DSL without those concepts. In the context of the study, benefit is measured in terms of perceived quality, creation time and length of the created test case specifications. In addition, we analyze if participants feel supported when using predefined business domain concepts. Method: We investigate the creation of test case specifications, similar to BDD, in a controlled student experiment performed with graduate students based on a novel platform for DSL experimentation. The experiment was carried out by two groups, each solving a similar comparable test case, one with the simple DSL, the other one with the DSL that includes business domain concepts. A crossover design was chosen for evaluating the perceived quality of the resulting specifications. Results: Our experiment indicates that a business domain aware language allows significant faster creation of documents without lowering the perceived quality. Subjects felt better supported by the DSL with business concepts. Conclusion: Based on our findings we propose that existing BDD toolkits could be further improved by integrating business domain concepts. (c) 2016 Elsevier B.V."",
    author_keywords = ""Behavior driven development; Controlled experiment; Domain Specific Languages (DSL); Software testing; Student experiment"",
    keywords = ""Boolean functions; Computer programming languages; Problem oriented languages; Software design; Software testing; Specifications; Students; Testing; Behavior driven development; Controlled experiment; Development teams; Domain specific languages; Language features; Perceived quality; Student experiments; Test case specifications; Acceptance tests"",
    correspondence_address = ""F. Haser; University of Innsbruck, Technikerstr. 21a, A-6020 Innsbruck, Austria; email: florian.haeser@uibk.ac.at"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 20""
}"	Included	Included	new_screen			2	ScopusSignedIn		Is business domain language support beneficial for creating test case specifications: A controlled experiment	https://www.scopus.com/record/display.uri?eid=2-s2.0-84990036753&origin=resultslist&sort=plf-f&src=s&sid=37678de4fe1a574ec5170c2037ac93b1&sot=b&sdt=b&s=TITLE-ABS-KEY%28is+business+domain+language+support+beneficial+for+creating+test+case+specifications+a+controlled+experiment%29&sl=123&sessionSearchId=37678de4fe1a574ec5170c2037ac93b1&relpos=0	Elsevier B.V.	nan; References
65	Behave	Supporting refactoring of BDD specifications--An empirical study	Context: Behavior-driven development (BDD) is a variant of test-driven development where specifications are described in a structured domain-specific natural language. Although refactoring is a crucial activity of BDD, little research is available on the topic. Objective: To support practitioners in refactoring BDD specifications by (1) proposing semi-automated approaches to identify refactoring candidates; (2) defining refactoring techniques for BDD specifications; and (3) evaluating the proposed identification approaches in an industry context. Method: Using Action Research, we have developed an approach for identifying refactoring candidates in BDD specifications based on two measures of similarity and applied the approach in two projects of a large software organization. The accuracy of the measures for identifying refactoring candidates was then evaluated against an approach based on machine learning and a manual approach based on practitioner perception. Results: We proposed two measures of similarity to support the identification of refactoring candidates in a BDD specification base; (1) normalized compression similarity (NCS) and (2) similarity ratio (SR). A semi-automated approach based on NCS and SR was developed and applied to two industrial cases to identify refactoring candidates. Our results show that our approach can identify candidates for refactoring 6o times faster than a manual approach. Our results furthermore showed that our measures accurately identified refactoring candidates compared with a manual identification by software practitioners and outperformed an ML-based text classification approach. We also described four types of refactoring techniques applicable to BDD specifications; merging candidates, restructuring candidates, deleting duplicates, and renaming specification titles. Conclusion: Our results show that NCS and SR can help practitioners in accurately identifying BDD specifications that are suitable candidates for refactoring, which also decreases the time for identifying refactoring candidates. (c) 2021 The Authors	Automation; Boolean functions; Classification (of information); Natural language processing systems; Text processing; Automated approach; Empirical studies; Identification approach; Manual identification; Software organization; Software practitioners; Test driven development; Text classification; Specifications	Irshad, Mohsin; Borstler, Jurgen; Petersen, Kai	Information and Software Technology	https://doi.org/10.1016/j.infsof.2021.106717			"@ARTICLE{Irshad2022,
    author = ""Irshad, Mohsin and Borstler, Jurgen and Petersen, Kai"",
    title = ""Supporting refactoring of BDD specifications--An empirical study"",
    year = ""2022"",
    journal = ""Information and Software Technology"",
    volume = ""141"",
    doi = ""10.1016/j.infsof.2021.106717"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85113689195\&doi=10.1016\%2fj.infsof.2021.106717\&partnerID=40\&md5=239cf67a7d78813f33693a1702143169"",
    affiliations = ""Blekinge Institute of Technology, Karlskrona, Sweden; Ericsson AB, Karlskrona, Sweden"",
    abstract = ""Context: Behavior-driven development (BDD) is a variant of test-driven development where specifications are described in a structured domain-specific natural language. Although refactoring is a crucial activity of BDD, little research is available on the topic. Objective: To support practitioners in refactoring BDD specifications by (1) proposing semi-automated approaches to identify refactoring candidates; (2) defining refactoring techniques for BDD specifications; and (3) evaluating the proposed identification approaches in an industry context. Method: Using Action Research, we have developed an approach for identifying refactoring candidates in BDD specifications based on two measures of similarity and applied the approach in two projects of a large software organization. The accuracy of the measures for identifying refactoring candidates was then evaluated against an approach based on machine learning and a manual approach based on practitioner perception. Results: We proposed two measures of similarity to support the identification of refactoring candidates in a BDD specification base; (1) normalized compression similarity (NCS) and (2) similarity ratio (SR). A semi-automated approach based on NCS and SR was developed and applied to two industrial cases to identify refactoring candidates. Our results show that our approach can identify candidates for refactoring 6o times faster than a manual approach. Our results furthermore showed that our measures accurately identified refactoring candidates compared with a manual identification by software practitioners and outperformed an ML-based text classification approach. We also described four types of refactoring techniques applicable to BDD specifications; merging candidates, restructuring candidates, deleting duplicates, and renaming specification titles. Conclusion: Our results show that NCS and SR can help practitioners in accurately identifying BDD specifications that are suitable candidates for refactoring, which also decreases the time for identifying refactoring candidates. (c) 2021 The Authors"",
    author_keywords = ""BDD; Behavior-driven development; Normalized Compression Distance (NCD); Normalized Compression Similarity (NCS); Refactoring; Reuse; Similarity ratio (SR); Specifications; Testing"",
    keywords = ""Automation; Boolean functions; Classification (of information); Natural language processing systems; Text processing; Automated approach; Empirical studies; Identification approach; Manual identification; Software organization; Software practitioners; Test driven development; Text classification; Specifications"",
    correspondence_address = ""M. Irshad; Blekinge Institute of Technology, Karlskrona, Sweden; email: mohsin.irshad@bth.se"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; All Open Access, Green Open Access, Hybrid Gold Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Supporting refactoring of BDD specifications—An empirical study	https://www.scopus.com/inward/record.uri?eid=2-s2.0-85113689195&doi=10.1016%2fj.infsof.2021.106717&partnerID=40&md5=239cf67a7d78813f33693a1702143169	Elsevier B.V.	nan; References; Pages
66	Behave	B-Refactoring: Automatic test code refactoring to improve dynamic analysis	Context: Developers design test suites to verify that software meets its expected behaviors. Many dynamic analysis techniques are performed on the exploitation of execution traces from test cases. In practice, one test case may imply various behaviors. However, the execution of a test case only yields one trace, which can hide the others. Objective: In this article, we propose a new technique of test code refactoring, called B-Refactoring. The idea behind B-Refactoring is to split a test case into small test fragments, which cover a simpler part of the control flow to provide better support for dynamic analysis. Method: For a given dynamic analysis technique, B-Refactoring monitors the execution of test cases and constructs small test cases without loss of the testability. We apply B-Refactoring to assist two existing analysis tasks: automatic repair of if-condition bugs and automatic analysis of exception contracts. Results: Experimental results show that B-Refactoring can effectively improve the execution traces of the test suite. Real-world bugs that could not be previously fixed with the original test suites are fixed after applying B-Refactoring; meanwhile, exception contracts are better verified via applying B-Refactoring to original test suites. Conclusions: We conclude that applying B-Refactoring improves the execution traces of test cases for dynamic analysis. This improvement can enhance existing dynamic analysis tasks. (c) 2016 Elsevier B.V. All rights reserved.	Information systems; Software engineering; Automatic analysis; Control flows; Design tests; Dynamic analysis techniques; Execution trace; Real-world; Refactorings; Testability; Software testing	Xuan, Jifeng; Cornu, Benoit; Martinez, Matias; Baudry, Benoit; Seinturier, Lionel; Monperrus, Martin	Information and Software Technology	https://doi.org/10.1016/j.infsof.2016.04.016		65 - 80	"@ARTICLE{Xuan201665,
    author = ""Xuan, Jifeng and Cornu, Benoit and Martinez, Matias and Baudry, Benoit and Seinturier, Lionel and Monperrus, Martin"",
    title = ""B-Refactoring: Automatic test code refactoring to improve dynamic analysis"",
    year = ""2016"",
    journal = ""Information and Software Technology"",
    volume = ""76"",
    pages = ""65 - 80"",
    doi = ""10.1016/j.infsof.2016.04.016"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84965136564\&doi=10.1016\%2fj.infsof.2016.04.016\&partnerID=40\&md5=7f80f2bb795e4b7ba2c1f6d6e0978c89"",
    affiliations = ""State Key Lab. of Software Engineering, Wuhan University, China; University of Lille, France; INRIA, France"",
    abstract = ""Context: Developers design test suites to verify that software meets its expected behaviors. Many dynamic analysis techniques are performed on the exploitation of execution traces from test cases. In practice, one test case may imply various behaviors. However, the execution of a test case only yields one trace, which can hide the others. Objective: In this article, we propose a new technique of test code refactoring, called B-Refactoring. The idea behind B-Refactoring is to split a test case into small test fragments, which cover a simpler part of the control flow to provide better support for dynamic analysis. Method: For a given dynamic analysis technique, B-Refactoring monitors the execution of test cases and constructs small test cases without loss of the testability. We apply B-Refactoring to assist two existing analysis tasks: automatic repair of if-condition bugs and automatic analysis of exception contracts. Results: Experimental results show that B-Refactoring can effectively improve the execution traces of the test suite. Real-world bugs that could not be previously fixed with the original test suites are fixed after applying B-Refactoring; meanwhile, exception contracts are better verified via applying B-Refactoring to original test suites. Conclusions: We conclude that applying B-Refactoring improves the execution traces of test cases for dynamic analysis. This improvement can enhance existing dynamic analysis tasks. (c) 2016 Elsevier B.V. All rights reserved."",
    keywords = ""Information systems; Software engineering; Automatic analysis; Control flows; Design tests; Dynamic analysis techniques; Execution trace; Real-world; Refactorings; Testability; Software testing"",
    correspondence_address = ""J. Xuan; State Key Lab. of Software Engineering, Wuhan University, China; email: jxuan@whu.edu.cn"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 25; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		B-Refactoring: Automatic test code refactoring to improve dynamic analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-84965136564&origin=resultslist&sort=plf-f&src=s&sid=e44c89f0100bb61b0dae9e79737701ae&sot=b&sdt=b&s=TITLE-ABS-KEY%28b+refactoring+automatic+test+code+refactoring+to+improve+dynamic+analysis%29&sl=88&sessionSearchId=e44c89f0100bb61b0dae9e79737701ae&relpos=0	Elsevier B.V.	nan; References
67	Behave	Adapting Behavior Driven Development (BDD) for large-scale software systems	Context: Large-scale software projects require interaction between many stakeholders. Behavior-driven development (BDD) facilitates collaboration between stakeholders, and an adapted BDD process can help improve cooperation in a large-scale project. Objective: The objective of this study is to propose and empirically evaluate a BDD based process adapted for large-scale projects. Method: A technology transfer model was used to propose a BDD based process for large-scale projects. We conducted six workshop sessions to understand the challenges and benefits of BDD. Later, an industrial evaluation was performed for the process with the help of practitioners. Results: From our investigations, understanding of a business aspect of requirements, their improved quality, a guide to system-level use-cases, reuse of artifacts, and help for test organization are found as benefits of BDD. Practitioners identified the following challenges: specification and ownership of behaviors, adoption of new tools, the software projects’ scale, and versioning of behaviors. We proposed a process to address these challenges and evaluated the process with the help of practitioners. Conclusion: The evaluation proved that BDD could be adapted and used to facilitate interaction in large-scale software projects in the software industry. The feedback from the practitioners helped in improving the proposed process.	Behavior-driven, Large-scale, BDD, Software processes, System of systems	Irshad, Mohsin; Britto, Ricardo; Petersen, Kai	Journal of Systems and Software					Included	Included	new_screen			2						
68	Behave	Design, monitoring, and testing of microservices systems: The practitioners' perspective	Context: Microservices Architecture (MSA) has received significant attention in the software industry. However, little empirical evidence exists on design, monitoring, and testing of microservices systems. Objective: This research aims to gain a deep understanding of how microservices systems are designed, monitored, and tested in the industry. Methods: A mixed-methods study was conducted with 106 survey responses and 6 interviews from microservices practitioners. Results: The main findings are: (1) a combination of domain-driven design and business capability is the most used strategy to decompose an application into microservices, (2) over half of the participants used architecture evaluation and architecture implementation when designing microservices systems, (3) API gateway and Backend for frontend patterns are the most used MSA patterns, (4) resource usage and load balancing as monitoring metrics, log management and exception tracking as monitoring practices are widely used, (5) unit and end-to-end testing are the most used testing strategies, and (6) the complexity of microservices systems poses challenges for their design, monitoring, and testing, for which there are no dedicated solutions. Conclusions: Our findings reveal that more research is needed to (1) deal with microservices complexity at the design level, (2) handle security in microservices systems, and (3) address the monitoring and testing challenges through dedicated solutions. (c) 2021 Elsevier Inc.	Application programming interfaces (API); Software engineering; Architecture evaluation; Design levels; Domain-driven designs; Log managements; Monitoring metrics; Resource usage; Software industry; Testing strategies; Monitoring	Waseem, Muhammad; Liang, Peng; Shahin, Mojtaba; Di Salle, Amleto; Marquez, Gaston	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2021.111061			"@ARTICLE{Waseem2021,
    author = ""Waseem, Muhammad and Liang, Peng and Shahin, Mojtaba and Di Salle, Amleto and Marquez, Gaston"",
    title = ""Design, monitoring, and testing of microservices systems: The practitioners' perspective"",
    year = ""2021"",
    journal = ""Journal of Systems and Software"",
    volume = ""182"",
    doi = ""10.1016/j.jss.2021.111061"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85114322403\&doi=10.1016\%2fj.jss.2021.111061\&partnerID=40\&md5=5bf38769ad133522debb4edb71725408"",
    affiliations = ""School of Computer Science, Wuhan University, Wuhan, 430072, China; Department of Software Systems and Cybersecurity, Faculty of Information Technology, Monash University, Melbourne, 3800, Australia; Department of Information Engineering, Computer Science and Mathematics, University of L'Aquila, I-67100 L'Aquila, Italy; Department of Electronics and Informatics, Federico Santa Maria Technical University, 4030000 Concepcion, Chile"",
    abstract = ""Context: Microservices Architecture (MSA) has received significant attention in the software industry. However, little empirical evidence exists on design, monitoring, and testing of microservices systems. Objective: This research aims to gain a deep understanding of how microservices systems are designed, monitored, and tested in the industry. Methods: A mixed-methods study was conducted with 106 survey responses and 6 interviews from microservices practitioners. Results: The main findings are: (1) a combination of domain-driven design and business capability is the most used strategy to decompose an application into microservices, (2) over half of the participants used architecture evaluation and architecture implementation when designing microservices systems, (3) API gateway and Backend for frontend patterns are the most used MSA patterns, (4) resource usage and load balancing as monitoring metrics, log management and exception tracking as monitoring practices are widely used, (5) unit and end-to-end testing are the most used testing strategies, and (6) the complexity of microservices systems poses challenges for their design, monitoring, and testing, for which there are no dedicated solutions. Conclusions: Our findings reveal that more research is needed to (1) deal with microservices complexity at the design level, (2) handle security in microservices systems, and (3) address the monitoring and testing challenges through dedicated solutions. (c) 2021 Elsevier Inc."",
    author_keywords = ""Design; Industrial survey; Microservices architecture; Monitoring; Testing"",
    keywords = ""Application programming interfaces (API); Software engineering; Architecture evaluation; Design levels; Domain-driven designs; Log managements; Monitoring metrics; Resource usage; Software industry; Testing strategies; Monitoring"",
    correspondence_address = ""P. Liang; School of Computer Science, Wuhan University, China; email: liangp@whu.edu.cn"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 62; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Design, monitoring, and testing of microservices systems: The practitioners’ perspective	https://www.scopus.com/inward/record.uri?eid=2-s2.0-85114322403&doi=10.1016%2fj.jss.2021.111061&partnerID=40&md5=5bf38769ad133522debb4edb71725408	Elsevier Inc.	nan; References; Pages
69	Behave	Big Data analytics in Agile software development: A systematic mapping study	Context: Over the last decade, Agile methods have changed the software development process in an unparalleled way and with the increasing popularity of Big Data, optimizing development cycles through data analytics is becoming a commodity. Objective: Although a myriad of research exists on software analytics as well as on Agile software development (ASD) practice on itself, there exists no systematic overview of the research done on ASD from a data analytics perspective. Therefore, the objective of this work is to make progress by linking ASD with Big Data analytics (BDA). Method: As the primary method to find relevant literature on the topic, we performed manual search and snowballing on papers published between 2011 and 2019. Results: In total, 88 primary studies were selected and analyzed. Our results show that BDA is employed throughout the whole ASD lifecycle. The results reveal that data-driven software development is focused on the following areas: code repository analytics, defects/bug fixing, testing, project management analytics, and application usage analytics. Conclusions: As BDA and ASD are fast-developing areas, improving the productivity of software development teams is one of the most important objectives BDA is facing in the industry. This study provides scholars with information about the state of software analytics research and the current trends as well as applications in the business environment. Whereas, thanks to this literature review, practitioners should be able to understand better how to obtain actionable insights from their software artifacts and on which aspects of data analytics to focus when investing in such initiatives. (c) 2020 Elsevier B.V.	Advanced Analytics; Application programs; Big data; Data Analytics; Life cycle; Project management; Software testing; Agile software development; Business environments; Development cycle; Literature reviews; Software artifacts; Software development process; Software development teams; Systematic mapping studies; Software design	Biesialska, Katarzyna; Franch, Xavier; Muntes-Mulero, Victor	Information and Software Technology	https://doi.org/10.1016/j.infsof.2020.106448			"@ARTICLE{Biesialska2021,
    author = ""Biesialska, Katarzyna and Franch, Xavier and Muntes-Mulero, Victor"",
    title = ""Big Data analytics in Agile software development: A systematic mapping study"",
    year = ""2021"",
    journal = ""Information and Software Technology"",
    volume = ""132"",
    doi = ""10.1016/j.infsof.2020.106448"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095581407\&doi=10.1016\%2fj.infsof.2020.106448\&partnerID=40\&md5=606562623febf85aeca120d861b6ae20"",
    affiliations = ""Universitat Politecnica de Catalunya, Barcelona, Spain; Beawre Digital S.L., Barcelona, Spain"",
    abstract = ""Context: Over the last decade, Agile methods have changed the software development process in an unparalleled way and with the increasing popularity of Big Data, optimizing development cycles through data analytics is becoming a commodity. Objective: Although a myriad of research exists on software analytics as well as on Agile software development (ASD) practice on itself, there exists no systematic overview of the research done on ASD from a data analytics perspective. Therefore, the objective of this work is to make progress by linking ASD with Big Data analytics (BDA). Method: As the primary method to find relevant literature on the topic, we performed manual search and snowballing on papers published between 2011 and 2019. Results: In total, 88 primary studies were selected and analyzed. Our results show that BDA is employed throughout the whole ASD lifecycle. The results reveal that data-driven software development is focused on the following areas: code repository analytics, defects/bug fixing, testing, project management analytics, and application usage analytics. Conclusions: As BDA and ASD are fast-developing areas, improving the productivity of software development teams is one of the most important objectives BDA is facing in the industry. This study provides scholars with information about the state of software analytics research and the current trends as well as applications in the business environment. Whereas, thanks to this literature review, practitioners should be able to understand better how to obtain actionable insights from their software artifacts and on which aspects of data analytics to focus when investing in such initiatives. (c) 2020 Elsevier B.V."",
    author_keywords = ""Agile software development; Artificial intelligence; Data analytics; Literature review; Machine learning; Software analytics"",
    keywords = ""Advanced Analytics; Application programs; Big data; Data Analytics; Life cycle; Project management; Software testing; Agile software development; Business environments; Development cycle; Literature reviews; Software artifacts; Software development process; Software development teams; Systematic mapping studies; Software design"",
    correspondence_address = ""K. Biesialska; Universitat Politecnica de Catalunya, Barcelona, Spain; email: katarzyna.biesialska@upc.edu"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 30; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Big Data analytics in Agile software development: A systematic mapping study	https://www.scopus.com/record/display.uri?eid=2-s2.0-85095581407&origin=resultslist&sort=plf-f&src=s&sid=2e12d08689a0ccba346941cc65fe0cc8&sot=b&sdt=b&s=TITLE-ABS-KEY%28big+data+analytics+in+agile+software+development+a+systematic+mapping+study%29&sl=90&sessionSearchId=2e12d08689a0ccba346941cc65fe0cc8&relpos=0	Elsevier B.V.	nan; References; Pages
70	Behave	Documentation of Quality Requirements in Agile Software Development	Context: Quality requirements (QRs) have a significant role in the success of software projects. In agile software development (ASD), where working software is valued over comprehensive documentation, QRs are often under-specified or not documented. Consequently, they may be handled improperly and result in degraded software quality and increased maintenance costs. Investigating the documentation of QRs in ASD, would provide evidence on existing practices, tools and aspects considered in ASD that other practitioners might utilize to improve documentation and management of QRs in ASD. Although there are some studies examining documentation in ASD, those that specifically investigate the documentation of QRs in depth are lacking.	Quality requirement; agile software development; documentation; non-functional requirements	Woubshet Behutiye; Pertti Seppanen; Pilar Rodriguez; Markku Oivo	EASE '20: Proceedings of the 24th International Conference on Evaluation and Assessment in Software Engineering	https://doi.org/10.1145/3383219.3383245		250-259		Excluded	Excluded	new_screen			2	ACM		Documentation of Quality Requirements in Agile Software Development	https://dl.acm.org/doi/10.1145/3383219.3383245	Association for Computing Machinery	nan; References; Year; Bibtex
71	Behave	Improving the delivery cycle: A multiple-case study of the toolchains in Finnish software intensive enterprises	Context: Software companies seek to gain benefit from agile development approaches in order to meet evolving market needs without losing their innovative edge. Agile practices emphasize frequent releases with the help of an automated toolchain from code to delivery. Objective: We investigate, which tools are used in software delivery, what are the reasons omitting certain parts of the toolchain and what implications toolchains have on how rapidly software gets delivered to customers. Method: We present a multiple-case study of the toolchains currently in use in Finnish software-intensive organizations interested in improving their delivery frequency. We conducted qualitative semi-structured interviews in 18 case organizations from various software domains. The interviewees were key representatives of their organization, considering delivery activities. Results: Commodity tools, such as version control and continuous integration, were used in almost every organization. Modestly used tools, such as UI testing and performance testing, were more distinctly missing from some organizations. Uncommon tools, such as artifact repository and acceptance testing, were used only in a minority of the organizations. Tool usage is affected by the state of current workflows, manual work and relevancy of tools. Organizations whose toolchains were more automated and contained fewer manual steps were able to deploy software more rapidly. Conclusions: There is variety in the need for tool support in different development steps as there are domain-specific differences in the goals of the case organizations. Still, a well-founded toolchain supports speedy delivery of new software. (c) 2016 Elsevier B.V.	Acceptance tests; Agile software development; Artifact repositories; Continuous deliveries; Continuous deployment; Continuous integrations; Performance testing; Semi structured interviews; Software development tools; Software design	Makinen, Simo; Leppanen, Marko; Kilamo, Terhi; Mattila, Anna-Liisa; Laukkanen, Eero; Pagels, Max; Mannisto, Tomi	Information and Software Technology	https://doi.org/10.1016/j.infsof.2016.09.001		175 - 194	"@ARTICLE{Makinen2016175,
    author = ""Makinen, Simo and Leppanen, Marko and Kilamo, Terhi and Mattila, Anna-Liisa and Laukkanen, Eero and Pagels, Max and Mannisto, Tomi"",
    title = ""Improving the delivery cycle: A multiple-case study of the toolchains in Finnish software intensive enterprises"",
    year = ""2016"",
    journal = ""Information and Software Technology"",
    volume = ""80"",
    pages = ""175 - 194"",
    doi = ""10.1016/j.infsof.2016.09.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988001567\&doi=10.1016\%2fj.infsof.2016.09.001\&partnerID=40\&md5=c5f6390da014c8c6a3455288a0bb279a"",
    affiliations = ""Department of Computer Science, University of Helsinki, P.O. 68 (Gustaf Hallstromin katu 2b), FI-00014 University of Helsinki, Finland; Department of Pervasive Computing, Tampere University of Technology, Korkeakoulunkatu 1, FI-33720 Tampere, Finland; Department of Computer Science and Engineering, Aalto University School of Science, P.O. Box 19210, FI-00076 Aalto, Finland"",
    abstract = ""Context: Software companies seek to gain benefit from agile development approaches in order to meet evolving market needs without losing their innovative edge. Agile practices emphasize frequent releases with the help of an automated toolchain from code to delivery. Objective: We investigate, which tools are used in software delivery, what are the reasons omitting certain parts of the toolchain and what implications toolchains have on how rapidly software gets delivered to customers. Method: We present a multiple-case study of the toolchains currently in use in Finnish software-intensive organizations interested in improving their delivery frequency. We conducted qualitative semi-structured interviews in 18 case organizations from various software domains. The interviewees were key representatives of their organization, considering delivery activities. Results: Commodity tools, such as version control and continuous integration, were used in almost every organization. Modestly used tools, such as UI testing and performance testing, were more distinctly missing from some organizations. Uncommon tools, such as artifact repository and acceptance testing, were used only in a minority of the organizations. Tool usage is affected by the state of current workflows, manual work and relevancy of tools. Organizations whose toolchains were more automated and contained fewer manual steps were able to deploy software more rapidly. Conclusions: There is variety in the need for tool support in different development steps as there are domain-specific differences in the goals of the case organizations. Still, a well-founded toolchain supports speedy delivery of new software. (c) 2016 Elsevier B.V."",
    author_keywords = ""Agile software development; Continuous delivery; Continuous deployment; Deployment pipeline; Software development tools"",
    keywords = ""Acceptance tests; Agile software development; Artifact repositories; Continuous deliveries; Continuous deployment; Continuous integrations; Performance testing; Semi structured interviews; Software development tools; Software design"",
    correspondence_address = ""S. Makinen; Department of Computer Science, University of Helsinki, P.O. 68 (Gustaf Hallstromin katu 2b), FI-00014 University of Helsinki, Finland; email: simo.v.makinen@helsinki.fi"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 29""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Improving the delivery cycle: A multiple-case study of the toolchains in Finnish software intensive enterprises	https://www.scopus.com/record/display.uri?eid=2-s2.0-84988001567&origin=resultslist&sort=plf-f&src=s&sid=19277feddfbb1bf364e78ff5470efc8f&sot=b&sdt=b&s=TITLE-ABS-KEY%28improving+the+delivery+cycle+a+multiple+case+study+of+the+toolchains+in+finnish+software+intensive+enterprises%29&sl=125&sessionSearchId=19277feddfbb1bf364e78ff5470efc8f&relpos=0	Elsevier B.V.	nan; References
72	Behave	Demystifying the adoption of behavior-driven development in open source projects	Context:Behavior-Driven Development (BDD) features the capability, through appropriate domain-specific languages, of specifying acceptance test cases and making them executable. The availability of frameworks such as Cucumber or RSpec makes the application of BDD possible in practice. However, it is unclear to what extent developers use such frameworks, and whether they use them for actually performing BDD, or, instead, for other purposes such as unit testing. Objective:In this paper, we conduct an empirical investigation about the use of BDD tools in open source, and how, when a BDD tool is in place, BDD specifications co-evolve with source code. Method:Our investigation includes three different phases: (i) a large-scale analysis to understand the extent to which BDD frameworks are used in 50,000 popular open-source projects written in five programming languages; (ii) a study on the co-evolution of scenarios, fixtures and production code in a sample of 20 Ruby projects, through the Granger’s causality test, and (iii) a survey with 31 developers to understand how they use BDD frameworks. Results:Results of the study indicate that  ≃  27% of the sampled projects use BDD frameworks, with a prevalence in Ruby projects (68%). In about 37% of the cases, we found a co-evolution between scenarios/fixtures and production code. Specifically, changes to scenarios and fixtures often happen together or after changes to source code. Moreover, survey respondents indicate that, while they understand the intended purpose of BDD frameworks, most of them write tests while/after coding rather than strictly applying BDD. Conclusions:Even if the BDD frameworks usage is widespread among open source projects, in many cases they are used for different purposes such as unit testing activities. This mainly happens because developers felt BDD remains quite effort-prone, and its application goes beyond the simple adoption of a BDD framework.	Behavior-driven development, Acceptance testing, Empirical study, Co-evolution	Zampetti, Fiorella; Di Sorbo, Andrea; Visaggio, Corrado Aaron; Canfora, Gerardo; Di Penta, Massimiliano	Information and Software Technology					Included	Included	new_screen			2						
73	Behave	A Multi-Case Study of Agile Requirements Engineering and the Use of Test Cases as Requirements	ContextIt is an enigma that agile projects can succeed 'without requirements' when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases. ObjectiveWe have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies. MethodWe performed an iterative case study at three companies and collected data through 14 interviews and two focus groups. ResultsThe use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements practice, namely de facto, behaviour-driven, story-test driven, stand-alone strict and stand-alone manual for which the application of the practice varies concerning the time frame of requirements documentation, the requirements format, the extent to which the test cases are a machine executable specification and the use of tools which provide specific support for the practice of using test cases as requirements. ConclusionsThe findings provide empirical insight into how agile development projects manage and communicate requirements. The identified variants of the practice of using test cases as requirements can be used to perform in-depth investigations into agile requirements engineering. Practitioners can use the provided recommendations as a guide in designing and improving their agile requirements practices based on project characteristics such as number of stakeholders and rate of change.	Acceptance test; Agile development; Behaviour-driven development; Case study; Empirical software engineering; Requirements; Test-driven development; Test-first development; Testing	Bjarnason, Elizabeth; Unterkalmsteiner, Michael; Borg, Markus; Engström, Emelie	Inf. Softw. Technol.					Included	Included	new_screen			2						
74	Behave	Continuous Delivery: Overcoming adoption challenges	Continuous Delivery (CD) is a relatively new software development approach. Companies that have adopted CD have reported significant benefits. Motivated by these benefits, many companies would like to adopt CD. However, adopting CD can be very challenging for a number of reasons, such as obtaining buy-in from a wide range of stakeholders whose goals may seemingly be different from—or even conflict with—our own; gaining sustained support in a dynamic complex enterprise environment; maintaining an application development team's momentum when their application's migration to CD requires an additional strenuous effort over a long period of time; and so on. To help overcome the adoption challenges, I present six strategies: (1) selling CD as a painkiller; (2) establishing a dedicated team with multi-disciplinary members; (3) continuous delivery of continuous delivery; (4) starting with the easy but important applications; (5) visual CD pipeline skeleton; (6) expert drop. These strategies were derived from four years of experience in implementing CD at a multi-billion-euro company. Additionally, our experience led to the identification of eight further challenges for research. The information contributes toward building a body of knowledge for CD adoption.	Agile Software Development, Continuous Delivery, Continuous Deployment, Continuous Software Engineering, DevOps, Adoption	Chen, Lianping	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
75	Behave	Transition towards continuous delivery in the healthcare domain	Continuous Delivery is meanwhile well-established in many parts of the software industry. In a transition towards continuous delivery in the healthcare domain, there are a number of additional challenges that should be addressed. We present how we have addressed some of these challenges and highlight some potential research topics that could be addressed in this space to make further progress in this important area. Although our focus is on the healthcare domain, the approach and the research topics are applicable also to a broad range of other application domains.	agile; behavior-driven development; continuous delivery; deployment pipeline; domain-driven design; pair-programming; test automation; test-driven development	Fabio Giorgi; Frances Paulisch	ICSE-SEIP '19: Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice	https://doi.org/10.1109/ICSE-SEIP.2019.00035		253-254		Excluded	Excluded	new_screen			2	ACM		Transition towards Continuous Delivery in the Healthcare Domain	https://dl.acm.org/doi/10.1109/ICSE-SEIP.2019.00035	IEEE Press	nan; References; Year; Bibtex
76	Behave	Transition Towards Continuous Delivery in the Healthcare Domain	Continuous Delivery is meanwhile well-established in many parts of the software industry. In a transition towards continuous delivery in the healthcare domain, there are a number of additional challenges that should be addressed. We present how we have addressed some of these challenges and highlight some potential research topics that could be addressed in this space to make further progress in this important area. Although our focus is on the healthcare domain, the approach and the research topics are applicable also to a broad range of other application domains.	continuous delivery, agile, test-driven development, behavior-driven development, domain-driven design, test automation, pair-programming, deployment pipeline	F. Giorgi; F. Paulisch	2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)					Included	Included	new_screen			2						
77	Behave	Learning Behavior-Driven Development with JavaScript	Create powerful yet simple-to-code BDD test suites in JavaScript using the most popular tools in the community About This BookMaster the most popular testing tools in the JavaScript ecosystem, such as CucumberJS, Mocha, SinonJS, and more.Learn how Behavior-driven development can help you to write software that is more modular and has less defects.Avoid common mistakes in testing, simplify your test suites, and make them more maintainable using a very pragmatic approach to BDD.Who This Book Is ForTThis book is ideal for any JavaScript developer who is interested in producing well-tested code. If you have no prior experience with testing, Node.js, or any other tool, do not worry, as they will be explained from scratch. In Detail JavaScript is not only widely used to create attractive user interfaces for the Web, but with the advent of Node.js, it is also becoming a very popular and powerful language to write server-side applications. Using behavior-driven development and some common testing patterns and best practices, you will be able to avoid these traps.This book will show you how to do BDD in a practical way. We will start with a basic introduction of what BDD is and why the classical approach to testing has failed. Afterwards, we will dive directly into an introduction to Node.js, Mocha, and Sinon.JS. Finally, we will cover more advanced subjects such as how to write a fast and effective test suite for a RESTful web API, and how to do the same with a rich UI using Cucumber.js and Protractor.This book will give you great insight into how to architect your system to make it more testable and modular, but at the same time avoid the nightmare of abusing mock objects.		Amodeo, Enrique						Excluded	Excluded	new_screen			2						
78	Behave	SS-BDD:Automated Acceptance Testing for Spreadsheets	Current Spreadsheet Applications, such as Excel and Google Sheets, provide innumerous built-in facilities, including arithmetic, financial and statistical operations, as well as conditional expressions. Thus, users with little or no formal training in programming can use Spreadsheet Applications to implement their own Spreadsheet Programs. In fact, Spreadsheet Applications have become one of the most popular end-user programming environments nowadays. However, these applications also ease the introduction of errors in Spreadsheet Programs. Minor mistakes in formulas can mislead decisionmaking processes, resulting in uncountable costs to organizations. In general, end-user programmers are unaware of the potential risks that the uncontrolled construction of Spreadsheet Programs can cause. Therefore, a major focus of this paper is to offer an automated approach that makes programmers aware of introduced faults, so that they can build high quality Spreadsheet Programs. In particular, we propose SS-BDD, a framework for building and running Spreadsheets test scenarios, which relies on the use of Behavior Driven Development (BDD). We used SS-BDD to test three different Spreadsheet Programs. Our experience shows that SS-BDD can be used to build end-user friendly test scenarios which can achieve high fault-detection effectiveness.	Behavior Driven Development; Software Testing Tool; Spreadsheet Testing	Lara Almeida; Elder Cirilo; Eiji Adachi Barbosa	SAST '16: Proceedings of the 1st Brazilian Symposium on Systematic and Automated Software Testing	https://doi.org/10.1145/2993288.2993296		1-10		Included	Included	new_screen			2	ACM		SS-BDD: Automated Acceptance Testing for Spreadsheets	https://dl.acm.org/doi/10.1145/2993288.2993296	Association for Computing Machinery	nan; References; Year; Bibtex
79	Behave	BMT: Behavior Driven Development-based Metamorphic Testing for Autonomous Driving Models	Deep Neural Network based models are widely used for perception and control in autonomous driving. Recent work leverages metamorphic testing to improve defect detection but is limited to using only an equality-based metamorphic relation. Thus, it does not provide sufficient expressiveness for users to define custom metamorphic relations nor means to automatically generate meaningful inputs based on such expressive metamorphic relations that reflect real-world traffic behaviors. In this paper, we preliminarily design and evaluate a declarative Behaviour-Driven Development (BDD)-based metamorphic testing framework BMT, which enables domain experts to specify custom traffic behaviors--a car shall decelerate by x% when a bicycle is in front, etc. It then automatically translates a human-written behavior to a corresponding metamorphic relation and synthesizes meaningful test inputs using a variety of image and graphics processing techniques. Our preliminary evaluation shows that BMT can detect a significant number of erroneous predictions of three driving models for speed predictions. These detected erroneous predictions are manually examined and confirmed by six human judges as meaningful traffic violations. By automating test generation from custom behaviors, BMT enables experts to easily express domain-specific constraints and finds violations of such constraints.	Graphics; Conferences; Neural networks; Bicycles; Predictive models; Test pattern generators; Automobiles; Autonomous Vehicles; Metamorphic Testing; Image Processing; Deep Neural Network; Domain Experts; Diverse Images; Speed Prediction; Erroneous Predictions; Traffic Violations; Traffic Behavior; Meaningful Input; Convolutional Neural Network; Pedestrian; Generative Adversarial Networks; Source Images; Original Input; Variational Autoencoder; Image Transformation; Semantic Map; Domain-specific Languages; Road Test; Steering Angle; Metamorphic Testing; Autonomous Driving; Deep Learning Models; Software Testing and Verification	Yao Deng; Guannan Lou; Xi Zheng; Tianyi Zhang; Miryung Kim; Huai Liu; Chen Wang; Tsong Yueh Chen	2021 IEEE/ACM 6th International Workshop on Metamorphic Testing (MET)	https://doi.org/10.1109/MET52542.2021.00012				Included	Included	new_screen			2	IEEE		BMT: Behavior Driven Development-based Metamorphic Testing for Autonomous Driving Models	https://ieeexplore.ieee.org/document/9477683	IEEE	nan; References; Pages; Year; Bibtex
80	Behave	3DEvent: A framework using event-sourcing approach for 3D web-based collaborative design in P2P	Despite recent advances, especially in web-based Collaborative Virtual Environments (CVEs) using real-Time 3D content, Web technology still requires an efficient way to distribute and stream large-scale 3D data. In this paper, we present 3DEvent: An eventdriven framework to collaboratively manipulate predesigned 3D content in real-Time on a web-based platform. This work introduces a new approach in achieving 3D object manipulation tasks during collaborative design stages using event-sourcing. Usually, a clientserver architecture supports updates to the 3D environment state. Peer-To-peer (P2P) allows direct communication between teammates reducing response times during collaboration and decreasing server load, reducing the costs of providers. 3DEvent enables P2Passisted delivery of 3D dynamic content in a web browser viaWeb-RTC. By combining concepts from distributed event-processing and mesh-processing, 3D independent rendering and event-based synchronization, we present 3DEvent framework and potential uses associated that support history-Aware 3D applications into a unified distributed processing solution for 3D web-based CVEs. (c) 2016 ACM.	Distributed computer systems; Virtual reality; Web services; Websites; Client-server architectures; Collaborative manipulation; Collaborative virtual environment; Distributed applications; Distributed event processing; Event-based synchronization; Event-driven architectures; WebRTC; Three dimensional computer graphics	Desprat, Caroline; Jessel, Jean-Pierre; Luga, Herve	Proceedings of the 21st International Conference on Web3D Technology, Web3D 2016	https://doi.org/10.1145/2945292.2945310		73 - 76	"@CONFERENCE{Desprat201673,
    author = ""Desprat, Caroline and Jessel, Jean-Pierre and Luga, Herve"",
    title = ""3DEvent: A framework using event-sourcing approach for 3D web-based collaborative design in P2P"",
    year = ""2016"",
    journal = ""Proceedings of the 21st International Conference on Web3D Technology, Web3D 2016"",
    pages = ""73 - 76"",
    doi = ""10.1145/2945292.2945310"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983542219\&doi=10.1145\%2f2945292.2945310\&partnerID=40\&md5=260dc9d827d285fedc41364b0c2d0853"",
    affiliations = ""University of Toulouse, France"",
    abstract = ""Despite recent advances, especially in web-based Collaborative Virtual Environments (CVEs) using real-Time 3D content, Web technology still requires an efficient way to distribute and stream large-scale 3D data. In this paper, we present 3DEvent: An eventdriven framework to collaboratively manipulate predesigned 3D content in real-Time on a web-based platform. This work introduces a new approach in achieving 3D object manipulation tasks during collaborative design stages using event-sourcing. Usually, a clientserver architecture supports updates to the 3D environment state. Peer-To-peer (P2P) allows direct communication between teammates reducing response times during collaboration and decreasing server load, reducing the costs of providers. 3DEvent enables P2Passisted delivery of 3D dynamic content in a web browser viaWeb-RTC. By combining concepts from distributed event-processing and mesh-processing, 3D independent rendering and event-based synchronization, we present 3DEvent framework and potential uses associated that support history-Aware 3D applications into a unified distributed processing solution for 3D web-based CVEs. (c) 2016 ACM."",
    author_keywords = ""Collaborative manipulation; Distributed application; Event-driven architecture; Web 3D; WebRTC"",
    keywords = ""Distributed computer systems; Virtual reality; Web services; Websites; Client-server architectures; Collaborative manipulation; Collaborative virtual environment; Distributed applications; Distributed event processing; Event-based synchronization; Event-driven architectures; WebRTC; Three dimensional computer graphics"",
    publisher = ""Association for Computing Machinery, Inc"",
    isbn = ""978-145034428-9"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Conf. Web3D Technol., Web3D"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 21st International Conference on Web3D Technology, Web3D 2016; Conference date: 22 July 2016 through 24 July 2016; Conference code: 122890; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		3DEvent: A Framework Using Event-Sourcing Approach for 3D Web-Based Collaborative Design in P2P	https://www.scopus.com/record/display.uri?eid=2-s2.0-84983542219&origin=resultslist&sort=plf-f&src=s&sid=6bd7ededde3224e0f6a0d736ed5972d5&sot=b&sdt=b&s=TITLE-ABS-KEY%283devent+a+framework+using+event+sourcing+approach+for+3d+web+based+collaborative+design+in+p2p%29&sl=109&sessionSearchId=6bd7ededde3224e0f6a0d736ed5972d5&relpos=0	Association for Computing Machinery, Inc	nan; References
81	Behave	Test-Driven Development of Relational Databases	Developers can use a test-driven development with database schema just as they use it with application code. Implementing test-driven database development (TDDD) involves three relatively simple steps: database refactoring, database regression testing, and continuous database integration. In database refactoring, developers make a simple change to a database to improve the design without changing its semantics. In database regression testing, they run a comprehensive test suite that validates the database regularly-ideally, whenever developers change the database schema or access the database in a different way. In continuous database integration, developers rebuild and retest the database schema whenever it changes. From a technical viewpoint, TDDD is straightforward. However, cultural challenges can make it difficult to adopt.	BDD; behavior-driven development; test-driven development; database refactoring; database testing; relational database; TDD; test-driven database design	Ambler, Scott W.	IEEE Softw.					Excluded	Excluded	new_screen			2						
82	Behave	Automatic production of end user documentation for DSLs	Domain-specific languages (DSL) are developed for answering specific problems by leveraging the expertise of domain stakeholders. The development of DSLs requires a significant software engineering effort: editors, code generators, etc, must be developed to make a DSL usable. Documenting a DSL is also a major and time-consuming task required to promote it and address its learning curve. Recent research work in software language engineering focus on easing the development of DSLs. This work focuses on easing the production of documentation of textual DSLs. The API documentation domain identified challenges we adapted to DSL documentation. Based on these challenges we propose a model-driven approach that relies on DSL artifacts to extract information required to build documentation. Our implementation, called Docywood, targets two platforms: Markdown documentation for static web sites and Xtext code fragments for live documentation while modeling. We used Docywood on two DSLs, namely ThingML and Target Platform Definition. Feedback from end users and language designers exhibits qualitative benefits of the proposal with regard to the DSL documentation challenges. End user experiments conducted on ThingML and Target Platform Definition show benefits on the correctness of the created models when using Docywood on ThingML.	Software documentation, Domain-specific language, Model slicing	Le Moulec, Gwendal; Blouin, Arnaud; Gouranton, Valérie; Arnaldi, Bruno	Computer Languages, Systems & Structures					Excluded	Excluded	new_screen			2						
83	Behave	A Process for Evidence-Based Engineering of Domain-Specific Languages	Domain-specific languages (DSLs) are mainly designed ad-hoc and gut feeling resulting in languages that are often not well suited for their users and engineers. In this paper we develop a process for evidence-based language engineering to design domain-specific languages based on empirical evidence to support decision in language engineering. The developed process comprises an iterative execution of the phases DSL engineering, issue identification, data collection and evidence appraisal. We exemplify the concept by designing a DSL for Gherkin, a language test-driven acceptance testing in Xtext. The required evidence is derived by mining and analyzing all GitHub projects until July 1, 2017 that apply Gherkin.	DSL engineering; domain-specific languages; empirical research; evidence-based software engineering; repository mining	Michael Felderer; Fabian Jeschko	EASE '18: Proceedings of the 22nd International Conference on Evaluation and Assessment in Software Engineering 2018	https://doi.org/10.1145/3210459.3210479		169-174		Excluded	Excluded	new_screen			2	ACM		A Process for Evidence-Based Engineering of Domain-Specific Languages	https://dl.acm.org/doi/10.1145/3210459.3210479	Association for Computing Machinery	nan; References; Year; Bibtex
84	Behave	Reproducing failures based on semiformal failure scenario descriptions	Due to the increasing size and complexity of software systems, it becomes hard to test these systems exhaustively. As a result, some faults can be left undetected. Undetected faults can lead to failures in deployed systems. Such failures are usually reported by the users from the field or test engineers back to developers. It requires considerable time and effort to analyze and reproduce the reported failures because their descriptions are not always complete, structured and formal. In this paper, we introduce a novel approach for automatically reproducing failures to aid their debugging. Our approach relies on semi-structured failure scenario descriptions that employ a set of keywords. These descriptions are preprocessed and mapped to a set of predefined test case templates with valid input sets. Then, test cases are generated and executed to reproduce the reported failure scenarios. The approach is evaluated with an industrial case study performed in a company from the telecommunications domain. Several failures were successfully reproduced. The approach is also adopted in the quality assurance process of the company. After one-time preparation of reusable test case templates and training of test engineers, 24.9 % of the reported failures (and 40 % of those that were manually reproducible) could be reproduced without any manual effort. (c) 2016, Springer Science+Business Media New York.	Personnel training; Quality assurance; Testing; Automated test case generation; Behavior-driven development; Deployed systems; Failure scenarios; Industrial case study; Quality assurance process; Reusable test case; Software systems; Software testing	Karagoz, Gun; Sozer, Hasan	Software Quality Journal	https://doi.org/10.1007/s11219-016-9310-1		111 - 129	"@ARTICLE{Karagoz2017111,
    author = ""Karagoz, Gun and Sozer, Hasan"",
    title = ""Reproducing failures based on semiformal failure scenario descriptions"",
    year = ""2017"",
    journal = ""Software Quality Journal"",
    volume = ""25"",
    number = ""1"",
    pages = ""111 - 129"",
    doi = ""10.1007/s11219-016-9310-1"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84957658578\&doi=10.1007\%2fs11219-016-9310-1\&partnerID=40\&md5=00a2b80a254a1785452411a0d6442c65"",
    affiliations = ""P.I.Works HQ, Teknopark Istanbul Sanayi Mah. Teknopark Bul. No: 1/3A 103, Pendik, Istanbul, 34906, Turkey; School of Engineering, Ozyegin University, Nisantepe Mah. Orman Sk. No: 34-36, Alemdag, Cekmekoy, Istanbul, 34794, Turkey"",
    abstract = ""Due to the increasing size and complexity of software systems, it becomes hard to test these systems exhaustively. As a result, some faults can be left undetected. Undetected faults can lead to failures in deployed systems. Such failures are usually reported by the users from the field or test engineers back to developers. It requires considerable time and effort to analyze and reproduce the reported failures because their descriptions are not always complete, structured and formal. In this paper, we introduce a novel approach for automatically reproducing failures to aid their debugging. Our approach relies on semi-structured failure scenario descriptions that employ a set of keywords. These descriptions are preprocessed and mapped to a set of predefined test case templates with valid input sets. Then, test cases are generated and executed to reproduce the reported failure scenarios. The approach is evaluated with an industrial case study performed in a company from the telecommunications domain. Several failures were successfully reproduced. The approach is also adopted in the quality assurance process of the company. After one-time preparation of reusable test case templates and training of test engineers, 24.9 \% of the reported failures (and 40 \% of those that were manually reproducible) could be reproduced without any manual effort. (c) 2016, Springer Science+Business Media New York."",
    author_keywords = ""Automated test case generation; Behavior-driven development; Failure reproduction; Industrial case study"",
    keywords = ""Personnel training; Quality assurance; Testing; Automated test case generation; Behavior-driven development; Deployed systems; Failure scenarios; Industrial case study; Quality assurance process; Reusable test case; Software systems; Software testing"",
    correspondence_address = ""G. Karagoz; P.I.Works HQ, Pendik, Istanbul, Teknopark Istanbul Sanayi Mah. Teknopark Bul. No: 1/3A 103, 34906, Turkey; email: gun.karagoz@piworks.net"",
    publisher = ""Springer New York LLC"",
    issn = ""09639314"",
    language = ""English"",
    abbrev_source_title = ""Softw. Qual. J."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5""
}"	Included	Included	new_screen			2	ScopusSignedIn		Reproducing Failures Based on Semiformal Failure Scenario Descriptions	https://www.scopus.com/record/display.uri?eid=2-s2.0-84957658578&origin=resultslist&sort=plf-f&src=s&sid=907d09d38f360cf3eeb56afe04a84652&sot=b&sdt=b&s=TITLE-ABS-KEY%28reproducing+failures+based+on+semiformal+failure+scenario+descriptions%29&sl=85&sessionSearchId=907d09d38f360cf3eeb56afe04a84652&relpos=0	Springer New York LLC	nan; References
85	Behave	Behaviour-driven requirements engineering for agile product line engineering	Due to the need of the software development community to integrate the flexibility and the high responsiveness of agile software development with the economic advantages, of reuse and mass customisation, offered by product lines, agile product line engineering has been gaining a momentum of attention from both researchers and practitioners. Developing and managing the different requirements engineering phases of product lines present is a dilemma that the efforts done in the literature was not able to effectively and efficiently resolve. To realise the full potential of agile product line engineering in practice, a complete, consistent, correct, and unambiguous user requirements must be produced without investing that huge amount of time in the upfront domain engineering phase of a traditional software product line. In this proposal, a behaviour-driven cloud-based framework is introduced to develop and maintain software product lines in an agile-based environment. The approach relies on upfront automated testing to derive and manage core assets and variations of an agile-based software product line. The model is validated through an empirical study and the preliminary results are very promising. © 2019 IEEE.		Elshandidy H.	Proceedings of the IEEE International Conference on Requirements Engineering					Included	Included	new_screen			2						
86	Behave	From requirements to source code: a Model-Driven Engineering approach for RESTful web services	During the last few years, the REST architectural style has drastically changed the way web services are developed. Due to its transparent resource-oriented model, the RESTful paradigm has been incorporated into several development frameworks that allow rapid development and aspire to automate parts of the development process. However, most of the frameworks lack automation of essential web service functionality, such as authentication or database searching, while the end product is usually not fully compliant to REST. Furthermore, most frameworks rely heavily on domain specific modeling and require developers to be familiar with the employed modeling technologies. In this paper, we present a Model-Driven Engineering (MDE) engine that supports fast design and implementation of web services with advanced functionality. Our engine provides a front-end interface that allows developers to design their envisioned system through software requirements in multimodal formats. Input in the form of textual requirements and graphical storyboards is analyzed using natural language processing techniques and semantics, to semi-automatically construct the input model for the MDE engine. The engine subsequently applies model-to-model transformations to produce a RESTful, ready-to-deploy web service. The procedure is traceable, ensuring that changes in software requirements propagate to the underlying software artefacts and models. Upon assessing our methodology through a case study and measuring the effort reduction of using our tools, we conclude that our system can be effective for the fast design and implementation of web services, while it allows easy wrapping of services that have been engineered with traditional methods to the MDE realm. (c) 2016, Springer Science+Business Media New York.	Design; Engines; Natural language processing systems; Requirements engineering; Search engines; Semantics; Software engineering; Websites; World Wide Web; Development frameworks; Domain specific modeling; Model to model transformation; Model-driven Engineering; NAtural language processing; RESTful Web services; Service functionalities; Software requirements; Web services	Zolotas, Christoforos; Diamantopoulos, Themistoklis; Chatzidimitriou, Kyriakos C.; Symeonidis, Andreas L.	Automated Software Engineering	https://doi.org/10.1007/s10515-016-0206-x		791 - 838	"@ARTICLE{Zolotas2017791,
    author = ""Zolotas, Christoforos and Diamantopoulos, Themistoklis and Chatzidimitriou, Kyriakos C. and Symeonidis, Andreas L."",
    title = ""From requirements to source code: a Model-Driven Engineering approach for RESTful web services"",
    year = ""2017"",
    journal = ""Automated Software Engineering"",
    volume = ""24"",
    number = ""4"",
    pages = ""791 - 838"",
    doi = ""10.1007/s10515-016-0206-x"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84984844780\&doi=10.1007\%2fs10515-016-0206-x\&partnerID=40\&md5=8bd9650aa74d0c817f0c41b23e2e3cd0"",
    affiliations = ""Electrical and Computer Engineering Department, Aristotle University of Thessaloniki, Thessaloniki, GR54124, Greece"",
    abstract = ""During the last few years, the REST architectural style has drastically changed the way web services are developed. Due to its transparent resource-oriented model, the RESTful paradigm has been incorporated into several development frameworks that allow rapid development and aspire to automate parts of the development process. However, most of the frameworks lack automation of essential web service functionality, such as authentication or database searching, while the end product is usually not fully compliant to REST. Furthermore, most frameworks rely heavily on domain specific modeling and require developers to be familiar with the employed modeling technologies. In this paper, we present a Model-Driven Engineering (MDE) engine that supports fast design and implementation of web services with advanced functionality. Our engine provides a front-end interface that allows developers to design their envisioned system through software requirements in multimodal formats. Input in the form of textual requirements and graphical storyboards is analyzed using natural language processing techniques and semantics, to semi-automatically construct the input model for the MDE engine. The engine subsequently applies model-to-model transformations to produce a RESTful, ready-to-deploy web service. The procedure is traceable, ensuring that changes in software requirements propagate to the underlying software artefacts and models. Upon assessing our methodology through a case study and measuring the effort reduction of using our tools, we conclude that our system can be effective for the fast design and implementation of web services, while it allows easy wrapping of services that have been engineered with traditional methods to the MDE realm. (c) 2016, Springer Science+Business Media New York."",
    author_keywords = ""Automated Software Engineering; Model-Driven Engineering; RESTful web services; Software requirements"",
    keywords = ""Design; Engines; Natural language processing systems; Requirements engineering; Search engines; Semantics; Software engineering; Websites; World Wide Web; Development frameworks; Domain specific modeling; Model to model transformation; Model-driven Engineering; NAtural language processing; RESTful Web services; Service functionalities; Software requirements; Web services"",
    correspondence_address = ""T. Diamantopoulos; Electrical and Computer Engineering Department, Aristotle University of Thessaloniki, Thessaloniki, GR54124, Greece; email: thdiaman@issel.ee.auth.gr"",
    publisher = ""Springer New York LLC"",
    issn = ""09288910"",
    coden = ""ASOEE"",
    language = ""English"",
    abbrev_source_title = ""Autom Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 19""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		From Requirements to Source Code: A Model-Driven Engineering Approach for RESTful Web Services	https://www.scopus.com/record/display.uri?eid=2-s2.0-84984844780&origin=resultslist&sort=plf-f&src=s&sid=d3da343f905bdf4ab2041ef9451e5516&sot=b&sdt=b&s=TITLE-ABS-KEY%28from+requirements+to+source+code+a+model+driven+engineering+approach+for+restful+web+services%29&sl=108&sessionSearchId=d3da343f905bdf4ab2041ef9451e5516&relpos=0	Springer New York LLC	nan; References
87	Behave	Analysing Requirements Communication Using Use Case Specification and User stories	Effective requirements communication is essential in software development projects due to the importance of understanding the requirements throughout the software development cycle. Software requirements can be specified in different formats, for instance using free texts or more structured forms, such as use cases and user stories used in Behavior Driven Development (BDD). We present a comparative analysis on the requirements communication dynamics using use case specification and user stories as the basis for mockups creation. We carried out an exploratory empirical study involving 16 students. The study comprised 3 steps: requirements specification, mockups construction, and inspection to investigate whether the mockups were in accordance with the specifications. Results show that there is no significant difference in using use case specification or user stories to communicate software requirements. Our findings suggest that different specification formats can provide similar results while communicating requirements, nonetheless the human factor should not be neglected.	Behavior Driven Development; Requirements communication; experimental study; requirements specification; use case	Ana Carolina Oran; Elizamary Nascimento; Gleison Santos; Tayana Conte	SBES '17: Proceedings of the XXXI Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3131151.3131166		214-223		Included	Included	new_screen			2	ACM		Analysing Requirements Communication Using Use Case Specification and User Stories	https://dl.acm.org/doi/10.1145/3131151.3131166	Association for Computing Machinery	nan; References; Year; Bibtex
88	Behave	Generating Testing Codes for Behavior-Driven Development from Problem Diagrams: A Tool-Based Approach	Eliciting requirements in their real-world contexts and creating and transforming visual models which can help lead to early designs of software is a challenging and time-consuming step in software engineering processes. In order to support the creation of these models and generate artifacts useful for software designs, we have developed the Problem-to-Design tool (PROD) based on Jackson's Problem Frames approach. The tool has been inspired by the work in the behavior-driven development community, which recommends that testing codes be generated as early as in the requirements engineering phase. The tool provides an open portal where multiple stakeholders can draw their own problem diagrams online, which can be used to generate use case narratives and testing codes for further behavior-driven development. (c) 2016 IEEE.	Codes (symbols); Requirements engineering; Software engineering; behavior-driven development; Development community; Multiple stakeholders; Problem Frames; Problem Frames approach; Problem progression; Software engineering process; Testing codes; Software design	Gao, Ning; Li, Zhi	Proceedings - 2016 IEEE 24th International Requirements Engineering Conference, RE 2016	https://doi.org/10.1109/RE.2016.54		399 - 400	"@CONFERENCE{Gao2016399,
    author = ""Gao, Ning and Li, Zhi"",
    title = ""Generating Testing Codes for Behavior-Driven Development from Problem Diagrams: A Tool-Based Approach"",
    year = ""2016"",
    journal = ""Proceedings - 2016 IEEE 24th International Requirements Engineering Conference, RE 2016"",
    pages = ""399 - 400"",
    doi = ""10.1109/RE.2016.54"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007170291\&doi=10.1109\%2fRE.2016.54\&partnerID=40\&md5=60b91fda6611567dbeebf5d74548fbe1"",
    affiliations = ""Dept. of Software Engineering, College of Computer Science and Information Technology, No. 15 YuCai Road, Guilin, Guangxi, 541004, China"",
    abstract = ""Eliciting requirements in their real-world contexts and creating and transforming visual models which can help lead to early designs of software is a challenging and time-consuming step in software engineering processes. In order to support the creation of these models and generate artifacts useful for software designs, we have developed the Problem-to-Design tool (PROD) based on Jackson's Problem Frames approach. The tool has been inspired by the work in the behavior-driven development community, which recommends that testing codes be generated as early as in the requirements engineering phase. The tool provides an open portal where multiple stakeholders can draw their own problem diagrams online, which can be used to generate use case narratives and testing codes for further behavior-driven development. (c) 2016 IEEE."",
    author_keywords = ""behavior-driven development; Problem Frames; problem progression"",
    keywords = ""Codes (symbols); Requirements engineering; Software engineering; behavior-driven development; Development community; Multiple stakeholders; Problem Frames; Problem Frames approach; Problem progression; Software engineering process; Testing codes; Software design"",
    correspondence_address = ""Z. Li; Dept. of Software Engineering, College of Computer Science and Information Technology, Guilin, Guangxi, No. 15 YuCai Road, 541004, China; email: zhili@gxnu.edu.cn"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-150904121-3"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Requir. Eng. Conf., RE"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 24th IEEE International Requirements Engineering Conference, RE 2016; Conference date: 12 September 2016 through 16 September 2016; Conference code: 125191""
}"	Included	Included	new_screen			2	ScopusSignedIn		Generating Testing Codes for Behavior-Driven Development from Problem Diagrams: A Tool-Based Approach	https://www.scopus.com/record/display.uri?eid=2-s2.0-85007170291&origin=resultslist&sort=plf-f&src=s&sid=38fa4d68f434cab6feb96bef53650e5d&sot=b&sdt=b&s=TITLE-ABS-KEY%28generating+testing+codes+for+behavior+driven+development+from+problem+diagrams+a+tool+based+approach%29&sl=115&sessionSearchId=38fa4d68f434cab6feb96bef53650e5d&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
89	Behave	Behavior-driven Development for Real-time Embedded Systems	Embedded systems are a class of computer systems that are typically characterized by a tight interaction with the physical environment. Various methodologies have been adopted for the development of such systems, ranging from traditional waterfall to modern agile techniques. One of the agile techniques that has recently attracted increasing attention is Behavior-Driven Development (BDD). BDD promotes the engagement of all stakeholders in every development iteration to minimize the misunderstanding between technical and non-technical stakeholders and, consequently, to speed up the development process and lower the costs. In this paper, we investigate the application of BDD to the development of embedded systems, especially focusing on the testing of timing requirements for real-time embedded software. In particular, we extend BDD with time-related concepts and propose an approach to generate test code for the verification of timing behavior of real-time embedded systems. Our approach offers more automation for the development of test code compared to existing BDD tools, thus minimizing the risk of timing faults and reducing development costs and time-to-market.		A. S. Nezhad; J. J. Lukkien; R. H. Mak	2018 IEEE 23rd International Conference on Emerging Technologies and Factory Automation (ETFA)					Included	Included	new_screen			2						
90	Behave	Benchmark driven framework for development of emotion sensing support systems	Emotion sensing support system to assist human decision making during interview scenario is a developing research field. This paper presents a new framework for the development of emotion sensing support systems that is a complete, easily extendible, flexible, and configurable environment with intensive benchmark capabilities. The design of the framework was inspired by behavior-driven development, agile software development technique. It provides: 1) effective collaboration platform between technological and psychological researches, and 2) intensive benchmarking capabilities to test the performance of the entire system as well as individual algorithms. (c) 2012 IEEE.	Information science; Software engineering; affect; Agile software development; behavior-driven development; Collaboration platforms; Emotion detection; Entire system; Human decision making; Psychological research; Research fields; Sensor fusion; Support systems; Benchmarking	Polikovsky, Senya; Quiros-Ramirez, Maria Alejandra; Kameda, Yoshinori; Ohta, Yuichi; Burgoon, Judee	Proceedings - 2012 European Intelligence and Security Informatics Conference, EISIC 2012	https://doi.org/10.1109/EISIC.2012.27		353 - 355	"@CONFERENCE{Polikovsky2012353,
    author = ""Polikovsky, Senya and Quiros-Ramirez, Maria Alejandra and Kameda, Yoshinori and Ohta, Yuichi and Burgoon, Judee"",
    title = ""Benchmark driven framework for development of emotion sensing support systems"",
    year = ""2012"",
    journal = ""Proceedings - 2012 European Intelligence and Security Informatics Conference, EISIC 2012"",
    pages = ""353 - 355"",
    doi = ""10.1109/EISIC.2012.27"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84868521452\&doi=10.1109\%2fEISIC.2012.27\&partnerID=40\&md5=0a38b46344f884118c54a8583c41e21e"",
    affiliations = ""Department of Intelligent Interaction Technologies, University of Tsukuba, Japan; Eller College of Management, University of Arizona, United States"",
    abstract = ""Emotion sensing support system to assist human decision making during interview scenario is a developing research field. This paper presents a new framework for the development of emotion sensing support systems that is a complete, easily extendible, flexible, and configurable environment with intensive benchmark capabilities. The design of the framework was inspired by behavior-driven development, agile software development technique. It provides: 1) effective collaboration platform between technological and psychological researches, and 2) intensive benchmarking capabilities to test the performance of the entire system as well as individual algorithms. (c) 2012 IEEE."",
    author_keywords = ""affect; behavior-driven development; emotion detection; sensor fusion"",
    keywords = ""Information science; Software engineering; affect; Agile software development; behavior-driven development; Collaboration platforms; Emotion detection; Entire system; Human decision making; Psychological research; Research fields; Sensor fusion; Support systems; Benchmarking"",
    correspondence_address = ""S. Polikovsky; Department of Intelligent Interaction Technologies, University of Tsukuba, Japan; email: senya@image.iit.tsukuba.ac.jp"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Eur. Intell. Secur. Informatics Conf., EISIC"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 2012 European Intelligence and Security Informatics Conference, EISIC 2012; Conference date: 22 August 2012 through 24 August 2012; Conference code: 93470""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Benchmark Driven Framework for Development of Emotion Sensing Support Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-84868521452&origin=resultslist&sort=plf-f&src=s&sid=677d7d29867a4efb48ad7e3c3280d1e6&sot=b&sdt=b&s=TITLE-ABS-KEY%28benchmark+driven+framework+for+development+of+emotion+sensing+support+systems%29&sl=92&sessionSearchId=677d7d29867a4efb48ad7e3c3280d1e6&relpos=0		nan; References; Publisher
91	Behave	Benchmark driven framework for development of emotion sensing support systems	Emotion sensing support system to assist human decision making during interview scenario is a developing research field. This paper presents a new framework for the development of emotion sensing support systems that is a complete, easily extendible, flexible, and configurable environment with intensive benchmark capabilities. The design of the framework was inspired by behavior-driven development, agile software development technique. It provides: 1) effective collaboration platform between technological and psychological researches, and 2) intensive benchmarking capabilities to test the performance of the entire system as well as individual algorithms. (c) 2012 IEEE.	Information science; Software engineering; affect; Agile software development; behavior-driven development; Collaboration platforms; Emotion detection; Entire system; Human decision making; Psychological research; Research fields; Sensor fusion; Support systems; Benchmarking	Polikovsky, Senya; Quiros-Ramirez, Maria Alejandra; Kameda, Yoshinori; Ohta, Yuichi; Burgoon, Judee	Proceedings - 2012 European Intelligence and Security Informatics Conference, EISIC 2012	https://doi.org/10.1109/EISIC.2012.27		353 - 355	"@CONFERENCE{Polikovsky2012353,
    author = ""Polikovsky, Senya and Quiros-Ramirez, Maria Alejandra and Kameda, Yoshinori and Ohta, Yuichi and Burgoon, Judee"",
    title = ""Benchmark driven framework for development of emotion sensing support systems"",
    year = ""2012"",
    journal = ""Proceedings - 2012 European Intelligence and Security Informatics Conference, EISIC 2012"",
    pages = ""353 - 355"",
    doi = ""10.1109/EISIC.2012.27"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84868521452\&doi=10.1109\%2fEISIC.2012.27\&partnerID=40\&md5=0a38b46344f884118c54a8583c41e21e"",
    affiliations = ""Department of Intelligent Interaction Technologies, University of Tsukuba, Japan; Eller College of Management, University of Arizona, United States"",
    abstract = ""Emotion sensing support system to assist human decision making during interview scenario is a developing research field. This paper presents a new framework for the development of emotion sensing support systems that is a complete, easily extendible, flexible, and configurable environment with intensive benchmark capabilities. The design of the framework was inspired by behavior-driven development, agile software development technique. It provides: 1) effective collaboration platform between technological and psychological researches, and 2) intensive benchmarking capabilities to test the performance of the entire system as well as individual algorithms. (c) 2012 IEEE."",
    author_keywords = ""affect; behavior-driven development; emotion detection; sensor fusion"",
    keywords = ""Information science; Software engineering; affect; Agile software development; behavior-driven development; Collaboration platforms; Emotion detection; Entire system; Human decision making; Psychological research; Research fields; Sensor fusion; Support systems; Benchmarking"",
    correspondence_address = ""S. Polikovsky; Department of Intelligent Interaction Technologies, University of Tsukuba, Japan; email: senya@image.iit.tsukuba.ac.jp"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Eur. Intell. Secur. Informatics Conf., EISIC"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 2012 European Intelligence and Security Informatics Conference, EISIC 2012; Conference date: 22 August 2012 through 24 August 2012; Conference code: 93470""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Benchmark Driven Framework for Development of Emotion Sensing Support Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-84868521452&origin=resultslist&sort=plf-f&src=s&sid=677d7d29867a4efb48ad7e3c3280d1e6&sot=b&sdt=b&s=TITLE-ABS-KEY%28benchmark+driven+framework+for+development+of+emotion+sensing+support+systems%29&sl=92&sessionSearchId=677d7d29867a4efb48ad7e3c3280d1e6&relpos=0		nan; References; Publisher
92	Behave	Beyond Page Objects: Testing Web Applications with State Objects:Use states to drive your tests	End-to-end testing of Web applications typically involves tricky interactions with Web pages by means of a framework such as Selenium WebDriver. The recommended method for hiding such Web-page intricacies is to use page objects, but there are questions to answer first: Which page objects should you create when testing Web applications? What actions should you include in a page object? Which test scenarios should you specify, given your page objects?		Arie van Deursen	Queue	https://doi.org/10.1145/2791301.2793039		20-37		Excluded	Excluded	new_screen			2	ACM		Beyond Page Objects: Testing Web Applications with State Objects: Use States to Drive Your Tests	https://dl.acm.org/doi/10.1145/2791301.2793039	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
93	Behave	Ensuring the Consistency Between User Requirements and Graphical User Interfaces: A Behavior-Based Automated Approach	Ensuring the consistency between Graphical User Interfaces (GUIs) and user requirements is a critical aspect of the design process since it is through the GUIs that users perceive the system and experience the available features in order to achieve their goals. This paper presents an approach based on Behavior-Driven Development (BDD) which employs an ontology in order to provide automated assessment for web GUIs. The approach has been evaluated by exploiting user requirements described by a group of experts in the flight tickets e-commerce domain. Such requirements gave rise to a set of User Stories that have been used to automatically assess the GUIs of an existing web system for booking business trips. The results have shown our approach was able to identify different types of inconsistencies in the set of GUIs analyzed, allowing to build an effective correspondence between user requirements and their representation on the GUI. © 2019, Springer Nature Switzerland AG.		Rocha Silva T., Winckler M., Trætteberg H.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
94	Behave	A practical method for API testing in the context of continuous delivery and behavior driven development	Enterprises are increasingly adopting an API-first approach to connect and expose software services. Saxo Bank is no exception to this.Crafting test suites for such APIs can seem straight forward due to the headless nature, but our experience shows that test suites often have two problems. The first problem is that execution of tests tends to fail and pass in seemingly nondeterministic ways (tests are flaky). The second problem is that functional coverage is not clearly documented.We have found that both problems stem from a lack of explicit focus on initial context (IC), a concept from behavior driven development. When a test is flaky it is often because actual IC in the test environment is not as required by the test. When functional coverage is not clear, it is most often because a systematic analysis involving IC was not performed.We propose a method for test analysis in which we include IC in the input space when analyzing functional coverage for an API, thereby including anything which can influence the outcome of test cases.Establishing IC is in general a hard problem. We have found that focus on the bounded context, a concept from domain driven design, of the system under test is a practical way to establish relevant IC.Experience with Saxo Bank's Open API shows that this method allows testers and developers to cooperate continuously, producing test plan documents which include the reasoning behind functional coverage. Explicit focus on IC in automated test case implementations turns flaky tests into tests which report on required IC in a test environment. The method easily generalizes to all levels of API tests. (c) 2021 IEEE.	Integrated circuits; Testing; Verification; Automated test; Domain-driven designs; Functional coverage; Practical method; Software services; System under test; Systematic analysis; Test Environment; Software testing	Bennett, Brian Elgaard	Proceedings - 2021 IEEE 14th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2021	https://doi.org/10.1109/ICSTW52544.2021.00020		44 - 47	"@CONFERENCE{Bennett202144,
    author = ""Bennett, Brian Elgaard"",
    title = ""A practical method for API testing in the context of continuous delivery and behavior driven development"",
    year = ""2021"",
    journal = ""Proceedings - 2021 IEEE 14th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2021"",
    pages = ""44 - 47"",
    doi = ""10.1109/ICSTW52544.2021.00020"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108022218\&doi=10.1109\%2fICSTW52544.2021.00020\&partnerID=40\&md5=9398710261263e5ca74b55f2bfb9e216"",
    affiliations = ""OpenAPI Product Team, Saxo Bank A/S, Hellerup, Denmark"",
    abstract = ""Enterprises are increasingly adopting an API-first approach to connect and expose software services. Saxo Bank is no exception to this.Crafting test suites for such APIs can seem straight forward due to the headless nature, but our experience shows that test suites often have two problems. The first problem is that execution of tests tends to fail and pass in seemingly nondeterministic ways (tests are flaky). The second problem is that functional coverage is not clearly documented.We have found that both problems stem from a lack of explicit focus on initial context (IC), a concept from behavior driven development. When a test is flaky it is often because actual IC in the test environment is not as required by the test. When functional coverage is not clear, it is most often because a systematic analysis involving IC was not performed.We propose a method for test analysis in which we include IC in the input space when analyzing functional coverage for an API, thereby including anything which can influence the outcome of test cases.Establishing IC is in general a hard problem. We have found that focus on the bounded context, a concept from domain driven design, of the system under test is a practical way to establish relevant IC.Experience with Saxo Bank's Open API shows that this method allows testers and developers to cooperate continuously, producing test plan documents which include the reasoning behind functional coverage. Explicit focus on IC in automated test case implementations turns flaky tests into tests which report on required IC in a test environment. The method easily generalizes to all levels of API tests. (c) 2021 IEEE."",
    author_keywords = ""API Testing; Application; Behavior Driven Development; Combinatorial Testing; Continuous Delivery; Domain Driven Design; Industry"",
    keywords = ""Integrated circuits; Testing; Verification; Automated test; Domain-driven designs; Functional coverage; Practical method; Software services; System under test; Systematic analysis; Test Environment; Software testing"",
    correspondence_address = ""B.E. Bennett; OpenAPI Product Team, Saxo Bank A/S, Hellerup, Denmark; email: bb@saxobank.com"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-166544456-9"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 14th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2021; Conference date: 12 April 2021 through 16 April 2021; Conference code: 169220""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		A Practical Method for API Testing in the Context of Continuous Delivery and Behavior Driven Development	https://www.scopus.com/record/display.uri?eid=2-s2.0-85108022218&origin=resultslist&sort=plf-f&src=s&sid=e7863b3e7004a101942fff140468ecac&sot=b&sdt=b&s=TITLE-ABS-KEY%28a+practical+method+for+api+testing+in+the+context+of+continuous+delivery+and+behavior+driven+development%29&sl=119&sessionSearchId=e7863b3e7004a101942fff140468ecac&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
95	Behave	Ensuring the Consistency between User Requirements and Task Models: A Behavior-Based Automated Approach	Evaluating and ensuring the consistency between user requirements and modeling artifacts is a long-time issue for model-based software design. Conflicts in requirements specifications can lead to many design errors and have a decisive impact on the quality of systems under development. This article presents an approach based on Behavior-Driven Development (BDD) to provide automated assessment for task models, which are intended to model the flow of user and system tasks in an interactive system. The approach has been evaluated by exploiting user requirements described by a group of experts in the domain of business trips. Such requirements gave rise to a set of BDD stories that have been used to automatically assess scenarios extracted from task models that were reengineered from an existing web system for booking business trips. The results have shown our approach, by performing a static analysis of the source files, was able to identify different types of inconsistencies between the user requirements and the set of task models analyzed.	automated requirements assessment; behavior-driven development (BDD); task models; user stories	Rocha Silva, Thiago; Winckler, Marco; Trætteberg, Hallvard	Proc. ACM Hum.-Comput. Interact.					Included	Included	new_screen			2						
96	Behave	Ensuring the Consistency between User Requirements and Task Models: A Behavior-Based Automated Approach	Evaluating and ensuring the consistency between user requirements and modeling artifacts is a long-time issue for model-based software design. Conflicts in requirements specifications can lead to many design errors and have a decisive impact on the quality of systems under development. This article presents an approach based on Behavior-Driven Development (BDD) to provide automated assessment for task models, which are intended to model the flow of user and system tasks in an interactive system. The approach has been evaluated by exploiting user requirements described by a group of experts in the domain of business trips. Such requirements gave rise to a set of BDD stories that have been used to automatically assess scenarios extracted from task models that were reengineered from an existing web system for booking business trips. The results have shown our approach, by performing a static analysis of the source files, was able to identify different types of inconsistencies between the user requirements and the set of task models analyzed. © 2020 ACM.		Rocha Silva T., Winckler M., Trætteberg H.	Proceedings of the ACM on Human-Computer Interaction					Included	Included	new_screen			2						
97	Behave	A Study of Value in Agile Software Development Organizations	Examines how Value is interpreted in 14 agile software development organizations.Data is collected from 13 project managers and 10 product owners.Sixteen categories of Value Aspects are identified and prioritized.The most important Value Aspect is Delivery process w.r.t. time.The most used activity to achieve Value is activities related to agile practices. The Agile manifesto focuses on the delivery of valuable software. In Lean, the principles emphasise value, where every activity that does not add value is seen as waste. Despite the strong focus on value, and that the primary critical success factor for software intensive product development lies in the value domain, no empirical study has investigated specifically what value is. This paper presents an empirical study that investigates how value is interpreted and prioritised, and how value is assured and measured. Data was collected through semi-structured interviews with 23 participants from 14 agile software development organisations. The contribution of this study is fourfold. First, it examines how value is perceived amongst agile software development organisations. Second, it compares the perceptions and priorities of the perceived values by domains and roles. Third, it includes an examination of what practices are used to achieve value in industry, and what hinders the achievement of value. Fourth, it characterises what measurements are used to assure, and evaluate value-creation activities.	Agile software development; Empirical; Value	Alahyari, Hiva; Berntsson Svensson, Richard; Gorschek, Tony	J. Syst. Softw.					Excluded	Excluded	new_screen			2						
98	Behave	Domain-specific scenarios for refinement-based methods	Formal methods use abstraction and rigorously verified refinement to manage the design of complex systems, ensuring that they satisfy important invariant properties. However, formal verification is not sufficient: models must also be tested to ensure that they behave according to the informal requirements and validated by domain experts who may not be expert in formal modelling. This can be satisfied by scenarios that complement the requirements specification. The model can be animated to check whether the scenario is feasible in the model and that the model reaches the states expected in the scenario. However, there are two problems with this approach. 1) The natural language used to describe the scenarios is often verbose, ambiguous and therefore difficult to understand; especially if the modeller is not a domain expert. 2) Provided scenarios are typically at the most concrete level corresponding to the full requirements and cannot be used until all the refinements have been completed in the model. We show by example how a precise and concise domain specific language can be used for writing these abstract scenarios in a style that can be easily understood by the domain expert (for validation purposes) as well as the modeller (for behavioural verification) and can be used as the persistence for automated tool support. We propose two alternative approaches to using scenarios during formal modelling: A method of refining scenarios before the model is refined so that the scenarios guide the modelling, and a method of abstracting scenarios from provided concrete ones so that they can be used to test early refinements of the model. We illustrate the two approaches on the ‘Tokeneer’ secure enclave example and the ERTMS/ETCS Hybrid Level 3 specification for railway controls. We base our approach on the Cucumber framework for scenarios and the Event-B modelling language and tool set. We have developed a new ‘Scenario Checker’ plugin to manage the animation of scenarios.11The example model and scenario scripts supporting this paper are openly available at https://doi.org/10.5258/SOTON/D1026.	Event-B, Cucumber, Validation, Domain specific language	Snook, Colin; Hoang, Thai Son; Dghaym, Dana; Fathabadi, Asieh Salehi; Butler, Michael	Journal of Systems Architecture					Excluded	Excluded	new_screen			2						
99	Behave	Behaviour-Driven Formal Model Development of the ETCS Hybrid Level 3	Behaviour driven formal model development (BDFMD) enables domain engineers to influence and validate mathematically precise and verified specifications. In previous work we proposed a process where manually authored scenarios are used initially to support the requirements and help the modeller. The same scenarios are used to verify behavioural properties of the model. The model is then mutated to automatically generate scenarios that have a more complete coverage than the manual ones. These automatically generated scenarios are used to animate the model in a final acceptance stage. In this paper, we discuss lessons learned from applying this BDFMD process to a real-life specification: The European Train Control Systems (ETCS) Hybrid Level 3. During the case study, we have developed our understanding of the process, modifying the way we do some stages and developing improved tool support to make the process more efficient. We discuss (1) the need for abstract scenarios during incremental model development and verification, (2) tools and techniques developed to make the running of scenarios more efficient, and (3) improvements to tools that generate new test cases to improve coverage.	Unified modeling language; Object oriented modeling; Tools; Visualization; Mathematical model; Testing; Computational modeling; Model Formulation; Automatic Generation; State Model; Cucumber; Domain Experts; External Events; Test Suite; Implementation Steps; Acceptable Test; Verification And Validation; Use Of Scenarios; Model Checking; Additional Scenarios; Output Of Step; Round Of Experiments; Movement Training; Formal Verification; Scenario Generation; Refinement Strategy; Test Case Generation; Refinement Level; Graphical Elements; Manual Observation; Regression Test; Filtering Effect; Partial Order; Continuous Integration; Environmental Changes; Event-B, UML-B, MoMuT, BDFMD, Scenario, ETCS Hybrid Level 3	Michael Butler; Dana Dghaym; Thai Son Hoang; Tope Omitola; Colin Snook; Andreas Fellner; Rupert Schlick; Thorsten Tarrach; Tomas Fischer; Peter Tummeltshammer	2019 24th International Conference on Engineering of Complex Computer Systems (ICECCS)	https://doi.org/10.1109/ICECCS.2019.00018	"1.Jean-Raymond Abrial, Modeling in Event-B: System and Software Engineering, Cambridge University Press, 2010. CrossRef  Google Scholar; 2.Jean-Raymond Abrial, Michael Butler Stefan Hallerstede, Thai Son Hoang, Farhad Mehta and Laurent Voisin, ""Rodin: An open toolset for modelling and reasoning in Event-B"", Software Tools for Technology Transfer, vol. 12, no. 6, pp. 447-466, November 2010. CrossRef  Google Scholar; 3.RJR Back and Kaisa Sere, ""Stepwise refinement of action systems"", International Conference on Mathematics of Program Construction, pp. 115-138, 1989. CrossRef  Google Scholar; 4.Dana Dghaym Michael Poppleton and Colin Snook, ""Diagram-led formal modelling using iUMLB for Hybrid ERTMS Level 3"" in Abstract State Machines Alloy B TLA VDM and Z: Abz 2018, Springer, vol. 10817, pp. 338-352, May 2018. Google Scholar; 5.Edsger W Dijkstra, ""Guarded commands nondeterminacy and formal derivation of programs"", Communications of the ACM, vol. 18, no. 8, pp. 453-457, 1975. CrossRef  Google Scholar; 6.Principles: Hybrid ERTMS/ETCS Level 3. Ref 16E042 Version 1A., pp. 2018-03, July 2017. Google Scholar; 7.Andreas Fellner Willibald Krenn, Rupert Schlick, Thorsten Tarrach and Georg Weissenbacher, ""Model-based mutation-driven test case generation via heuristic-guided branching search"", Proceedings of the 15th ACM-IEEE International Conference on Formal Methods and Models for System Design, pp. 56-66, 2017. CrossRef  Google Scholar; 8.Tomas Fischer, Cucumber for Event-B and iUML-B, 2018,  [online]  Available: https://github.com/tofisoho/cucumber-cvent-b. Google Scholar; 9.Thai Son Hoang, ""An introduction to the Event-B modelling method"" in Industrial Deployment of System Engineering Methods, Springer-Verlag, pp. 211-236, 2013. Google Scholar; 10.""The hybrid ERTMS/ETCS level 3 case study"" in Abstract State Machines Alloy B TLA VDM and Z, Springer International Publishing, pp. 251-261, 2018. CrossRef  Google Scholar; 11.Willibald Krenn, Rupert Schlick and Bernhard K Aichernig, ""Mapping UML to labeled transition systems for test-case generation"" in Formal Methods for Components and Objects, Springer, pp. 186-207, 2010. CrossRef  Google Scholar; 12.Lukas Ladenberger, Jens Bendisposto and Michael Leuschel, ""Visualising Event-B models with B-Motion Studio"", Proceedings of FMICS 2009, vol. 5825, pp. 202-204, 2009. CrossRef  Google Scholar; 13.Michael Leuschel and Michael Butler, ""ProB: An automated analysis toolset for the B method"", Software Tools for Technology Transfer (STTT), vol. 10, no. 2, pp. 185-203, 2008. CrossRef  Google Scholar; 14.Dan North, ""Introducing BDD"", Better Software Magazine, March 2006. Google Scholar; 15.Mar Yah Said, Michael Butler and Colin Snook, ""A method of refinement in UML-B"", Softw. Syst. Model., vol. 14, no. 4, pp. 1557-1580, October 2015. CrossRef  Google Scholar; 16.Vitaly Savicks, Michael Butler and John Colley, ""Co-simulating Event-B and continuous models via FMI"", Proceedings of the 2014 Summer Simulation Multiconference SummerSim '14, pp. 37:1-37:8, 2014. Google Scholar; 17.J. F. Smart, BDD in Action: Behavior-Driven Development for the Whole Software Life cycle, Manning Publications Company, 2014. Google Scholar; 18.Colin Snook, ""iUML-B statemachines"", Proceedings of the Rodin Workshop 2014, pp. 29-30, 2014. Google Scholar; 19.Colin Snook and Michael Butler, ""UML-B: Formal modeling and design aided by UML"", ACM Trans. Softw. Eng. Methodol., vol. 15, no. 1, pp. 92-122, January 2006. CrossRef  Google Scholar; 20.""Behaviour-driven formal model development"", Formal Methods and Software Engineering - 20th International Conference on Formal Engineering Methods ICFEM 2018 Gold Coast QLD, vol. 11232, pp. 21-36, November 12-16, 2018. CrossRef  Google Scholar; 21.Matt Wynne and Aslak Hellesoy, The Cucumber Book: Behaviour-Driven Development for Testers and Developers, Pragmatic Programmers, LLC, 2012. Google Scholar"			Included	Included	new_screen			2	IEEE		Behaviour-driven formal model development	https://ieeexplore.ieee.org/document/8882769	IEEE	nan; Pages; Year; Bibtex
100	Behave	The Merb Way	Foy is a gifted writer and his descriptions of the philosophies that( impacted the design and implementation of Merb are definitely useful to( everyone affected by the changes in Rails 3. Obie Fernandez, Series Editor The Expert Guide to Building Merb Applications Thousands of Ruby and Rails developers are discovering the extraordinary scalability, agility, flexibility, and performance offered by the new Merb MVC framework. The Merb Way is the first comprehensive guide to using, extending, and deploying Merb. Like the bestseller The Rails Way (Addison-Wesley, 2008), this book can either be read cover-to-cover as a tutorial or used for modular coverage that makes it an ideal task reference. Foy Savas systematically covers everything developers need to know to build production-quality Merb applications, offering detailed code examples for jumpstarting virtually any project. Savas is not only involved in the Merb project as an open source contributor: He uses Merb every day as a professional developer. Drawing on his extensive practical expertise, he delves deeply into the Merb frameworks architecture and source code, revealing its elegance and offering powerful best practices for using it. To maximize this books practical value, he also covers the tools most widely used alongside Merb, including the DataMapper ORM, the RSpec tester (and associated behavior-driven development techniques), and several leading Merb plugins. The Merb Way will help you Master Merb innovations that will be incorporated into Rails 3 Understand the fundamentals of Merb development, one step at a time Use Merbs sophisticated application router to guide incoming requests Explore the Merb stack, master its configuration options, and dive into its internals Use Merb controllers to integrate application code, handle responses, and manage sessions, filters, and exceptions Build templates with both ERB (Erubis) and HAML Use the DataMapper ORM to represent object properties and behaviors Learn best practices for RESTful development with Merb Leverage Helpers to simplify many common development tasks Refactor code, encapsulate it in gems, and share it across multiple applications Customize the responses your application sends to each user Gain a deep, practical understanding of Merb plugins and extensibility Authenticate users with Merbs modular authentication plugin Configure, generate, describe, and test Merb mailers Use the merb-parts gem to create component-like regions on Web pages Cache content to relieve stress on Web servers Make the most of Behavior Driven Development and testing with RSpec		Savas, Foy						Excluded	Excluded	new_screen			2						
101	Behave	"""BDD Assemble!"": A Paper-Based Game Proposal for Behavior Driven Development Design Learning"	"Game-based learning represents a promising alternative to teach computing in higher education. This paper presents ""BDD Assemble!"", a paper-based game proposal for teaching Behavior Driven Development (BDD) competences. For this, the proposed game and the evaluation approach with software engineering students are described. As a result, a simple, interactive and colaborative game was provided, able to teach BDD concepts in a practical, competitive and fun way. (c) IFIP International Federation for Information Processing, 2019."	Boolean functions; Software engineering; Behavior Driven Development; Development designs; Educational game; Evaluation approach; Game-based Learning; Higher education; Software engineering students; Serious games	Sarinho, Victor T.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-030-34644-7_41	de Carvalho, R.A., Manhaes, R.S.(2010)Mapping Business Process Modeling Constructs to Behavior Driven Development Ubiquitous Language.Cited 13 times.; Dalpiaz, F., Cooper, K.M.Games for requirements engineers: Analysis and directions(2018)IEEE Software.Cited 4 times.; Hermann, A.C.(2016)BDD Warriors & Other GamesDecember, Accessed 31 May 2019https://pt.slideshare.net/inovacaoDBServer/bdd-warriors-and-other-games; Hindsight: Try Our BDD Gamehttps://www.hindsightsoftware.com/bdd-game; Kudryashov, K.(2015)The beginner's Guide to BDD.Cited 2 times.Dan North Q & Ahttps://inviqa.com/blog/bdd-guide; Lombriser, P., Dalpiaz, F., Lucassen, G., Brinkkemper, S.; Lund, A.M.Measuring usability with the use questionnaire12(2001)Usability Interface, 8 (2), pp. 3-6.Cited 1007 times.; North, D.Introducing(2006)BDD.Cited 2 times.March, Accessed 31 May 2019https://dannorth.net/introducing-bdd/; Rahman, M., Gao, J.; Solis, C., Wang, X.	431 - 435	"@ARTICLE{Sarinho2019431,
    author = ""Sarinho, Victor T."",
    editor = ""van der Spek E. and S., Gobel and E., Do and E., Clua and J., Baalsrud Hauge"",
    title = """"BDD Assemble!"": A Paper-Based Game Proposal for Behavior Driven Development Design Learning"",
    year = ""2019"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""11863 LNCS"",
    pages = ""431 - 435"",
    doi = ""10.1007/978-3-030-34644-7\_41"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076955587\&doi=10.1007\%2f978-3-030-34644-7\_41\&partnerID=40\&md5=bb3285eb5155fe4140cf6abbc54713c9"",
    affiliations = ""Laboratorio de Entretenimento Digital Aplicado (LEnDA), State University of Feira de Santana, Av. Transnordestina, s/n, Novo Horizonte, Feira de Santana, Bahia, Brazil"",
    abstract = ""Game-based learning represents a promising alternative to teach computing in higher education. This paper presents ""BDD Assemble!"", a paper-based game proposal for teaching Behavior Driven Development (BDD) competences. For this, the proposed game and the evaluation approach with software engineering students are described. As a result, a simple, interactive and colaborative game was provided, able to teach BDD concepts in a practical, competitive and fun way. (c) IFIP International Federation for Information Processing, 2019."",
    author_keywords = ""Behavior Driven Development; Educational game; Paper-based game"",
    keywords = ""Boolean functions; Software engineering; Behavior Driven Development; Development designs; Educational game; Evaluation approach; Game-based Learning; Higher education; Software engineering students; Serious games"",
    correspondence_address = ""V.T. Sarinho; Laboratorio de Entretenimento Digital Aplicado (LEnDA), State University of Feira de Santana, Novo Horizonte, Feira de Santana, Av. Transnordestina, s/n, Brazil; email: vsarinho@uefs.br"",
    publisher = ""Springer"",
    issn = ""03029743"",
    isbn = ""978-303034643-0"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1; Conference name: 1st IFIP TC 14 Joint International Conference on Entertainment Computing and Serious Games, ICEC-JCSG 2019; Conference date: 11 November 2019 through 15 November 2019; Conference code: 234589""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		“BDD Assemble!”: A Paper-Based Game Proposal for Behavior Driven Development Design Learning	https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076955587&doi=10.1007%2f978-3-030-34644-7_41&partnerID=40&md5=bb3285eb5155fe4140cf6abbc54713c9	Springer	
102	Behave	JavaScript Testing with Jasmine: JavaScript Behavior-Driven Development	Get a concise introduction to Jasmine, the popular behavior-driven testing framework for JavaScript. This practical guide shows you how to write unit tests with Jasmine that automatically check for bugs in your application. Learn how to write specifications for individual components, and then use those specs to test the code you write.Throughout the book, author Evan Hahn focuses primarily on methods for testing browser-based JavaScript applications, but youll also discover how to use Jasmine with CoffeeScript, Node.js, Ruby on Rails, and Ruby without Rails. You wont find a more in-depth source for Jasmine anywhere.Get an overview of both test-driven and behavior-driven development Write useful specs by determining what you need to testand what you dont Test the behavior of new and existing code against the specs you create Apply Jasmine matchers and discover how to build your own Organize code suites into groups and subgroups as your code becomes more complex Use a Jasmine spy in place of a function or an objectand learn why its valuable		Hahn, Evan						Excluded	Excluded	new_screen			2						
103	Behave	A real-life application of multi-agent systems for fault diagnosis in the provision of an Internet business service	Given that telecommunications networks are constantly groing in complexity and heterogeneity, management systems have to ork ith incomplete data, handle uncertain situations and deal ith dynamic environments. In addition, the high competitiveness in the telecommunications market requires cost cutting and customer retention by providing reliable systems. Thus, improving fault diagnosis systems and reducing the mean time to repair ith automatic systems is an important area of research for telecommunications companies. This paper presents a Fault Diagnosis Multi-Agent System (MAS) applied for the management of a business service of Telefonica Czech Republic. The proposed MAS is based on an extended Belief-Desire-Intention (BDI) model that combines heterogeneous reasoning processes, ontology-based reasoning and Bayesian reasoning. This hybrid diagnostic technique is described in detail in the paper. The system has been evaluated ith data collected during one and a half years of system operation on a live network. The main benefits of the system have been a significant reduction in both the average incident solution time and the mean diagnosis time. (c) 2012 Elsevier Ltd.	Agents; Bayesian networks; Complex networks; Diagnosis; Multi agent systems; Repair; BDI; Belief-desire-intention models; Fault diagnosis systems; Heterogeneous reasoning; Real-life applications; Telecommunications markets; Telecommunications networks; Uncertainty; Information management	Carrera, Alvaro; Iglesias, Carlos A.; Garcia-Algarra, Javier; Kolarik, Dusan	Journal of Network and Computer Applications	https://doi.org/10.1016/j.jnca.2012.11.004		146 - 154	"@ARTICLE{Carrera2014146,
    author = ""Carrera, Alvaro and Iglesias, Carlos A. and Garcia-Algarra, Javier and Kolarik, Dusan"",
    title = ""A real-life application of multi-agent systems for fault diagnosis in the provision of an Internet business service"",
    year = ""2014"",
    journal = ""Journal of Network and Computer Applications"",
    volume = ""37"",
    number = ""1"",
    pages = ""146 - 154"",
    doi = ""10.1016/j.jnca.2012.11.004"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84890440026\&doi=10.1016\%2fj.jnca.2012.11.004\&partnerID=40\&md5=c02588feadfa1a138164a0a16ccc365c"",
    affiliations = ""Department of Telematic Engineering Systems, Universidad Politecnica de Madrid, ETSI Telecomunicacion, 28040 Madrid, Av. Complutense 30, Spain; Telefonica Investigacion y Desarrollo, 28050 Madrid, Ronda de la Comunicacion s/n, Spain; IP Netork and Services, Telefonica Czech Republic, 130 00 Praha, Olsanska 6, Czech Republic"",
    abstract = ""Given that telecommunications networks are constantly groing in complexity and heterogeneity, management systems have to ork ith incomplete data, handle uncertain situations and deal ith dynamic environments. In addition, the high competitiveness in the telecommunications market requires cost cutting and customer retention by providing reliable systems. Thus, improving fault diagnosis systems and reducing the mean time to repair ith automatic systems is an important area of research for telecommunications companies. This paper presents a Fault Diagnosis Multi-Agent System (MAS) applied for the management of a business service of Telefonica Czech Republic. The proposed MAS is based on an extended Belief-Desire-Intention (BDI) model that combines heterogeneous reasoning processes, ontology-based reasoning and Bayesian reasoning. This hybrid diagnostic technique is described in detail in the paper. The system has been evaluated ith data collected during one and a half years of system operation on a live network. The main benefits of the system have been a significant reduction in both the average incident solution time and the mean diagnosis time. (c) 2012 Elsevier Ltd."",
    author_keywords = ""Agent; Bayesian network; BDI; Diagnosis; Netork management; Uncertainty"",
    keywords = ""Agents; Bayesian networks; Complex networks; Diagnosis; Multi agent systems; Repair; BDI; Belief-desire-intention models; Fault diagnosis systems; Heterogeneous reasoning; Real-life applications; Telecommunications markets; Telecommunications networks; Uncertainty; Information management"",
    correspondence_address = ""A. Carrera; Department of Telematic Engineering Systems, Universidad Politecnica de Madrid, ETSI Telecomunicacion, 28040 Madrid, Av. Complutense 30, Spain; email: a.carrera@dit.upm.es"",
    issn = ""10958592"",
    language = ""English"",
    abbrev_source_title = ""J Network Comput Appl"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 19""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		A real-life application of multi-agent systems for fault diagnosis in the provision of an Internet business service	https://www.scopus.com/record/display.uri?eid=2-s2.0-84890440026&origin=resultslist&sort=plf-f&src=s&sid=ca6f7b61ec7d3d0397052adf79993853&sot=b&sdt=b&s=TITLE-ABS-KEY%28a+real+life+application+of+multi+agent+systems+for+fault+diagnosis+in+the+provision+of+an+internet+business+service%29&sl=130&sessionSearchId=ca6f7b61ec7d3d0397052adf79993853&relpos=0		nan; References; Publisher
104	Behave	Behavior-driven development (BDD) Cucumber Katalon for Automation GUI testing case CURA and Swag Labs	Graphical user interface (GUI) is widely used in software applications. About 50% of the application code is for GUI implementation. Because labor costs are high and demands for high-quality software are increasing, automation GUI testing will be a good investment for any software company. We will apply the Behavior-driven development (BDD) method for automation GUI testing with the Cucumber framework on the CURA and Swag Labs web applications. The BDD methodology used is based on the NLP (natural language program) concept. Where the information of semi-automatically produce a step definition and code framework. The scenarios are given on the natural language and then applied to Software Testing. Class diagrams and sequence diagrams are also applied to each represent a code framework automatically. The author uses Katalon Studio software. It was found that the results of the test case automation GUI testing on the CURA website with 210 steps passed, 3 step warnings with average responses times in the test case were 1.92 minutes. The results of the test case automation GUI testing on the Swag Labs web with 87 where 36 steps failed, 4 step warning and 44 step passed with an average responses times in the test case are 2,122 minutes.	Software testing; Automation; Multimedia systems; Natural languages; Software; Graphical user interfaces; Testing; Cucumber; Graphical User Interface; Graphical User Interface Testing; Behavior Driven Development; Response Time; Testing Results; Natural Language; Labor Costs; Web Application; Software Applications; Software Testing; Sequence Diagram; Class Diagram; Software Development; Testing Tools; Test Suite; Implementation Of Testing; Acceptable Test; Manual Testing; Average Response Time; Agile Development; Empirical Software Engineering; Software Testing Automation; GUI Testing; Behavior-driven Development; Cucumber	Rizal Broer Bahaweres; Elda Oktaviani; Luh Kesuma Wardhani; Irman Hermadi; ArifImam Suroso; Indra Permana Solihin; Yandra Arkeman	2020 International Conference on Informatics, Multimedia, Cyber and Information System (ICIMCIS)	https://doi.org/10.1109/ICIMCIS51567.2020.9354325	"1.L. Wang, GUI test automation for Qt application, 2015. Google Scholar; 2.T. D. Hellmann, Automated GUI Testing for Agile Development Environments, 2015. Google Scholar; 3.D. Kumar and K. K. Mishra, ""The Impacts of Test Automation on Software's Cost Quality and Time to Market"", Procedia Comput. Sci., vol. 79, pp. 8-15, 2016. CrossRef  Google Scholar; 4.M. Rahman and J. Gao, ""A reusable automated acceptance testing architecture for microservices in behavior-driven development"", Proc. - 9th IEEE Int. Symp. Serv. Syst. Eng. IEEE SOSE 2015, vol. 30, pp. 321-325, 2015. View Article  Google Scholar; 5.R. M. Sharma, Quantitative Analysis of Automation and Manual Testing, vol. 4, no. 1, pp. 252-257, 2014. Google Scholar; 6.L. Raed and M. Besse, Use BDD To Make Your Software Development Project More Successful, vol. 1, no. 617, pp. 1-9, 2015. Google Scholar; 7.J. Ferguson and D. North, Behavior Driven Development for the whole software lifecycle, 2014. Google Scholar; 8.TDD vs BDD or Why BDD is the New Black, 2016. Google Scholar; 9.M. Soeken, R. Wille and R. Drechsler, ""Assisted behavior driven development using natural language processing"", Lect. Notes Comput. Sci. (including Subser. Lect. Notes Artif. Intell. Lect. Notes Bioinformatics), vol. 7304 LNCS, pp. 269-287, 2012. CrossRef  Google Scholar; 10.S. T. Help, Selenium Vs Katalon Studio: How To Simplify Selenium Tests In Katalon Studio,  [online]  Available: https://www.softwaretestinghelp.com/selenium-vs-katalon-studio/. Google Scholar; 11.M. M. Muhtadi, M. D. Friyadi and A. Rahmani, ""Analisis GUI Testing pada Aplikasi E-Commerce menggunakan Katalon"", Pros. Ind. Res. Work. Natl. Semin., vol. 10, no. 1, pp. 1387-1393, 2019. Google Scholar; 12.H. Herlinda, D. Katarina, E. W. Ambarsari and M. Kom, ""Automation Testing Tool dalam Pengujian Aplikasi Belajar Tajwid pada Platform Android"", STRING (Satuan Tulisan Ris. dan Inov. Teknol., vol. 4, no. 2, pp. 205, 2019. CrossRef  Google Scholar; 13.H. Naik, ""Behavior Driven Development: An Effective Technical Practice to Develop Good Software"", Int. J. Comput. Appl., vol. 149, no. 5, pp. 23-27, 2016. CrossRef  Google Scholar; 14.V. Garousi and E. Yildirim, ""Introducing automated GUI testing and observing its benefits: An industrial case study in the context of law-practice management software"", Proc. - 2018 IEEE 11th Int. Conf. Softw. Testing Verif. Valid. Work. ICSTW 2018, pp. 138-145, July 2018. View Article  Google Scholar; 15.N. Cruz Quental, C. de Albuquerque Siebra, J. Peixoto Quintino, F. Florentin, F. Queda Bueno da Silva and A. L. de Medeiros Santos, Automating GUI Response Time Measurements in Mobile and Web Applications, pp. 35-41, 2019. View Article  Google Scholar; 16.R. B. Bahaweres, K. Zawawi, D. Khairani and N. Hakiem, Software Testing With Genetic Algorithm, pp. 19-21, September 2017. Google Scholar; 17.M. A. Umar and Z. Chen, A Study of Automated Software Testing: Automation Tools and Frameworks, December 2019. Google Scholar; 18.S. Rose, M. Wynne and A. Hellesoy, The Cucumber For Java Book, 2015. Google Scholar"			Included	Included	new_screen			2	IEEE		Behavior-driven development (BDD) Cucumber Katalon for Automation GUI testing case CURA and Swag Labs	https://ieeexplore.ieee.org/document/9354325	IEEE	nan; Pages; Year; Bibtex
105	Behave	Behaviour driven development for hardware design	Hardware verification requires a lot of effort. A recent study showed that on average, there are more verification engineers working on a project than design engineers. Hence, one of the biggest challenges in design and verification today is to find new ways to increase the productivity. For software development the agile methodology as an incremental approach has been proposed and is heavily used. Behavior Driven Development (BDD) as an agile technique additionally enables a direct link to natural language based testing. In this article, we show how BDD can be extended to make it viable for hardware design. In addition, we present a two-fold strategy which allows to specify textual acceptance tests and textual formal properties. Finally, this strategy is complemented by methods to generalize tests to properties, and to enhance design understanding by presenting debug and witness scenarios in natural language. © 2018 Information Processing Society of Japan.		Diepenbeck M., Kühne U., Soeken M., Grosse D., Drechsler R.	IPSJ Transactions on System LSI Design Methodology					Included	Included	new_screen			2						
106	Behave	Using acceptance tests to predict files changed by programming tasks	In a collaborative development context, conflicting code changes might compromise software quality and developers productivity. To reduce conflicts, one could avoid the parallel execution of potentially conflicting tasks. Although hopeful, this strategy is challenging because it relies on the prediction of the required file changes to complete a task. As predicting such file changes is hard, we investigate its feasibility for BDD (Behaviour-Driven Development) projects, which write automated acceptance tests before implementing features. We develop a tool that, for a given task, statically analyzes Cucumber tests and infers test-based interfaces (files that could be executed by the tests), approximating files that would be changed by the task. To assess the accuracy of this approximation, we measure precision and recall of test-based interfaces of 513 tasks from 18 Rails projects on GitHub. We also compare such interfaces with randomly defined interfaces, interfaces obtained by textual similarity of test specifications with past tasks, and interfaces computed by executing tests. Our results give evidence that, in the specific context of BDD, Cucumber tests might help to predict files changed by tasks. We find that the better the test coverage, the better the predictive power. A hybrid approach for computing test-based interfaces is promising.	Collaborative development, Task scheduling, Behaviour-driven development, File change prediction	Rocha, Thaís; Borba, Paulo; Santos, João Pedro	Journal of Systems and Software					Included	Included	new_screen			2						
107	Behave	Ensuring the Consistency Between User Requirements and GUI Prototypes: A Behavior-Based Automated Approach	In a user-centered design process, graphical user interface (GUI) prototypes may be seen as an important early artifact to design and validate user requirements before making strong commitments with a full-fledged version of the user interface. Ensuring the consistency of GUI prototypes with other representations of the user requirements is then a critical aspect of the design process. This paper presents an approach which extends Behavior-Driven Development (BDD) by employing an ontology in order to provide automated assessment for GUI prototypes as design artifacts. The approach has been evaluated by exploiting user requirements described by a group of experts in the flight tickets e-commerce domain. Such requirements gave rise to a set of User Stories that have been used to automatically check the consistency of Balsamiq prototypes which were reengineered from an existing web system for booking business trips. The results have shown our approach was able to identify different types of inconsistencies in the set of analyzed artifacts, allowing to build an effective correspondence between user requirements and their representation in GUI prototypes. © IFIP International Federation for Information Processing 2019.		Rocha Silva T., Winckler M., Trætteberg H.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
108	Behave	Definition of a Behavior-Driven Model for Requirements Specification and Testing of Interactive Systems	In a user-centered development process, artifacts are aimed to evolve in iterative cycles until they meet users' requirements and then become the final product. Every cycle gives the opportunity to revise the design and to introduce new requirements which might affect the specification of artifacts that have been set in former development phases. Testing the consistency of multiple artifacts used to develop interactive systems every time that a new requirement is introduced it is a cumbersome and time consuming activity, especially if it should be done manually. For that we propose an approach based on Behavior-Driven Development (BDD) to support the automated assessment of artifacts along the development process of interactive systems. In order to prevent that test should be written to every type of artifact, we investigate the use of ontologies for specifying the test once and then run it in all artifacts sharing the ontological concepts. (c) 2016 IEEE.	Ontology; Requirements engineering; Software prototyping; Automated assessment; Automated Requirements Checking; Behavior-Driven Development; Development process; Interactive system; Ontological modeling; Requirements specifications; User-centered development; Specifications	Silva, Thiago Rocha	Proceedings - 2016 IEEE 24th International Requirements Engineering Conference, RE 2016	https://doi.org/10.1109/RE.2016.12		444 - 449	"@CONFERENCE{Silva2016444,
    author = ""Silva, Thiago Rocha"",
    title = ""Definition of a Behavior-Driven Model for Requirements Specification and Testing of Interactive Systems"",
    year = ""2016"",
    journal = ""Proceedings - 2016 IEEE 24th International Requirements Engineering Conference, RE 2016"",
    pages = ""444 - 449"",
    doi = ""10.1109/RE.2016.12"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007236127\&doi=10.1109\%2fRE.2016.12\&partnerID=40\&md5=d3927e222108577ce820f94d2282ce7f"",
    affiliations = ""ICS-IRIT, Universite Paul Sabatier - Toulouse III, Toulouse, France"",
    abstract = ""In a user-centered development process, artifacts are aimed to evolve in iterative cycles until they meet users' requirements and then become the final product. Every cycle gives the opportunity to revise the design and to introduce new requirements which might affect the specification of artifacts that have been set in former development phases. Testing the consistency of multiple artifacts used to develop interactive systems every time that a new requirement is introduced it is a cumbersome and time consuming activity, especially if it should be done manually. For that we propose an approach based on Behavior-Driven Development (BDD) to support the automated assessment of artifacts along the development process of interactive systems. In order to prevent that test should be written to every type of artifact, we investigate the use of ontologies for specifying the test once and then run it in all artifacts sharing the ontological concepts. (c) 2016 IEEE."",
    author_keywords = ""Automated Requirements Checking; Behavior-Driven Development; Multi-Artifact Testing; Ontological Modeling; Prototyping"",
    keywords = ""Ontology; Requirements engineering; Software prototyping; Automated assessment; Automated Requirements Checking; Behavior-Driven Development; Development process; Interactive system; Ontological modeling; Requirements specifications; User-centered development; Specifications"",
    correspondence_address = ""T.R. Silva; ICS-IRIT, Universite Paul Sabatier - Toulouse III, Toulouse, France; email: rocha@irit.fr"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-150904121-3"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Requir. Eng. Conf., RE"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 9; Conference name: 24th IEEE International Requirements Engineering Conference, RE 2016; Conference date: 12 September 2016 through 16 September 2016; Conference code: 125191; All Open Access, Green Open Access""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Definition of a Behavior-Driven Model for Requirements Specification and Testing of Interactive Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-85007236127&origin=resultslist&sort=plf-f&src=s&sid=25e0d50dc4ea41c299cd174b495bde06&sot=b&sdt=b&s=TITLE-ABS-KEY%28definition+of+a+behavior+driven+model+for+requirements+specification+and+testing+of+interactive+systems%29&sl=118&sessionSearchId=25e0d50dc4ea41c299cd174b495bde06&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
109	Behave	Testing prototypes and final user interfaces through an ontological perspective for behavior-driven development	In a user-centered development process, prototypes evolve in iterative cycles until they meet users’ requirements and then become the final product. Every cycle gives the opportunity to revise the design and to introduce new requirements which might affect the specification of artifacts that have been set in former development phases. Testing the consistency of multiple artifacts used to develop interactive systems every time that a new requirement is introduced is a cumbersome activity, especially if it is done manually. This paper proposes an approach based on Behavior-Driven Development (BDD) to support the automated assessment of artifacts along the development process of interactive systems. The paper uses an ontology for specifying tests that can run over multiple artifacts sharing similar concepts. A case study testing Prototypes and Final User Interfaces is presented to demonstrate the feasibility of this approach in early phases of the design process, providing a continuous quality assurance of requirements, and helping clients and development teams to identify potential problems and inconsistencies before commitments with software implementation. © IFIP International Federation for Information Processing 2016.		Silva T.R., Hak J.-L., Winckler M.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
110	Behave	A Domain Specific Test Language for Systems Integration	In avionic context, systems are complex, embedded, critical, reactive and real time. In this context, testing activities are predominant in a V development process. We propose to bring in some features coming from agile methods. System integration testing that means systems are tested individually and together in order to ensure that they all operate correctly. We focus on functional and system integration testing just before the ground testing phase. Nowadays, test procedures and test plans we studied are described in textual manner and are executed manually. We aim to provide a common specific language that improves communications for the team of test designers and between test designers and test performers. In the same manner as agile test frameworks, this language allows to structure the test procedures. Moreover, this language tends to facilitate the automatic execution of some parts of the procedures. We choose a domain specific language approach to design a first domain specific test language dedicated to networks system integration.	Domain Specific Language; Test procedure; Test system	Robin Bussenot; Herve Leblanc; Christian Percebois	XP '16 Workshops: Proceedings of the Scientific Workshop Proceedings of XP2016	https://doi.org/10.1145/2962695.2962711		1-10		Excluded	Excluded	new_screen			2	ACM		A Domain Specific Test Language for Systems Integration	https://dl.acm.org/doi/10.1145/2962695.2962711	Association for Computing Machinery	nan; References; Year; Bibtex
111	Behave	Assisted Behavior Driven Development Using Natural Language Processing	In Behavior Driven Development (BDD), acceptance tests provide the starting point for the software design flow and serve as a basis for the communication between designers and stakeholders. In this agile software development technique, acceptance tests are written in natural language in order to ensure a common understanding between all members of the project. As a consequence, mapping the sentences to actual source code is the first step of the design flow, which is usually done manually.However, the scenarios described by the acceptance tests provide enough information in order to automatize the extraction of both the structure of the implementation and the test cases. In this work, we propose an assisted flow for BDD where the user enters into a dialog with the computer which suggests code pieces extracted from the sentences. For this purpose, natural language processing techniques are exploited. This allows for a semi-automatic transformation from acceptance tests to source code stubs and thus provides a first step towards an automatization of BDD.		Soeken, Mathias; Wille, Robert; Drechsler, Rolf	Proceedings of the 50th International Conference on Objects, Models, Components, Patterns					Included	Included	new_screen			2						
112	Behave	Maintaining behaviour driven development specifications: Challenges and opportunities	In Behaviour-Driven Development (BDD) the behaviour of a software system is specified as a set of example interactions with the system using a 'Given-When-Then' structure. These examples are expressed in high level domain-specific terms, and are executable. They thus act both as a specification of requirements and as tests that can verify whether the current system implementation provides the desired behaviour or not. This approach has many advantages but also presents some problems. When the number of examples grows, BDD specifications can become costly to maintain and extend. Some teams find that parts of the system are effectively frozen due to the challenges of finding and modifying the examples associated with them. We surveyed 75 BDD practitioners from 26 countries to understand the extent of BDD use, its benefits and challenges, and specifically the challenges of maintaining BDD specifications in practice. We found that BDD is in active use amongst respondents, and that the use of domain specific terms, improving communication among stakeholders, the executable nature of BDD specifications, and facilitating comprehension of code intentions are the main benefits of BDD. The results also showed that BDD specifications suffer the same maintenance challenges found in automated test suites more generally. We map the survey results to the literature, and propose 10 research opportunities in this area. (c) 2018 IEEE.	Reengineering; Specifications; Surveys; Automated test; behaviour-driven development; Domain specific; High-level domain; Research opportunities; Software systems; System implementation; Test suites; Boolean functions	Binamungu, Leonard Peter; Embury, Suzanne M.; Konstantinou, Nikolaos	25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings	https://doi.org/10.1109/SANER.2018.8330207		175 - 184	"@CONFERENCE{Binamungu2018175,
    author = ""Binamungu, Leonard Peter and Embury, Suzanne M. and Konstantinou, Nikolaos"",
    title = ""Maintaining behaviour driven development specifications: Challenges and opportunities"",
    year = ""2018"",
    journal = ""25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings"",
    volume = ""2018-March"",
    pages = ""175 - 184"",
    doi = ""10.1109/SANER.2018.8330207"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051037084\&doi=10.1109\%2fSANER.2018.8330207\&partnerID=40\&md5=ecd970534150c2cf0a2a95b3019ee91e"",
    affiliations = ""School of Computer Science, University of Manchester, Manchester, United Kingdom"",
    abstract = ""In Behaviour-Driven Development (BDD) the behaviour of a software system is specified as a set of example interactions with the system using a 'Given-When-Then' structure. These examples are expressed in high level domain-specific terms, and are executable. They thus act both as a specification of requirements and as tests that can verify whether the current system implementation provides the desired behaviour or not. This approach has many advantages but also presents some problems. When the number of examples grows, BDD specifications can become costly to maintain and extend. Some teams find that parts of the system are effectively frozen due to the challenges of finding and modifying the examples associated with them. We surveyed 75 BDD practitioners from 26 countries to understand the extent of BDD use, its benefits and challenges, and specifically the challenges of maintaining BDD specifications in practice. We found that BDD is in active use amongst respondents, and that the use of domain specific terms, improving communication among stakeholders, the executable nature of BDD specifications, and facilitating comprehension of code intentions are the main benefits of BDD. The results also showed that BDD specifications suffer the same maintenance challenges found in automated test suites more generally. We map the survey results to the literature, and propose 10 research opportunities in this area. (c) 2018 IEEE."",
    author_keywords = ""behaviour-driven development; test suite evolution; test suite maintenance"",
    keywords = ""Reengineering; Specifications; Surveys; Automated test; behaviour-driven development; Domain specific; High-level domain; Research opportunities; Software systems; System implementation; Test suites; Boolean functions"",
    correspondence_address = ""L.P. Binamungu; School of Computer Science, University of Manchester, Manchester, United Kingdom; email: leonardpeter.binamungu@manchester.ac.uk"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-153864969-5"",
    language = ""English"",
    abbrev_source_title = ""IEEE Int. Conf. Softw. Anal., Evol. Reengineering, SANER - Proc."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 18; Conference name: 25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018; Conference date: 20 March 2018 through 23 March 2018; Conference code: 135723; All Open Access, Green Open Access""
}"	Included	Included	new_screen			2	ScopusSignedIn		Maintaining behaviour driven development specifications: Challenges and opportunities	https://www.scopus.com/record/display.uri?eid=2-s2.0-85051037084&origin=resultslist&sort=plf-f&src=s&sid=846059c0a2311614eff4ccbcc61ff5c9&sot=b&sdt=b&s=TITLE-ABS-KEY%28maintaining+behaviour+driven+development+specifications+challenges+and+opportunities%29&sl=99&sessionSearchId=846059c0a2311614eff4ccbcc61ff5c9&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
113	Behave	Detecting duplicate examples in behaviour driven development specifications	In Behaviour-Driven Development (BDD), the behaviour of the software to be built is specified as a set of example interactions with the system, expressed using a 'Given-When-Then' structure. The examples are written using customer language, and are readable by end-users. They are also executable, and act as tests that determine whether the implementation matches the desired behaviour or not. This approach can be effective in building a common understanding of the requirements, but it can also face problems. When the suites of examples grow large, they can be difficult and expensive to change. Duplication can creep in, and can be challenging to detect manually. Current tools for detecting duplication in code are also not effective for BDD examples. Moreover, human concerns of readability and clarity can rise. We present an approach for detecting duplication in BDD suites that is based around dynamic tracing, and describe an evaluation based on three open source systems. (c) 2018 IEEE.	Boolean functions; Open source software; Software testing; Behaviour-driven development; Duplication detection; End users; In-buildings; Open source system; Open systems	Binamungu, Leonard Peter; Embury, Suzanne M.; Konstantinou, Nikolaos	2018 IEEE 2nd International Workshop on Validation, Analysis and Evolution of Software Tests, VST 2018 - Proceedings	https://doi.org/10.1109/VST.2018.8327149		6 - 10	"@CONFERENCE{Binamungu20186,
    author = ""Binamungu, Leonard Peter and Embury, Suzanne M. and Konstantinou, Nikolaos"",
    title = ""Detecting duplicate examples in behaviour driven development specifications"",
    year = ""2018"",
    journal = ""2018 IEEE 2nd International Workshop on Validation, Analysis and Evolution of Software Tests, VST 2018 - Proceedings"",
    volume = ""2018-March"",
    pages = ""6 - 10"",
    doi = ""10.1109/VST.2018.8327149"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051002229\&doi=10.1109\%2fVST.2018.8327149\&partnerID=40\&md5=83750c109eb712ae38b32d237b14dafc"",
    affiliations = ""School of Computer Science, University of Manchester, Manchester, United Kingdom"",
    abstract = ""In Behaviour-Driven Development (BDD), the behaviour of the software to be built is specified as a set of example interactions with the system, expressed using a 'Given-When-Then' structure. The examples are written using customer language, and are readable by end-users. They are also executable, and act as tests that determine whether the implementation matches the desired behaviour or not. This approach can be effective in building a common understanding of the requirements, but it can also face problems. When the suites of examples grow large, they can be difficult and expensive to change. Duplication can creep in, and can be challenging to detect manually. Current tools for detecting duplication in code are also not effective for BDD examples. Moreover, human concerns of readability and clarity can rise. We present an approach for detecting duplication in BDD suites that is based around dynamic tracing, and describe an evaluation based on three open source systems. (c) 2018 IEEE."",
    author_keywords = ""Behaviour-driven development; Duplication detection; Dynamic tracing"",
    keywords = ""Boolean functions; Open source software; Software testing; Behaviour-driven development; Duplication detection; End users; In-buildings; Open source system; Open systems"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-153866492-6"",
    language = ""English"",
    abbrev_source_title = ""IEEE Int. Workshop Valid., Anal. Evol. Softw. Tests, VST - Proc."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 9; Conference name: 2nd IEEE International Workshop on Validation, Analysis and Evolution of Software Tests, VST 2018; Conference date: 20 March 2018; Conference code: 135603""
}"	Included	Included	new_screen			2	ScopusSignedIn		Detecting duplicate examples in behaviour driven development specifications	https://www.scopus.com/record/display.uri?eid=2-s2.0-85051002229&origin=resultslist&sort=plf-f&src=s&sid=2a64eb24fadad1f09b29454e497d661d&sot=b&sdt=b&s=TITLE-ABS-KEY%28detecting+duplicate+examples+in+behaviour+driven+development+specifications%29&sl=90&sessionSearchId=2a64eb24fadad1f09b29454e497d661d&relpos=0	Institute of Electrical and Electronics Engineers Inc.	nan; References
114	Behave	Integrating Behavior Driven Development and Programming by Contract to Improve Correctness in Computer Programs	"In many professional development settings, Test Driven Development (TDD), and its evolutionary descendent, Behavior Driven Development (BDD) are increasingly being used to improve code quality and reducing error rates. While very valuable, they are considerably less rigorous than formal methodologies of program correctness via formal logic. A less rigorous methodology utilizing the ideas of formal methods but without requiring an actual full proof are also in use called ""Design by Contract"" (DBC) or ""Programming by Contract."" (PBC) This thesis will examine extending and combining the ideas behind TDD, BDD and DBC to improve the overall stability and quality of a system. It will examine using both TDD/BDD (hereinafter referred to as TDD) and PBC to enhance the quality of development throughout the software development life cycle, while aiding in the development and stabilization of sound architecture. A result of this examination is a tool that attempts to derive unit tests automatically by analyzing human written specifications for preconditions and post-conditions when coupled with data definitions. These results will be used to generate code to be run by a unit testing framework before deployment, either as part of a continuous integration environment or by individual developers. The tool will also attempt to generate wireframe classes implementing pre and post-conditions within the code and using runtime contract analysis to generate information when an exception occurs, thereby helping to automate verification of bug fixes. Ultimately, the tool produced would be useful in a non-academic environment as a utility to extend the benefit of design by contract combined with TDD to the agile space."		Schoeneman, Larry						Excluded	Excluded	new_screen			2						
115	Behave	Leveraging natural-language requirements for deriving better acceptance criteria from models	In many software and systems development projects, analysts specify requirements using a combination of modeling and natural language (NL). In such situations, systematic acceptance testing poses a challenge because defining the acceptance criteria (AC) to be met by the system under test has to account not only for the information in the (requirements) model but also that in the NL requirements. In other words, neither models nor NL requirements per se provide a complete picture of the information content relevant to AC. Our work in this paper is prompted by the observation that a reconciliation of the information content in NL requirements and models is necessary for obtaining precise AC. We perform such reconciliation by devising an approach that automatically extracts AC-related information from NL requirements and helps modelers enrich their model with the extracted information. An existing AC derivation technique is then applied to the model that has now been enriched by the information extracted from NL requirements.	UML; acceptance criteria; acceptance testing; controlled natural language; gherkin; requirements validation and verification	Alvaro Veizaga; Mauricio Alferez; Damiano Torre; Mehrdad Sabetzadeh; Lionel Briand; Elene Pitskhelauri	MODELS '20: Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems	https://doi.org/10.1145/3365438.3410953		218-228		Excluded	Excluded	new_screen			2	ACM		Leveraging Natural-Language Requirements for Deriving Better Acceptance Criteria from Models	https://dl.acm.org/doi/10.1145/3365438.3410953	Association for Computing Machinery	nan; References; Year; Bibtex
116	Behave	Toward A Service Platform for Developing Smart Contracts on Blockchain in BDD and TDD Styles	In recent years, Blockchain technology has been highly valued, and the related applications have begun to be developed in large numbers. A smart contract is a software component encompass business logics and transactions that run on a blockchain. Thus, verifying whether the contract logics fully reflect the business requirements are one of the most important software engineering issues in blockchain application development. Currently, developing smart contracts is still a challenging task even for experienced programmers due to the lacking of an integrated tool for developing and testing. In response to this challenge, this paper presents a service platform that supports BDD-style (Behavior-Driven Development) smart contract development, testing, and deployment for the Ethereum-based blockchains. This platform focuses on providing and resolving the cross-cutting concerns across the life-cycle of smart contract development. The feasibility of this platform is shown by demonstrating how an application scenario, namely, loyalty points exchange, can be implemented using the proposed platform. Our experiences indicate that the burdens of developers when developing smart contracts can be effectively reduced and thus increases the quality of contracts.	Contracts; Testing; Software; Tools; Writing; Software engineering; Smart Contracts; Smart Contract Development; Test-driven Development; Behavior Driven Development; Software Engineering; Software Components; Business Logic; Blockchain Applications; Programming Language; Exchange Rate; Internet Of Things; Cucumber; Domain Experts; JavaScript; Testing Program; Testing Tools; Platform Design; Agile Development; Unit Tests; Implementation Of Platforms; Contract Management; Blockchain; Smart contract; Behavior-Driven Development; Test-Driven Development	Chun-Feng Liao; Ching-Ju Cheng; Kung Chen; Chen-Ho Lai; Tien Chiu; Chi Wu-Lee	2017 IEEE 10th Conference on Service-Oriented Computing and Applications (SOCA)	https://doi.org/10.1109/SOCA.2017.26	"1.S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system, 2008. Google Scholar; 2.N. Szabo, ""Formalizing and securing relationships on public networks"", First Monday, vol. 2, no. 9. CrossRef  Google Scholar; 3.G. Wood, ""Ethereum: A secure decentralised generalised transaction ledger"", Ethereum Project Yellow Paper, vol. 151, 2014. Google Scholar; 4.C. Cachin, ""Architecture of the hyperledger blockchain fabric"", Workshop on Distributed Cryptocurrencies and Consensus Ledgers, 2016. Google Scholar; 5.K. Christidis and M. Devetsikiotis, ""Blockchains and smart contracts for the internet of things"", IEEE Access, vol. 4, pp. 2292-2303, 2016. View Article  Google Scholar; 6.M. Swan, ""O'Reilly Media Inc"", Blockchain: Blueprint for a new economy, 2015. Google Scholar; 7.S. Porru, A. Pinna, M. Marchesi and R. Tonelli, ""Blockchain-oriented software engineering: challenges and new directions"", Proceedings of the 39th International Conference on Software Engineering Companion, pp. 169-171, 2017. View Article  Google Scholar; 8.C. Dannen, Introducing ethereum and solidity: Foundations of crypto currency and blockchain programming for beginners, 2017. Google Scholar; 9.K. Beck, Test-driven development: by example, Addison-Wesley Professional, 2003. Google Scholar; 10.J. F. Smart, BDD in Action, Manning, 2014. Google Scholar; 11.D. Mamnani, ""Testing of smart contracts in the blockchain world"", Blog post, 2017. Google Scholar; 12.L. Crispin and J. Gregory, Agile testing: A practical guide for testers and agile teams, Pearson Education, 2009. Google Scholar; 13.M. Gartner, ATDD by example: a practical guide to acceptance test-driven development, Addison-Wesley, 2012. Google Scholar; 14.M. Huttermann, ""Specification by example"", DevOps for Developers, pp. 157-170, 2012. CrossRef  Google Scholar; 15.W. Trumler and F. Paulisch, ""How specification by example and test-driven development help to avoid technial debt"", Managing Technical Debt (MTD) 2016 IEEE 8th International Workshop, pp. 1-8, 2016. View Article  Google Scholar; 16.C. Matts and G. Adzic, Feature injection: three steps to success, 2011. Google Scholar; 17.M. Wynne and A. Hellesoy, The cucumber book: behaviour-driven development for testers and developers, Pragmatic Bookshelf, 2012. Google Scholar; 18.R. Lawrence and P. Rayner, Behavior-Driven Development with Cucumber, 2016. Google Scholar; 19.N. Li, A. Escalona and T. Kamal, ""Skyfire: Model-based testing with cucumber"", Software Testing Verification and Validation (ICST) 2016 IEEE International Conference, pp. 393-400, 2016. CrossRef  Google Scholar; 20.M. Rahman and J. Gao, ""A reusable automated acceptance testing architecture for microservices in behavior-driven development"", Service-Oriented System Engineering (SOSE) 2015 IEEE Symposium, pp. 321-325, 2015. CrossRef  Google Scholar; 21.S. Sivanandan et al., ""Agile development cycle: Approach to design an effective model based testing with behaviour driven automation framework"", Advanced Computing and Communications (ADCOM) 2014 20th Annual International Conference, pp. 22-25, 2014. View Article  Google Scholar; 22.L. Richardson, M. Amundsen and S. Ruby, RESTful Web APls: Services for a Changing World, O'Reilly Media, 2013. Google Scholar"			Included	Included	new_screen			2	IEEE		Toward A Service Platform for Developing Smart Contracts on Blockchain in BDD and TDD Styles	https://ieeexplore.ieee.org/document/8241535	IEEE	nan; Pages; Year; Bibtex
117	Behave	Proposing regulatory-driven automated test suites for electronic health record systems	In regulated domains such as finance and health care, failure to comply with regulation can lead to financial, civil and criminal penalties. While systems vary from organization to organization, regulations apply across organizations. We propose the use of Behavior-Driven-Development (BDD) scenarios as the basis of an automated compliance test suite for standards such as regulation and interoperability. Such test suites could become a shared asset for use by all systems subject to these regulations and standards. Each system, then, need only create their own system-specific test driver code to automate their compliance checks. The goal of this research is to enable organizations to compare their systems to regulation in a repeatable and traceable way through the use of BDD. To evaluate our proposal, we developed an abbreviated HIPAA test suite and applied it to three open-source electronic health record systems. The scenarios covered all security behavior defined by the selected regulation. The system-specific test driver code covered all security behavior defined in the scenarios, and identified where the tested system lacked such behavior.	behavior-driven-development; healthcare it; regulatory compliance; security; software engineering; software testing	Patrick Morrison; Casper Holmgreen; Aaron Massey; Laurie Williams	SEHC '13: Proceedings of the 5th International Workshop on Software Engineering in Health Care	https://doi.org/10.5555/2663575.2663588		46-49		Included	Included	new_screen			2	ACM		Proposing Regulatory-Driven Automated Test Suites for Electronic Health Record Systems	https://dl.acm.org/doi/10.5555/2663575.2663588	IEEE Press	nan; References; Year; Bibtex
118	Behave	Proposing regulatory-driven automated test suites for electronic health record systems	In regulated domains such as finance and health care, failure to comply with regulation can lead to financial, civil and criminal penalties. While systems vary from organization to organization, regulations apply across organizations. We propose the use of Behavior-Driven-Development (BDD) scenarios as the basis of an automated compliance test suite for standards such as regulation and interoperability. Such test suites could become a shared asset for use by all systems subject to these regulations and standards. Each system, then, need only create their own system-specific test driver code to automate their compliance checks. The goal of this research is to enable organizations to compare their systems to regulation in a repeatable and traceable way through the use of BDD. To evaluate our proposal, we developed an abbreviated HIPAA test suite and applied it to three open-source electronic health record systems. The scenarios covered all security behavior defined by the selected regulation. The system-specific test driver code covered all security behavior defined in the scenarios, and identified where the tested system lacked such behavior.	behavior-driven-development; healthcare it; regulatory compliance; security; software engineering; software testing	Patrick Morrison; Casper Holmgreen; Aaron Massey; Laurie Williams	SEHC '13: Proceedings of the 5th International Workshop on Software Engineering in Health Care	https://doi.org/10.5555/2663575.2663588		46-49		Included	Included	new_screen			2	ACM		Proposing Regulatory-Driven Automated Test Suites	https://dl.acm.org/doi/10.5555/2663575.2663588	IEEE Press	nan; References; Year; Bibtex
119	Behave	Combining IID with BDD to Enhance the Critical Quality of Security Functional Requirements	In software system, functional requirements are primary system requirements. Client cannot explicitly depicted security requirements and the development team is hard to understand security requirements, makes security requirements difficult to specific implant software system. In software system development process, security requirements often neglected and ignored. However, the cost of correcting security flaws in maintenance phase is over 100 times in requirements phase. Can't effectively improve the system security, enterprises loss is bound to continue to expand. In order to enhance the security of software system, this paper combines the popular software development methodology IID (Interactive and Incremental Development) with BDD (Behavior Driven Development), institutionalized requires functional requirements must be integrated into security requirements. And, using BDD process features to evaluate the major quality of security functional requirements. Timely identifies and modifies the quality defects of security functional requirements item, effectively enhance the security of software systems.	Security; Data structures; Boolean functions; Software systems; Q-factor; Complexity theory; Critical Features; Functional Requirements; Behavior Driven Development; Development Process; Development Of System; System Software; Cybersecurity; Software Development; Processing Software; Development Team; Security Requirements; Incremental Development; Quality Defects; Popular Methodology; High-quality; Developed Model; Quality Measures; Low Complexity; Quality Factor; Scenario Description; Security Vulnerabilities; Agile Development; Refactoring; Non-functional Requirements; Acceptable Test; High Modularity; Quality Items; Quality Of Communication; Common Recognition; BDD; IID; security requirements; functional requirements; security functional requirements	Sen-Tarng Lai; Fang-Yie Leu; William Cheng-Chung Chu	2014 Ninth International Conference on Broadband and Wireless Computing, Communication and Applications	https://doi.org/10.1109/BWCCA.2014.78	"1.Meftah, B., ""Business Software Assurance: Identifying and Reducing Software Risk in the Enterprise,"" 9th Semi-Annual Software Assurance Forum, Gaithersburg, MD, October 2008. https://buildsecurityin.us-cert.gov/swa/downloads/Meftah.pdf. Google Scholar; 2.Tondel, I.A.;Jaatun, M.G.; Meland, P.H. ""Security Requirements for the Rest of Us: A Survey"", IEEE Software,vol. 25, no.1, 2008, pp.20-27. View Article  Google Scholar; 3.Pressman, R. S. ""Software Engineering: A Practitioner's Approach,"" McGraw-Hill, New York, 2010. Google Scholar; 4.Larman C. and Basili, V.R.""Iterative and incremental development: A brief history"", IEEE Computer, June 2003, pp.47-56. View Article  Google Scholar; 5.Bellware, Scott, Behavior-Driven Development, Code Magazine, June 2008. (Retrieved 10 May 2012) Google Scholar; 6.Keogh, L., Translating TDD to BDD, 2009, by (http://lizkeogh.com/2009/11/06/translating-tdd-to-bdd/) Google Scholar; 7.Solis, C. and Xiaofeng Wang, A Study of the Characteristics of Behaviour Driven Development, Software Engineering and Advanced Applications (SEAA), 2011 37th EUROMICRO Conference, pp. 383-387. Google Scholar; 8.CERT/CChttp://www.cert.org/stats/cert-stats.html (2008/12); 9.The Top Cyber Security Risks (http://www.sans.org/top-cybersecurity-risks/) (2010/5); 10.OWASP Top 10 (https://www.owasp.org/index.php/Top-10-2013-Top-10) (2013/7); 11.McGraw, G. Software Security-Building Security In, Addison-Wesley, 2006. View Article  Google Scholar; 12.Viega, J., McGraw, G., Building Secure Software, Addison-Wesley 2004. Google Scholar; 13.N. Davis, W. Humphrey, Jr. S. T. Redwine, G. Zibulski, and G. McGraw, ""Processes for Producing Secure Software,"" IEEE Security & Privacy, vol. 2, no. 3, 2004, pp. 18-25. View Article  Google Scholar; 14.Beck, K., Beedle, M., van Bennekum, A., Cockburn, A., Cunningham, W., Fowler, M., Thomas, D. (2001). Manifesto for agile software development Retrieved 17 February, 2003, from http://www.agilemanifesto.org. Google Scholar; 15.Szalvay, V. ""An Introduction to Agile Software Development,"" Danube Technologies Inc., 2004. Google Scholar; 16.Schach, S. R., ""Object-Oriented Software Engineering,"" McGraw-Hill Companies, 2010. Google Scholar; 17.North, Dan, Introducing BDD, Available at: http://dannorth.net/introducing-bdd, March 2006. (Accessed June 13, 2014]); 18.Firesmith, D, ""Engineering Security Requirements,"" Journal of Object Technology, vol. 2, no.1, 2003, pp.53-68. CrossRef  Google Scholar; 19.Sindre G. and Opdahl, A.L. (2005) ""Eliciting Security Requirements with Misuse Cases,"" Requirements Eng., vol. 10, no. 1, pp. 34-44.) CrossRef  Google Scholar; 20.McDermott J. and Fox, C. (1999) ""Using Abuse Case Models for Security Requirements Analysis,"" Proc. Computer Security Applications Conf., IEEE CS Press, pp. 55-64. View Article  Google Scholar; 21.Firesmith, D., ""Security Use Cases,"" Journal of Object Technology, vol. 2, no. 3, 2003, pp. 53-64. CrossRef  Google Scholar; 22.Fenton,. N. E. Software Metrics-A Rigorous Approach, Chapman & Hall1991. Google Scholar; 23.Conte, S. D. ,Dunsmore, H. E., and Shen,V. Y., Software Engineering Metrics and Models,Benjamin/Cummings, Menlo Park, 1986. Google Scholar; 24.Daniel Galin, Software Quality Assurance, Addison-Wesley, 2004. Google Scholar; 25.Boehm, B. W., Software Engineering Economics, Prentice-Hall, New Jersey, 1981. Google Scholar; 26.Lai, S. T. and Yang, C. C., ""A Software Metric Combination Model for Software Reuse,"" Proc. of 1998Asia-Pacific Software Engineering Conference (APSEC'98), 1998, pp. 70-77. Google Scholar"			Included	Included	new_screen			2	IEEE		Combining IID with BDD to Enhance the Critical Quality of Security Functional Requirements	https://ieeexplore.ieee.org/document/7016084	IEEE	nan; Pages; Year; Bibtex
120	Behave	Test-Driven Development of Relational Databases	In test-first development, developers formulate and implement a detailed design iteratively, one test at a time. Test-driven development (also called test-driven design) combines TFD with refactoring, wherein developers make small changes (refactorings) to improve code design without changing the code's semantics. When developers decide to use TDD to implement a new feature, they must first ask whether the current design is the easiest possible design to enable the feature's addition. Implementing test-driven database design involves database refactoring, regression testing, and continuous integration. TDDD is an integrated part of the overall development process, not a standalone activity that data professionals perform in parallel with application TDD. Although from a technical view point, TDDD is relatively straightforward, we must overcome several challenges to its whole sale adoption throughout the IT community	test-driven development;TDD;database refactoring;database testing;test-driven database design;TDD;relational database;behavior-driven development;BDD	S. W. Ambler	IEEE Software					Excluded	Excluded	new_screen			2						
121	Behave	Notice of Violation of IEEE Publication Principles: Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria	"Notice of Violation of IEEE Publication Principles  ""Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria""  by Hena Iqbal  in the Proceedings of the International Conference on Digitization (ICD), November 2019, pp. 92-103  After careful and considered review of the content and authorship of this paper by a duly constituted expert committee, this paper has been found to be in violation of IEEE's Publication Principles.  This paper is a near duplication of the original text from the paper cited below. The original text was copied without attribution (including appropriate references to the original author(s) and/or paper title) and without permission.  Due to the nature of this violation, reasonable effort should be made to remove all past references to this paper, and future references should be made to the following article:  ""Automated Test Input Generation via Model Inference Based on User Story and Acceptance Criteria for Mobile Application Development""  by Duc-Man Nguyen, Quyet-Thang Huynh, Nhu-Hang Ha and Thanh-Hung Nguyen  in the International Journal of Software Engineering and Knowledge Engineering, Vol. 30, No. 3 2020, pp. 399-425    In the past few years, there has been observed explosive growth in the development of Mobile Applications across Android and iOS operating system which has led to the direct impact towards mobile app development. In order to design and propose quality-oriented apps, it is the primary responsibility of the developers to devote time and sufficient efforts towards testing to make the Apps bug free and operational in the hands of end users without any hiccup. In order to test the mobile apps, manual testing procedures takes prolonged amount of time in writing test cases and even the full testing requirements are not met. In addition to this, lack of sufficient knowledge by the tester also impacts overall quality and assurance that app is bug free. To overco..."	Mobile App; Acceptance Criteria; Testing Tools; User Acceptance; User Stories; Test Input Generation; Test Data; Black Box; Natural Language; Manual Testing; Sequence Of Events; Data Generation; Cucumber; Software Development; Bootstrap Resampling; Specific Language; Functional Requirements; Formal Language; Test Scenarios; Binary String; Domain-specific Languages; Test Case Generation; Mobile Testing; Set Of Statements; Agile Development; Unit Tests; Constraint Satisfaction Problem; Testing Coverage; Future Scope; Android Apps	Hena Iqbal	2019 International Conference on Digitization (ICD)	https://doi.org/10.1109/ICD47981.2019.9105761	"1.A. Annie, ""App Annie mobile app forecast: The path to \$100 billion"", App Annie, 2016. Google Scholar; 2.Niklas Heuveldop, Ericssson Mobility Report, 2017. Google Scholar; 3.Bostjan Arzensek and Marjan Hericko, ""Criteria for Selecting Mobile Application Testing Tools"", Third Workshop on Software Quality Analysis Monitoring Improvement and Applications SQAMIA 2014, 2014. Google Scholar; 4.M. J. Rajasekaran, ""Challenges in Mobile Application Testing: A Survey"", IJCTA, vol. 9, no. 27, pp. 159-163, 2016. Google Scholar; 5.M. Akour, A. A. Al-zyoud, B. Falah, S. Bouriat and K. Alemerien, ""Mobile Software Testing: Thoughts Strategies Challenges and Experimental Study"", Int. J. Adv. Comput. Sci. Appl., vol. 7, no. 6, pp. 12-19, 2016. CrossRef  Google Scholar; 6.L. A. Oubelli, J. Mottu and C. Attiogb, ""Test Cases Evolution of Mobile Applications: Model Driven Approach"", [Research Report] Universit e de Nantes, 2015. Google Scholar; 7.H. Kim, H. Yeo, H. J. Hwang and C. Ramos, ""Effective Mobile Applications Testing Strategies"", Adv. Sci. Technol. Lett., vol. 139, pp. 246-251, 2016. CrossRef  Google Scholar; 8.C. Johnson, SPEST - A Tool for Specification-Based Testing, California Polytechnic State University, 2016. Google Scholar; 9.H. Flora, X. Wang and S. V. Chande, ""Adopting an Agile Approach for the Development of Mobile Applications"", Int. J. Comput. Appl., vol. 94, no. 17, 2014. Google Scholar; 10.Kaleel Shakira Banu and Ssowjanya Harishankar, ""Applying agile methodology in mobile software engineering: Android application development and its challenges"", Computer Science Technical Reports, pp. 1-11, 2013. Google Scholar; 11.G. P. P, R. Hamsini and G. R. Smitha, ""Agile Development Methodology and Testing for Mobile Applications - A Survey"", Int. J. New Technol. Res., vol. 2, no. 9, pp. 98101, 2016. Google Scholar; 12.P. Bhuarya, ""Mobile Application Testing: Tools ; Challenges"", Int. J. Eng. Comput. Sci., vol. 5, no. 10, pp. 18679-18681, 2016. CrossRef  Google Scholar; 13.M. E. Joorabchi, ""Real Challenges in Mobile App Development"", 2013 ACM / IEEE Int. Symp. Empir. Softw. Eng. Meas., pp. 15-24, 2013. View Article  Google Scholar; 14.Ravi Ramchandra Nimbalkar, ""Mobile application testing and challenges"", International Journal of Science and Research (IJSR), vol. 2, no. 7, pp. 56-58, 2013. Google Scholar; 15.N. Mirzaei, ""Automated Input Generation Techniques for Testing Android Applications"", George Mason University, 2016. Google Scholar; 16.S. Anand et al., ""An orchestrated survey of methodologies for automated software test case generation"", Journal of Systems and Software, vol. 86, no. 8, 2013. CrossRef  Google Scholar; 17.R. Tahiliani Machiry and M. Naik, ""Dynodroid: An Input Generation System for Android Apps"", Proc. 2013 9th Jt. Meet. Found. Softw. Eng., pp. 224-234, 2013. CrossRef  Google Scholar; 18.M. Cohn, User Stories Applied for Agile Software Development, Addison Wesley, 2004. Google Scholar; 19.L. De Moura and N. Bjrner, Z3: An -EffiCient SMT Solver, pp. 337-340, 2008. Google Scholar; 20.Q. S. Phan and P. Malacaria, ""All-solution satisfiability modulo theories: Applications algorithms and benchmarks"", Proc. - 10th Int. Conf. Availability Reliab. Secur., pp. 100-109, 2015. View Article  Google Scholar; 21.M. Cristi and C. Frydman, ""Applying SMT Solvers to the Test Template Framework"", Electron. Proc. Theor. Comput. Sci., vol. 80, no. Mbt, pp. 28-42, 2012. CrossRef  Google Scholar; 22.M. Fowler, Domain Specific language, Addison-Wesley Professional, 2010. Google Scholar; 23.Sommerville Software Engineering, Addison-Wesley, 2011. Google Scholar; 24.A. Van Lamsweerde, ""Formal Specification: a Roadmap"", Proceedings of the Conference on the Future of Software Engineering, pp. 147-159, 2000. CrossRef  Google Scholar; 25.R. M. Hierons et al., ""Using formal specifications to support testing"", ACM Computing Survey, vol. 41, no. 2, pp. 176, 2009. CrossRef  Google Scholar; 26.J. Dicks Thoms and T. Kutz, ""Language Workbench Challenge 2013"", Xtext Submission, 2013. Google Scholar; 27.Xtext Documentation, 2014. Google Scholar; 28.S. Wierckx, Behavior Driven Testing with Cucumber demystified, 2013. Google Scholar; 29.A.H. Ian, Dees Matt and Wynne Cucumber, ""Recipes -Automate Anything with BDD Tools and Techniques"", The Pragmatic Programmers LLC., 2013. Google Scholar; 30.M. Wallner, Specification by Example of the Broadcast Mechanism of Catrobat, 2014. Google Scholar"			Included	Included	new_screen			2	IEEE		Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria	https://ieeexplore.ieee.org/document/9105761	IEEE	nan; Pages; Year; Bibtex
122	Behave	Notice of Violation of IEEE Publication Principles: Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria	"Notice of Violation of IEEE Publication Principles  ""Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria""  by Hena Iqbal  in the Proceedings of the International Conference on Digitization (ICD), November 2019, pp. 92-103  After careful and considered review of the content and authorship of this paper by a duly constituted expert committee, this paper has been found to be in violation of IEEE's Publication Principles.  This paper is a near duplication of the original text from the paper cited below. The original text was copied without attribution (including appropriate references to the original author(s) and/or paper title) and without permission.  Due to the nature of this violation, reasonable effort should be made to remove all past references to this paper, and future references should be made to the following article:  ""Automated Test Input Generation via Model Inference Based on User Story and Acceptance Criteria for Mobile Application Development""  by Duc-Man Nguyen, Quyet-Thang Huynh, Nhu-Hang Ha and Thanh-Hung Nguyen  in the International Journal of Software Engineering and Knowledge Engineering, Vol. 30, No. 3 2020, pp. 399-425    In the past few years, there has been observed explosive growth in the development of Mobile Applications across Android and iOS operating system which has led to the direct impact towards mobile app development. In order to design and propose quality-oriented apps, it is the primary responsibility of the developers to devote time and sufficient efforts towards testing to make the Apps bug free and operational in the hands of end users without any hiccup. In order to test the mobile apps, manual testing procedures takes prolonged amount of time in writing test cases and even the full testing requirements are not met. In addition to this, lack of sufficient knowledge by the tester also impacts overall quality and assurance that app is bug free. To overco..."	Mobile App; Acceptance Criteria; Testing Tools; User Acceptance; User Stories; Test Input Generation; Test Data; Black Box; Natural Language; Manual Testing; Sequence Of Events; Data Generation; Cucumber; Software Development; Bootstrap Resampling; Specific Language; Functional Requirements; Formal Language; Test Scenarios; Binary String; Domain-specific Languages; Test Case Generation; Mobile Testing; Set Of Statements; Agile Development; Unit Tests; Constraint Satisfaction Problem; Testing Coverage; Future Scope; Android Apps	Hena Iqbal	2019 International Conference on Digitization (ICD)	https://doi.org/10.1109/ICD47981.2019.9105761	"1.A. Annie, ""App Annie mobile app forecast: The path to \$100 billion"", App Annie, 2016. Google Scholar; 2.Niklas Heuveldop, Ericssson Mobility Report, 2017. Google Scholar; 3.Bostjan Arzensek and Marjan Hericko, ""Criteria for Selecting Mobile Application Testing Tools"", Third Workshop on Software Quality Analysis Monitoring Improvement and Applications SQAMIA 2014, 2014. Google Scholar; 4.M. J. Rajasekaran, ""Challenges in Mobile Application Testing: A Survey"", IJCTA, vol. 9, no. 27, pp. 159-163, 2016. Google Scholar; 5.M. Akour, A. A. Al-zyoud, B. Falah, S. Bouriat and K. Alemerien, ""Mobile Software Testing: Thoughts Strategies Challenges and Experimental Study"", Int. J. Adv. Comput. Sci. Appl., vol. 7, no. 6, pp. 12-19, 2016. CrossRef  Google Scholar; 6.L. A. Oubelli, J. Mottu and C. Attiogb, ""Test Cases Evolution of Mobile Applications: Model Driven Approach"", [Research Report] Universit e de Nantes, 2015. Google Scholar; 7.H. Kim, H. Yeo, H. J. Hwang and C. Ramos, ""Effective Mobile Applications Testing Strategies"", Adv. Sci. Technol. Lett., vol. 139, pp. 246-251, 2016. CrossRef  Google Scholar; 8.C. Johnson, SPEST - A Tool for Specification-Based Testing, California Polytechnic State University, 2016. Google Scholar; 9.H. Flora, X. Wang and S. V. Chande, ""Adopting an Agile Approach for the Development of Mobile Applications"", Int. J. Comput. Appl., vol. 94, no. 17, 2014. Google Scholar; 10.Kaleel Shakira Banu and Ssowjanya Harishankar, ""Applying agile methodology in mobile software engineering: Android application development and its challenges"", Computer Science Technical Reports, pp. 1-11, 2013. Google Scholar; 11.G. P. P, R. Hamsini and G. R. Smitha, ""Agile Development Methodology and Testing for Mobile Applications - A Survey"", Int. J. New Technol. Res., vol. 2, no. 9, pp. 98101, 2016. Google Scholar; 12.P. Bhuarya, ""Mobile Application Testing: Tools ; Challenges"", Int. J. Eng. Comput. Sci., vol. 5, no. 10, pp. 18679-18681, 2016. CrossRef  Google Scholar; 13.M. E. Joorabchi, ""Real Challenges in Mobile App Development"", 2013 ACM / IEEE Int. Symp. Empir. Softw. Eng. Meas., pp. 15-24, 2013. View Article  Google Scholar; 14.Ravi Ramchandra Nimbalkar, ""Mobile application testing and challenges"", International Journal of Science and Research (IJSR), vol. 2, no. 7, pp. 56-58, 2013. Google Scholar; 15.N. Mirzaei, ""Automated Input Generation Techniques for Testing Android Applications"", George Mason University, 2016. Google Scholar; 16.S. Anand et al., ""An orchestrated survey of methodologies for automated software test case generation"", Journal of Systems and Software, vol. 86, no. 8, 2013. CrossRef  Google Scholar; 17.R. Tahiliani Machiry and M. Naik, ""Dynodroid: An Input Generation System for Android Apps"", Proc. 2013 9th Jt. Meet. Found. Softw. Eng., pp. 224-234, 2013. CrossRef  Google Scholar; 18.M. Cohn, User Stories Applied for Agile Software Development, Addison Wesley, 2004. Google Scholar; 19.L. De Moura and N. Bjrner, Z3: An -EffiCient SMT Solver, pp. 337-340, 2008. Google Scholar; 20.Q. S. Phan and P. Malacaria, ""All-solution satisfiability modulo theories: Applications algorithms and benchmarks"", Proc. - 10th Int. Conf. Availability Reliab. Secur., pp. 100-109, 2015. View Article  Google Scholar; 21.M. Cristi and C. Frydman, ""Applying SMT Solvers to the Test Template Framework"", Electron. Proc. Theor. Comput. Sci., vol. 80, no. Mbt, pp. 28-42, 2012. CrossRef  Google Scholar; 22.M. Fowler, Domain Specific language, Addison-Wesley Professional, 2010. Google Scholar; 23.Sommerville Software Engineering, Addison-Wesley, 2011. Google Scholar; 24.A. Van Lamsweerde, ""Formal Specification: a Roadmap"", Proceedings of the Conference on the Future of Software Engineering, pp. 147-159, 2000. CrossRef  Google Scholar; 25.R. M. Hierons et al., ""Using formal specifications to support testing"", ACM Computing Survey, vol. 41, no. 2, pp. 176, 2009. CrossRef  Google Scholar; 26.J. Dicks Thoms and T. Kutz, ""Language Workbench Challenge 2013"", Xtext Submission, 2013. Google Scholar; 27.Xtext Documentation, 2014. Google Scholar; 28.S. Wierckx, Behavior Driven Testing with Cucumber demystified, 2013. Google Scholar; 29.A.H. Ian, Dees Matt and Wynne Cucumber, ""Recipes -Automate Anything with BDD Tools and Techniques"", The Pragmatic Programmers LLC., 2013. Google Scholar; 30.M. Wallner, Specification by Example of the Broadcast Mechanism of Catrobat, 2014. Google Scholar"			Excluded	Excluded	new_screen			2	IEEE		Notice of Violation of IEEE Publication Principles: Mobile Application Development: Automated Test Input Generation Via Model Inference based on User Story and Acceptance Criteria	https://ieeexplore.ieee.org/document/9105761	IEEE	nan; Pages; Year; Bibtex
123	Behave	Combination of Test-Driven Development and Behavior-Driven Development for Improving Backend Testing Performance	In the process of software development, a testing phase is an important step for detecting the errors. In order to produce a reliable application, this paper discusses the utilization of a combination from two different testing methods, Test- Driven Development (TDD) and Behavior Driven Development (BDD). TDD testing method is a process with a high percentage of code which is tested automatically. However, it could lead to an error when the parameters of the features are changed. Meanwhile, the BDD testing method is a testing method that could perform successfully despite changes to the parameters of the features. This paper discusses the combination of TDD and BDD testing methods, which is called as T-BDD method. By implementing T-BDD into the Vixio backend system, this paper successfully shows that it could be performed to achieve a high percentage of test-coverage while it could also adapt when the parameters of the features were changed. This paper also shows that the T-BDD testing method performed better compared to using the TDD testing method only.	Unit Test, Test-Driven Development (TDD), Behavior-Driven Development(BDD), Backend, Web Application	Kerthyayana Manuaba, Ida Bagus	Procedia Computer Science					Included	Included	new_screen			2						
124	Behave	Requirements behaviour analysis for ontology testing	In the software engineering field, every software product is delivered with its pertinent associated tests which verify its correct behaviour. Besides, there are several approaches which, integrated in the software development process, deal with software testing, such as unit testing or behaviour-driven development. However, in the ontology engineering field there is a lack of clearly defined testing processes that can be integrated into the ontology development process. In this paper we propose a testing framework composed by a set of activities (i.e., test design, implementation and execution), with the goal of checking whether the requirements identified are satisfied by the formalization and analysis of their expected behaviour. This testing framework can be used in different types of ontology development life-cycles, or concerning other goals such as conformance testing between ontologies. In addition to this, we propose an RDF vocabulary to store, publish and reuse these test cases and their results, in order to allow traceability between the ontology, the test cases and their requirements. We validate our approach by integrating the testing framework into an ontology engineering process where an ontology network has been developed following agile principles. © Springer Nature Switzerland AG 2018.		Fernández-Izquierdo A., García-Castro R.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Excluded	Excluded	new_screen			2						
125	Behave	Skyfire: Model-Based Testing with Cucumber	In the software industry, a Behavior-Driven Development (BDD) tool, Cucumber, has been widely used by practitioners. Usually product analysts, developers, and testers manually write BDD test scenarios that describe system behaviors. Testers write implementation for the BDD scenarios by hand and execute the Cucumber tests. Cucumber provides transparency about what test scenarios are covered and how the test scenarios are mapped to executable tests. One drawback of the Cucumber BDD approach is that test scenarios are generated manually. Thus, the test scenarios are usually weak. More importantly, practitioners do not have a metric to measure test coverage. In this paper, we present a Model-Based Testing (MBT) tool, skyfire. Skyfire can automatically generate effective Cucumber test scenarios to replace manually generated test scenarios. Skyfire reads a behavioral UML diagram (e.g., a state machine diagram), identifies all necessary elements (e.g., transitions) of the diagram, generates effective tests to satisfy various graph coverage criteria, and converts the tests into Cucumber scenarios. Then testers write Cucumber mappings for the generated scenarios. Skyfire does not only generate effective tests but is also completely compatible with the existing agile development and continuous integration (CI) rhythm. We present the design architecture and implementation of skyfire, as well as an industrial case study to show how skyfire is used in practice.	Unified modeling language; Data structures; Boolean functions; Testing; Concrete; Software; Cucumber; Model-based Testing; State Machine; Testing Tools; Test Scenarios; Unified Modeling Language; Continuous Integration; Agile Development; State Diagram; Software Industry; Coverage Criteria; Food And Drug Administration; Behavioral Model; Development Environment; Nodes In The Graph; Specific Language; Static Analysis; Inference Rules; Map Information; Composition State; Hadoop Distributed File System; Final Node; Distinct Steps; Papyrus; Starting State; Visual Diagram	Nan Li; Anthony Escalona; Tariq Kamal	2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)	https://doi.org/10.1109/ICST.2016.41	"1.A. Hellessoy, ""Cucumber"", 2008,  [online]  Available: https://cucumber.io/. Google Scholar; 2.N. Li, ""Skyfire"", 2015,  [online]  Available: https://github.com/mdsol/skyfire. Google Scholar; 3.M. Veanes, C. Campbell, W. Grieskamp, W. Schulte and N. Tillmann, ""Microsoft SpecExplorer"", 2002,  [online]  Available: http://research.microsoft.com/en-us/projects/specexplorer/. Google Scholar; 4.J. Jacky and M. Veanes, ""NModel"", 2006,  [online]  Available: http://nmodel.codeplex.com/. Google Scholar; 5.L. Briand and Y. Labiche, ""A UML-based approach to system testing"", Proceedings of the 4th International Conference on The Unified Modeling Language Modeling Languages Concepts and Tools ser. UML99, pp. 194-208, 2001. CrossRef  Google Scholar; 6.C. Nebut, F. Fleurey, Y. L. Traon and J.-M. Jezequel, ""Automatic test generation: a use case driven approach"", IEEE Transaction on Software Engineering, vol. 32, no. 3, pp. 140-155, March 2006. View Article  Google Scholar; 7.N. Li and J. Offutt, ""A test automation language framwork for behavioral models"", The 11th Workshop on Advances in Model Based Testing ser. A-MOST 2015, April 2015. Google Scholar; 8.N. Li, ""The structured test automation language framework"", 2013,  [online]  Available: http://cs.gmu.edu/nlil/stale/. Google Scholar; 9.A. S. Foundation, ""Apache maven"", 2004,  [online]  Available: https://maven.apache.org/. Google Scholar; 10.T. C. Community, ""Travis-CI"", 2011,  [online]  Available: https://travis-ci.org/. Google Scholar; 11.M. Hoffmann, B. Janiczak, E. Mandrikov and M. Friedenhagen, ""Ja-coco code coverage tool"", 2009,  [online]  Available: http://eclemma.org/jacoco/. Google Scholar; 12.O. Burn, ""Checkstyle"", 2001,  [online]  Available: http://checkstyle.sourceforge.net/. Google Scholar; 13.E. Foundation, ""Eclipse modeling framework"", 2008,  [online]  Available: http://www.eclipse.org/modeling/emf/. Google Scholar; 14.P. Ammann and J. Offutt, Introduction to Software Testing, Cambridge, UK:Cambridge University Press, 2008. CrossRef  Google Scholar; 15.N. Li, F. Li and J. Offutt, ""Better algorithms to minimize the cost of test paths"", Proceedings of IEEE 5th International Conference on Software Testing Verification and Validation ser. ICST12, April 2012. View Article  Google Scholar; 16.E. Foundation, ""Papyrus"", 2008,  [online]  Available: www.eclipse.org/papyrus/. Google Scholar; 17.Obeo, ""Uml designer"", 2012,  [online]  Available: http://www.umldesigner.org/. Google Scholar; 18.A. Danial, ""CLOC"", 2006,  [online]  Available: https://github.com/A1Danial/cloc. Google Scholar; 19.K. Kawaguchi, ""Jenkins"", 2011,  [online]  Available: https://jenkins-ci.org/. Google Scholar; 20.M. Diepenbeck, M. Soeken, D. Grosse and R. Drechsler, ""Towards automatic scenario generation from coverage information"", 2013 8th International Workshop on Automation of Software Test (AST), pp. 82-88, May 2013. View Article  Google Scholar"			Included	Included	new_screen			2	IEEE		Skyfire: Model-Based Testing with Cucumber	https://ieeexplore.ieee.org/document/7515497	IEEE	nan; Pages; Year; Bibtex
126	Behave	Systematic verification and testing	In this chapter, we present a process pattern for model based specification, verification and testing. It combines concepts of behaviour driven development (BDD), graphical and formal, mathematical modelling, formal verification techniques, acceptance testing and model based testing. The rigorous approach helps to ensure that for highly dependable systems, dependability (e.g. safety) requirements are fulfilled and both the specified and the implemented behaviour are as desired. It helps bridging the gap between natural language or semi-formal requirements and mathematical abstraction. Furthermore, it addresses the issue that formal modelling expertise and domain knowledge are rarely held by the same set of people. © Springer Nature Switzerland AG 2020.		Dghaym D., Fischer T., Hoang T.S., Reichl K., Snook C., Schlick R., Tummeltshammer P.	Validation and Verification of Automated Systems: Results of the ENABLE-S3 Project					Excluded	Excluded	new_screen			2						
127	Behave	BDD by example:Russian bylina written in Gherkin language	"In this paper is presented the User Stories technique within the Behaviour-Driven Development process by example of the famous Russian bylina (epic poem) ""Three trips of Ilya Muromets"" written in Gherkin language. In the first part are given explanations about the choice of the bylina as a good example for presentation of this technique and about the choice of GitHub as a good environment for this presentation. In the second part is placed the text of the presentation divided by the stages of the Story development and fitted with the links to the corresponding commits and file versions in the educational repository. A distinct advantage of this presentation is that it reflects a Story in its evolution, as a process. It reflects a more complex and changeable behaviour than in static trivial examples, which are usually used. Also, there are presented the main features of using the User Stories technique in Russian language, which have not been previously covered nowhere. Besides that, the using of the educational repository can significantly increase the possibilities for further spreading and development of the example."	Agile; Gherkin; GitHub; JBehave; Scrum; behaviour-driven development; byliny; cucumber; epic poetry; examples; extreme programming; user stories	Vadim Mustyatsa	CEE-SECR '15: Proceedings of the 11th Central & Eastern European Software Engineering Conference in Russia	https://doi.org/10.1145/2855667.2855678		1-15		Excluded	Excluded	new_screen			2	ACM		BDD by Example: Russian Bylina Written in Gherkin Language	https://dl.acm.org/doi/10.1145/2855667.2855678	Association for Computing Machinery	nan; References; Year; Bibtex
128	Behave	Satisfaction and its correlates in agile software development	In this paper we address the topic of software development team members satisfaction with their development process. We present an in-depth analysis of the results of a nationwide survey about software development in Switzerland. We wanted to find out if satisfaction relates to the applied development method, and to the use of various practices, and impacts on business, team and software issues. We found that higher satisfaction is reported more by those using Agile development than with plan-driven processes. We explored the different perspectives of developers and those with a management role and found a high consistency of satisfaction between Agile developers and Agile management, and differences with those using working plan-driven methods. We found that certain practices and impacts have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction. We then explored the relationship between satisfaction and various other perspectives. Our results in this analysis are principally descriptive, but we think they can be a relevant contribution to understand the challenges for everyone involved in Agile development.		Kropp, Martin; Meier, Andreas; Anslow, Craig; Biddle, Robert	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
129	Behave	Compliance checking on building models with the gherkin language and continuous integration	In this paper we document our approach on applying Behaviour-Driven Development (BDD) and Continuous Integration (CI) from the software industry to the construction sector. We have provided a freely available open software toolset for the application of rules in the Gherkin syntax to an IFC building model. A prominent aspect of BDD and contrary to mvdXML, the formalization of rules in plain-test human-readable scenarios provides a basis for collaborative formalization of rules among stakeholders. At the same time our approach includes imperative program code that is fully extensible to incorporate for example external data sources and geometrical reasoning. Runnings test on every model revision (the CI concept) as opposed to, for example, upon model delivery ensures a proactive approach to compliance. Reusing existing open source frameworks allowed us to build a comprehensive solution for continuous and automated model checking, visualization and reporting in several hundred lines of program code. © EG-ICE 2020 Workshop on Intelligent Computing in Engineering, Proceedings. All rights reserved.		Moult D., Krijnen T.	EG-ICE 2020 Workshop on Intelligent Computing in Engineering, Proceedings					Included	Included	new_screen			2						
130	Behave	Improving Agile Software Development with Domain Ontologies	In this paper we propose to apply domain ontologies in agile software development to reduce the ambiguity caused by using natural language as ubiquitous language to report user stories. To justify and demonstrate our approach, we present a case study that combines Scrum and Behaviour-Driven Development (BDD) in the development of an educational support system, which was built to support the activities of the Medicine Programme of Federal University of São Carlos (UFSCar) in Brazil. Starting from a reference ontology for the Higher Education domain, we gradually specialized this ontology for this programme. Since we selected the Evaluation Management module of this system for our case study, we applied the Evaluation Process Ontology to that programme, and defined user stories to identify the feature set to be implemented. For evaluation and validation purposes, we assessed the quality of all ontologies used in this work according to structural and functional dimensions. © 2018, Springer International Publishing AG, part of Springer Nature.		de Souza P.L., do Prado A.F., de Souza W.L., dos Santos Forghieri Pereira S.M., Pires L.F.	Advances in Intelligent Systems and Computing					Included	Included	new_screen			2						
131	Behave	Agile testing practices in software quality: State of the art review	In this paper you can find a review of articles related to agile testing practices in software quality, looking for theoretical information and real cases applied to testing inside a modern context, comparing them with the standard procedures taking into account their advantages and relevant features. As final result, we determine that agile practices in software quality have wide acceptance and many companies have chosen their use for all their benefits and impact on development software processes in several real applications, not necessarily IT governance ones, since other kind of technical applications have shown excellent results on testing. © 2005 - 2016 JATIT & LLS. All rights reserved.		Gil C., Diaz J., Orozco M., de la Hoz A., de la Hoz E., Morales R.	Journal of Theoretical and Applied Information Technology					Excluded	Excluded	new_screen			2						
132	Behave	Consistency Reflection for Automatic Update of Testing Environment	In this paper, we present an approach for maintaining consistency among design models, system under test, and test components. Our approach provides an automatic updating technique to deal with changes that happen frequently in agile software development. Consistency reflection by automatic updating allows us to cut off manual tasks required in maintaining automated tests and speed up testing process which is a bottleneck in service development lifecycle. We introduce the use of metadata, the data structure that describes structural behavior of the system, in our automatic updating technique. Metadata is used as a common medium for communicating changes to keep consistency among design, system under test, and test components. We present an example of testing process to show how we apply this approach in practice.	behavior-driven development; agile software development; automated software testing; automatic update; consistency reflection; design models; metadata	Sathawornwichit, Chaiwat; Hosono, Shigeru	Proceedings of the 2012 IEEE Asia-Pacific Services Computing Conference)					Included	Included	new_screen			2						
133	Behave	Generation of behavior-driven development C++ tests from abstract state machine scenarios	In this paper, we present the AsmetaVBDD tool that automatically translates the scenarios written in the AValLa language (used by the asmeta validator (AsmetaV)) into Behavior-Driven Development scenarios for C++. © Springer Nature Switzerland AG 2018.		Bonfanti S., Gargantini A., Mashkoor A.	Communications in Computer and Information Science					Included	Included	new_screen			2						
134	Behave	Behaviour-Driven Development for Computer-Interpretable Clinical Guidelines	In this paper, we propose an approach for specification and analysis of Computer-Interpretable Clinical Guidelines (CIGs) that was inspired by Behaviour-Driven Development. The expected behaviour of a CIG is specified by requirements in natural language. On the one hand, those requirements are used as design input for guideline development. On the other hand, they can be checked against time-oriented data recorded during testing sessions of the implemented CIG.		Hatko, Reinhard; Mersmann, Stefan; Puppe, Prank	Proceedings of the 10th International Conference on Knowledge Engineering and Software Engineering - Volume 1289					Included	Included	new_screen			2						
135	Behave	A preliminary study on using acceptance tests for representing business requirements of smart contracts	"In this work, we address the following question: ""Which acceptance testing techniques are being used for representing business requirements of smart contracts?"" To answer this question we performed a systematic mapping to determine whether acceptance tests for smart contracts and blockchain are being utilized to represent requirements and which acceptance testing techniques are being applied. This systematic mapping shows that, in fact, acceptance testing techniques are still not commonly used to represent the business requirements of smart contracts. We only found two studies using acceptance testing techniques with smart contracts. Moreover, only one of them uses an acceptance testing technique, the BDD (Behavior-Driven Development) notation, to represent the business requirements. In order to confirm that it is possible to represent business requirements of smart contracts, we developed an example that uses the BDD notation to represent requirements of a smart contract deployed in the Hyperledger blockchain. Preliminary results show that it is possible to use acceptance tests to represent business requirements."	Testing; Contracts; Systematics; Google; Acceptable Test; Smart Contracts; Systematic Mapping; Inclusion Criteria; Study Selection; Use Of Techniques; Software Development; Digital Library; Search String; Scopus Databases; User Requirements; Abstracts Of Studies; ACM Digital Library; Commercial Paper; Blockchain Technology; Cyber-physical Systems; Google Scholar; Google Scholar Databases; acceptance testing; acceptance test; smart contract; business requirement; blockchain	Patricia Vilain; John Mylopoulos; Hans-Arno Jacobsen	2020 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)	https://doi.org/10.1109/ICBC48266.2020.9169480	"1.C. Fu, X. Zhang, Z. Li, Z. Zhao, C. Wang and Y. Yu, ""On the Problem-Oriented Verification of Cyber-Physical Systems Using System-Level Test Sequences"", Proceedings of the 24th International DMS Conference on Visualization and Visual Languages (DMSVIVA 2018), pp. 125-131, 2018. CrossRef  Google Scholar; 2.S. Ibba, ""Agile methodologies and blockchain development"", Ph.D. Thesis in Electronic and Computer Engineering, pp. 123, 2019. Google Scholar; 3.P. Natsiavas, J. Rasmussen, M. Voss-Knude, K. Votis, L. Coppolino, P. Campegiani, et al., ""Comprehensive user requirements engineering methodology for secure and interoperable health data exchange"", BMC Medical Informatics and Decision Making, vol. 18, no. 1, pp. 85, 2018. CrossRef  Google Scholar; 4.P.R. Yammanuru, A. Jain and H. Vinayakaram, ""Enabling Enterprise Blockchain AppDev Teams"", Proceedings of the 23RD Annual International Conference in Advanced Computing and Communications (ADCOM 2017), pp. 34-39, 2017. View Article  Google Scholar; 5.G. Baralla, A. Pinna and G. Corrias, ""Ensure Traceability in European Food Supply Chain by Using a Blockchain System"", Proceedings of the IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), pp. 40-47, 2019. View Article  Google Scholar; 6.S. Ibba, A. Pinna, M. I. Lunesu, M. Marchesi and R. Tonelli, ""Initial coin offerings and agile practices"", Future Internet, vol. 10, no. 11, 2018. CrossRef  Google Scholar; 7.T. Mejtoft, D. Hellman and U. Soderstrom, ""Reclaiming control over personal data with blockchain technology: An exploratory study"", Proceedings of the 32nd Bled eConference: Humanizing Technology for a Sustainable Society, pp. 411-425, 2019. CrossRef  Google Scholar; 8.A. Vallin, ""Secure delivery system using blockchain technology"", Master Thesis in Computer Science and Engineering, pp. 64, 2018. Google Scholar; 9.P. Chawla and R. Chawla, ""Testing Perspectives of Fog-Based IoT Applications"", Fog and Edge Computing, pp. 373-409, 2019. CrossRef  Google Scholar; 10.S. Abbaspour Asadollah, R. Inam and H. Hansson, ""A Survey on Testing for Cyber Physical System"", Proceedings of the IFIP International Conference on Testing Software and Systems (ICTSS 2015). Lecture Notes in Computer Science Testing Software and Systems ICTSS 2015, vol. 9447, 2015. CrossRef  Google Scholar; 11.J. M. Gauthier, F. Bouquet, A. Hammad and F. Peureux, ""A SysML Formal Framework to Combine Discrete and Continuous Simulation for Testing"", Proceedings of the International Conference on Formal Engineering Methods (ICFEM 2015). Lecture Notes in Computer Science Formal Methods and Software Engineering ICFEM 2015, vol. 9407, 2015. CrossRef  Google Scholar; 12.M. Marchesi, L. Marchesi and R. Tonelli, ""An Agile Software Engineering Method to Design Blockchain Applications"", Proceedings of the 14th Central and Eastern European Software Engineering Conference Russia (CEE-SECR '18), pp. 1-8, 2018. CrossRef  Google Scholar; 13.A.M.S. Lima and M.C. Junior, ""An In Vivo Experimental Assessment of BTrans: An Agile Business Transformation Methodology"", Proceedings of the 16th International Conference on Information Technology-New Generations (ITNG 2019), pp. 387-393, 2019. CrossRef  Google Scholar; 14.""Cyber-Physical Systems Engineering"", Engineering Trustworthy Software Systems. Lecture Notes in Computer Science, vol. 9506, pp. 256-289, 2016. CrossRef  Google Scholar; 15.D. Mohanty, ""Installation Development Deployment Unit and Functional Testing"", R3 Corda for Architects and Developers, pp. 61-97, 2019. CrossRef  Google Scholar; 16.F. Borges de Oliveira, M. Bartscher, U. Neuschaefer-Rube, R. Tutsch and J. Hiller, ""Multi-material Acceptance Testing for CT-Based Coordinate Measurement Systems"", Proceedings of the 12th International Conference on Measurement and Quality Control - Cyber Physical Issue (IMEKOTC14 2019). Lecture Notes in Mechanical Engineering, 2019. CrossRef  Google Scholar; 17.V. Panarin, A. Bulda, I. Itkin, A. Zverev, K. Zagorouiko, M. Mamedov, et al., ""Poster: ClearTH Test Automation Framework: A Running Example of a DLT-Based Post-Trade System"", Proceedings of the 12th IEEE Conference on Software Testing Validation and Verification (ICST 2019), pp. 358-362, 2019. View Article  Google Scholar; 18.W. Bauer, B. Pokorni and S. Findeisen, ""Production Assessment 4.0 -Methods for the Development and Evaluation of Industry 4.0 Use Cases"", Proceedings of the International Conference on Applied Human Factors and Ergonomics (AHFE 2018). Advances in Manufacturing Production Management and Process Control, pp. 501-510, 2019. CrossRef  Google Scholar; 19.X. Zhou, X. Gou, T. Huang and S. Yang, ""Review on Testing of Cyber Physical Systems: Methods and Testbeds"", IEEE Access, vol. 6, pp. 52179-52194, 2018. View Article  Google Scholar; 20.V. Schonemann, H. Winner, T. Glock, S. Otten, E. Sax, B. Boeddeker, et al., ""Advances in Information and Communication Networks"", Proceedings of the Future of Information and Communication Conference (FICC 2018), pp. 53-64, 2018. Google Scholar; 21.P. Marwedel, ""Specifications and Modeling"", Embedded System Design, pp. 27-123, 2017. Google Scholar; 22.D.P.F. Moller, ""Systems and Software Engineering"", Guide to Computing Fundamentals in Cyber-Physical Systems, pp. 235-305, 2016. CrossRef  Google Scholar; 23.S.Y. Shin, S. Nejati, M. Sabetzadeh, L.C. Briand and F. Zimmer, ""Test case prioritization for acceptance testing of cyber physical systems: a multi-objective search-based approach"", Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2018), pp. 49-60, 2018. CrossRef  Google Scholar; 24.S. Bosmans, S. Mercelis, J. Denil and P. Hellinckx, ""Testing IoT systems using a hybrid simulation based testing approach"", Computing, vol. 101, pp. 857-872, 2019. CrossRef  Google Scholar; 25.D. Mohanty, ""Testing Strategy for Ethereum Dapps"", Ethereum for Architects and Developers, pp. 197-201, 2018. CrossRef  Google Scholar; 26.C.F. Liao, C.J. Cheng, K. Chen, C.H. Lai, T. Chiu and C. Wu-Lee, ""Toward A Service Platform for Developing Smart Contracts on Blockchain in BDD and TDD Styles"", Proceedings of the IEEE 10th International Conference on Service-Oriented Computing and Applications, pp. 133-140, 2017. View Article  Google Scholar; 27.M. Marchesi, ""Why blockchain is important for software developers and why software engineering is important for blockchain software (Keynote)"", Proceedings of the 2018 International Workshop on Blockchain Oriented Software Engineering (IWBOSE), pp. 1-1, 2018. View Article  Google Scholar; 28.M. Staron, ""Requirements Engineering for Automotive Embedded Systems"", Automotive Systems and Software Engineering, pp. 11-28, 2019. CrossRef  Google Scholar; 29.B.H. Schlingloff, ""Specification and Verification of Collaborative Transport Robots"", Proceedings of the 4th International Workshop on Emerging Ideas and Trends in the Engineering of Cyber-Physical Systems (EITEC 2018), pp. 3-8, 2018. View Article  Google Scholar; 30.C. Lucena, ""A Semantic Wiki Approach to Enable Behaviour Driven Requirements Management"", Journal of Control Engineering and Applied Informatics, vol. 19, no. 4, 2017. Google Scholar"			Excluded	Excluded	new_screen			2	IEEE		A preliminary study on using acceptance tests for representing business requirements of smart contracts	https://ieeexplore.ieee.org/document/9169480	IEEE	nan; Pages; Year; Bibtex
136	Behave	Behavior-driven development as an approach to improve software quality and communication across remote business stakeholders, developers and QA:two case studies	In this work, we describe two of our experiences applying BDD: one at a large publisher of financial information and business news, and the other in a secure collaboration platform vendor. The team composition involves both a local team and an external service provider. We analyze two adoption processes, one driven by the product team, and the other driven by the development team. We cover the communication benefits and impacts on areas such as stakeholder alignment, software design, code refactoring, and bug fixing. We also discuss lessons learned, caveats and how we plan to expand this practice in the future.	distributed agile teams; industrial offshoring and outsourcing experiences; methods and processes; social and human aspects of software development	Andre Scandaroli; Rodrigo Leite; Alexis H. Kiosia; Sandro A. Coelho	ICGSE '19: Proceedings of the 14th International Conference on Global Software Engineering	https://doi.org/10.1109/ICGSE.2019.00016		95-100		Excluded	Excluded	new_screen			2	ACM		Behavior-Driven Development as an Approach to Improve Software Quality and Communication across Remote Business Stakeholders, Developers and QA: Two Case Studies	https://dl.acm.org/doi/10.1109/ICGSE.2019.00016	IEEE Press	nan; References; Year; Bibtex
137	Behave	Behavior-Driven Development as an Approach to Improve Software Quality and Communication Across Remote Business Stakeholders, Developers and QA: Two Case Studies	In this work, we describe two of our experiences applying BDD: one at a large publisher of financial information and business news, and the other in a secure collaboration platform vendor. The team composition involves both a local team and an external service provider. We analyze two adoption processes, one driven by the product team, and the other driven by the development team. We cover the communication benefits and impacts on areas such as stakeholder alignment, software design, code refactoring, and bug fixing. We also discuss lessons learned, caveats and how we plan to expand this practice in the future. © 2019 IEEE.		Scandaroli A., Leite R., Kiosia A.H., Coelho S.A.	Proceedings - 2019 ACM/IEEE 14th International Conference on Global Software Engineering, ICGSE 2019					Included	Included	new_screen			2						
138	Behave	Towards a behavior-oriented specification and testing language for multimodal applications	Initiated by the ubiquity of mobile devices, human computer interaction has evolved beyond the classic PCs' mouse and keyboard setup. Smartphones and tablets introduced new interaction modalities to the mass market and created the need for specialized software engineering methods. While more and more powerful SDKs are released to develop interactive applications, specifying user interaction is still ambiguous and error-prone, causing software defects as well as misunderstandings and frustration among project team members and stakeholders. We present an approach addressing this problems by demonstrating how to incorporate multimodal interaction into user acceptance tests written in near-natural language using Gherkin and formal gesture descriptions.	multimodal user interfaces; software engineering; specification	Marc Hesenius; Tobias Griebe; Volker Gruhn	EICS '14: Proceedings of the 2014 ACM SIGCHI symposium on Engineering interactive computing systems	https://doi.org/10.1145/2607023.2610278		117-122		Included	Included	new_screen			2	ACM		Towards a Behavior-Oriented Specification and Testing Language for Multimodal Applications	https://dl.acm.org/doi/10.1145/2607023.2610278	Association for Computing Machinery	nan; References; Year; Bibtex
139	Behave	Improving the prediction of files changed by programming tasks	Integration conflicts often damage software quality and developers' productivity in a collaborative development environment. For reducing merge conflicts, we could avoid asking developers to execute potentially conflicting tasks in parallel, as long as we can predict the files to be changed by each task. As manually predicting that is hard, the TAITI tool tries to do that in the context of BDD (Behaviour-Driven Development) projects, by statically analysing the automated acceptance tests that validate each task. TAITI computes the set of files that might be executed by the tests of a task (a so called test-based task interface), approximating the files that developers will change when performing the task. Although TAITI performs better than a random task interface, there is space for accuracy improvements. In this paper, we extend the interfaces computed by TAITI by including the dependences of the application files reached by the task tests. To understand the potential benefits of our extension, we evaluate precision and recall of 60 task interfaces from 8 Rails GitHub projects. The results bring evidence that the extended interface improves recall by slightly compromising precision.	Behaviour-Driven Development; Collaborative development; File change prediction	Joao Pedro Santos; Thais Rocha; Paulo Borba	SBCARS '19: Proceedings of the XIII Brazilian Symposium on Software Components, Architectures, and Reuse	https://doi.org/10.1145/3357141.3357145		53-62		Included	Included	new_screen			2	ACM		Improving the Prediction of Files Changed by Programming Tasks	https://dl.acm.org/doi/10.1145/3357141.3357145	Association for Computing Machinery	nan; References; Year; Bibtex
140	Behave	Test-Driven Java Development	Invoke TDD principles for end-to-end application development with JavaAbout This BookExplore the most popular TDD tools and frameworks and become more proficient in building applicationsCreate applications with better code design, fewer bugs, and higher test coverage, enabling you to get them to market quicklyImplement test-driven programming methods into your development workflowsWho This Book Is ForIf you're an experienced Java developer and want to implement more effective methods of programming systems and applications, then this book is for you.What You Will LearnExplore the tools and frameworks required for effective TDD developmentPerform the Red-Green-Refactor process efficiently, the pillar around which all other TDD procedures are basedMaster effective unit testing in isolation from the rest of your codeDesign simple and easily maintainable codes by implementing different techniquesUse mocking frameworks and techniques to easily write and quickly execute testsDevelop an application to implement behaviour-driven development in conjunction with unit testingEnable and disable features using Feature TogglesIn DetailTest-driven development (TDD) is a development approach that relies on a test-first procedure that emphasises writing a test before writing the necessary code, and then refactoring the code to optimize it.The value of performing TDD with Java, one of the most established programming languages, is to improve the productivity of programmers, the maintainability and performance of code, and develop a deeper understanding of the language and how to employ it effectively.Starting with the basics of TDD and reasons why its adoption is beneficial, this book will take you from the first steps of TDD with Java until you are confident enough to embrace the practice in your day-to-day routine.You'll be guided through setting up tools, frameworks, and the environment you need, and will dive right in to hands-on exercises with the goal of mastering one practice, tool, or framework at a time. You'll learn about the Red-Green-Refactor procedure, how to write unit tests, and how to use them as executable documentation.With this book you'll also discover how to design simple and easily maintainable code, work with mocks, utilise behaviour-driven development, refactor old legacy code, and release a half-finished feature to production with feature toggles.You will finish this book with a deep understanding of the test-driven development methodology and the confidence to apply it to application programming with Java.Style and approachAn easy-to-follow, hands-on guide to building applications through effective coding practices. This book covers practical examples by introducing different problems, each one designed as a learning exercise to help you understand each aspect of TDD.		Farcic, Viktor; Garcia, Alex						Excluded	Excluded	new_screen			2						
141	Behave	An industrial case study on test cases as requirements	It is a conundrum that agile projects can succeed ‘without requirements’ when weak requirements engineering is a known cause for project failures. While Agile development projects often manage well without extensive requirements documentation, test cases are commonly used as requirements. We have investigated this agile practice at three companies in order to understand how test cases can fill the role of requirements. We performed a case study based on twelve interviews performed in a previous study. The findings include a range of benefits and challenges in using test cases for eliciting, validating, verifying, tracing and managing requirements. In addition, we identified three scenarios for applying the practice, namely as a mature practice, as a de facto practice and as part of an agile transition. The findings provide insights into how the role of requirements may be met in agile development including challenges to consider. © Springer International Publishing Switzerland 2015.		Bjarnason E., Unterkalmsteiner M., Engström E., Borg M.	Lecture Notes in Business Information Processing					Included	Included	new_screen			2						
142	Behave	Chapter Five - Advances in Testing JavaScript-Based Web Applications	JavaScript is a flexible and expressive prototype-based scripting language that is used by developers to create interactive web applications. The language is interpreted, dynamic, weakly typed, and has first-class functions. It also interacts extensively with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to analyze and test. In this chapter, we explore recent advances made in analysis and testing techniques geared toward JavaScript-based web applications. In particular, we look at recent empirical studies, testing techniques, test oracle automation approaches, test adequacy assessment methods, fault localization and repair, and Integrated Development Environment support to help programmers write better JavaScript code.	JavaScript, Testing, Dynamic analysis, Web applications, Test adequacy, Oracles	Mesbah, Ali						Excluded	Excluded	new_screen			2						
143	Behave	Mastering Symfony	Key FeaturesCreate a robust and reliable Symfony development pipeline using Amazon's cloud platformCut development and maintenance costs by defining crystal clear features and possible scenarios for each feature before implementationFollow detailed examples provided in each chapter to create a task management applicationBook DescriptionIn this book, you will learn some lesser known aspects of development with Symfony, and you will see how to use Symfony as a framework to create reliable and effective applications. You might have developed some impressive PHP libraries in other projects, but what is the point when your library is tied to one particular project? With Symfony, you can turn your code into a service and reuse it in other projects.This book starts with Symfony concepts such as bundles, routing, twig, doctrine, and more, taking you through the request/response life cycle. You will then proceed to set up development, test, and deployment environments in AWS. Then you will create reliable projects using Behat and Mink, and design business logic, cover authentication, and authorization steps in a security checking process. You will be walked through concepts such as DependencyInjection, service containers, and services, and go through steps to create customized commands for Symfony's console. Finally, the book covers performance optimization and the use of Varnish and Memcached in our project, and you are treated with the creation of database agnostic bundles and best practices.What you will learnInstall and configure Symfony and required third-party bundles to develop a task management applicationSet up a continuous integration server to orchestrate automatic builds every time you add a new feature to your projectReduce maintenance costs dramatically using Behaviour Driven Development (BDD)Create a slick user interface using the Bootstrap frameworkDesign robust business logic using DoctrineBuild a comprehensive dashboard and secure your project using the Sonata projectImprove performance using Redis, Memcache, and VarnishCreate customized Symfony commands and add them to your consoleAbout the AuthorSohail Salehi is a full stack web developer who is constantly seeking creative solutions for complex problems. He believes that what has been taught as universalities should be considered as a basic stepping stone to real-life challenges. They cannot be used as practical solutions. He learned that a one-size-fits-all solution does not work in the IT world. Every business, every coding challenge, and every environment setup has its own signature and requires some tweaking on basic principals to make sure that it receives a reliable cost-effective solution.When he is not staring at his computer screen, he is watching sunsets and sunrises, swimming and surfing in the ocean, and putting his subconscious mind at work by asking creative questions while facing life's ups and downs on a daily basis.Table of ContentsInstalling and Configuring SymfonyThe Request and Response Life CycleSetting Up the EnvironmentUsing Behavior-Driven Development in SymfonyBusiness LogicDashboard and SecurityThe Presentation LayerProject ReviewServices and Service ContainersCustom User CommandsMore about Dev, Test and Prod EnvironmentsCaching in Symfony		Salehi, Sohail						Excluded	Excluded	new_screen			2						
144	Behave	RSpec Essentials	Key FeaturesExplore the concept of testability and how to implement tests that deliver the most valueMaximize the quality of your Ruby code through a wide variety of testsMaster the real-world tradeoffs of testing through detailed examples supported by in-depth discussionBook DescriptionThis book will teach you how to use RSpec to write high-value tests for real-world code. We start with the key concepts of the unit and testability, followed by hands-on exploration of key features. From the beginning, we learn how to integrate tests into the overall development process to help create high-quality code, avoiding the dangers of testing for its own sake.We build up sample applications and their corresponding tests step by step, from simple beginnings to more sophisticated versions that include databases and external web services. We devote three chapters to web applications with rich JavaScript user interfaces, building one from the ground up using behavior-driven development (BDD) and test-driven development (TDD).The code examples are detailed enough to be realistic while simple enough to be easily understood. Testing concepts, development methodologies, and engineering tradeoffs are discussed in detail as they arise. This approach is designed to foster the reader's ability to make well-informed decisions on their own.What you will learnIdentify a unit of software for the purposes of testingManage test states with hooks, fixtures, and mocksHandle external web services in tests using various techniquesConfigure RSpec flexibly and cleanly using support code and environment variablesInteract with rich web apps in tests using CapybaraBuild the right feature with behavior-driven developmentCustomize matchers and failure messagesVerify correct development and production environmentsAbout the AuthorMani Tadayon first learned to program as a shy 7th grader on an Apple IIe using BASIC. He went on to learn Pascal, C++, Java, JavaScript, Visual Basic, and PHP before becoming a Ruby developer in 2008. With 15 years of experience in the software industry, he has developed expertise in web development, infrastructure, and testing. Mani's interests and education are broad, with degrees in foreign languages, computer science, and geography. He lives just far enough from Silicon Valley with his family and their many, many Shiba Inus.Table of ContentsExploring Testability from Unit Tests to Behavior-Driven DevelopmentSpecifying Behavior with Examples and MatchersTaking Control of State with Doubles and HooksSetting Up and Cleaning UpSimulating External ServicesDriving a Web Browser with CapybaraBuilding an App from the Outside In with Behavior-Driven DevelopmentTackling the Challenges of End-to-end TestingConfigurabilityOdds and Ends		Tadayon, Mani						Excluded	Excluded	new_screen			2						
145	Behave	Crowdsourced Behavior-Driven Development	Key to the effectiveness of crowdsourcing approaches for software engineering is workflow design, describing how complex work is organized into small, relatively independent microtasks. This paper, we introduce a Behavior-Driven Development (BDD) workflow for accomplishing programming work through self-contained microtasks, implemented as a preconfigured environment called CrowdMicroservices. In our approach, a client, acting on behalf of a software team, describes a microservice as a set of endpoints with paths, requests, and responses. A crowd then implements the endpoints, identifying individual endpoint behaviors that they test, implement, debug, create new functions, and interact with persistence APIs as needed. To evaluate our approach, we conducted a feasibility study in which a small crowd worked to implement a small ToDo microservice. The crowd created an implementation with only four defects, completing 350 microtasks and implementing 13 functions. We discuss the implications of these findings for incorporating crowdsourced programming contributions into traditional software projects.	Microtask programming, Programming environments, Behavior-Driven Development, Crowdsourcing, Workflow, Microservices	Aghayi, Emad; LaToza, Thomas D.; Surendra, Paurav; Abolghasemi, Seyedmeysam	Journal of Systems and Software					Included	Included	new_screen			2						
146	Behave	Using Language Workbenches and Domain-Specific Languages for Safety-Critical Software Development	Language workbenches support the efficient creation, integration, and use of domain-specific languages. Typically, they execute models by code generation to programming language code. This can lead to increased productivity and higher quality. However, in safety-/mission-critical environments, generated code may not be considered trustworthy, because of the lack of trust in the generation mechanisms. This makes it harder to justify the use of language workbenches in such an environment. In this paper, we demonstrate an approach to use such tools in critical environments. We argue that models created with domain-specific languages are easier to validate and that the additional risk resulting from the transformation to code can be mitigated by a suitably designed transformation and verification architecture. We validate the approach with an industrial case study from the healthcare domain. We also discuss the degree to which the approach is appropriate for critical software in space, automotive, and robotics systems.	Case study; Domain-specific languages; Language workbenches; Safety-critical software development	Voelter, Markus; Kolb, Bernd; Birken, Klaus; Tomassetti, Federico; Alff, Patrick; Wiart, Laurent; Wortmann, Andreas; Nordmann, Arne	Softw. Syst. Model.					Excluded	Excluded	new_screen			2						
147	Behave	Instant RSpec Test - Driven Development How-To	Learn RSpec and redefine your approach towards software development Overview Learn something new in an Instant! A short, fast, focused guide delivering immediate results Learn how to use RSpec with Rails Easy to read and grok examples Write idiomatic specifications In Detail RSpec is a behaviour driven development framework for Ruby programmers. It comes integrated with its own mocking framework based on Jmock. This book introduces you to RSpec helping you to write idiomatic specifications for Ruby code in a test first approach. Instant RSpec Test-Driven Development How-to is filled with examples of actual code accompanied by explanations and covers general Ruby, Rails, and RSpec use cases plus a few of the more advanced topics. RSpec Test Driven Development is written on the premise that you will need no experience with RSpec and limited experience with Ruby, Rails, and TDD fundamentals. Youll begin by writing a very simple Ruby library in true TDD fashion and and use the red, green, refactor tools to migrate this library into a Rails application. Instant RSpec Test-Driven Development How-to will teach you the actual steps performed in writing an idiomatic specification. You will be able to write a test for the code you wish you had, and learn to write only the minimum code necessary to pass a test, and write more specifications to drive out the production functionality your application will need. Through the course of the book, you will convert a Ruby program into a new Rails application, test Rails specifics such as file uploads, cookies, and model validation and even learn how to use Capybara. RSpec Test Driven Development will help you build confidence in the code they you write and spend less time dealing with bugs and maintenance headaches. What you will learn from this book RSpec fundamentals How to use RSpec and Rails together Modify your behavior to create tests first and run your specs with every code change How to work with the rspec command line tool Using mocks and stubs to decouple tests from the database How to refactor code to improve readability Approach Filled with practical, step-by-step instructions and clear explanations for the most important and useful tasks. A concise guide that delivers immediate results with practical recipes on learning practical hints. Who this book is written for This book is aimed at Ruby developers with beginner level expertise who want to use RSpec and test driven development methodology to improve the code they write. Experienced programmers new to Ruby will also benefit from this book which also covers creating testable, idiomatic Ruby code.		Feduke, Charles						Excluded	Excluded	new_screen			2						
148	Behave	Behavior-driven Load Testing Using Contextual Knowledge - Approach and Experiences	Load testing is widely considered a meaningful technique for performance quality assurance. However, empirical studies reveal that in practice, load testing is not applied systematically, due to the sound expert knowledge required to specify, implement, and execute load tests.	behavior-driven testing; declarative performance engineering; load testing	Henning Schulz; Dusan Okanovic; Andre van Hoorn; Vincenzo Ferme; Cesare Pautasso	ICPE '19: Proceedings of the 2019 ACM/SPEC International Conference on Performance Engineering	https://doi.org/10.1145/3297663.3309674		265-272		Included	Included	new_screen			2	ACM		Behavior-Driven Load Testing Using Contextual Knowledge - Approach and Experiences	https://dl.acm.org/doi/10.1145/3297663.3309674	Association for Computing Machinery	nan; References; Year; Bibtex
149	Behave	Challenges &amp; Opportunities in Low-Code Testing	Low-code is a growing development approach supported by many platforms. It fills the gap between business and IT by supporting the active involvement of non-technical domain experts, named Citizen Developer, in the application development lifecycle.Low-code introduces new concepts and characteristics. However, it is not investigated yet in academic research to point out the existing challenges and opportunities when testing low-code software. This shortage of resources motivates this research to provide an explicit definition to this area that we call it Low-Code Testing.In this paper, we initially conduct an analysis of the testing components of five commercial Low-Code Development Platforms (LCDP) to present low-code testing advancements from a business point of view. Based on the low-code principles as well as the result of our analysis, we propose a feature list for low-code testing along with possible values for them. This feature list can be used as a baseline for comparing low-code testing components and as a guideline for building new ones. Accordingly, we specify the status of the testing components of investigated LCDPs based on the proposed features. Finally, the challenges of low-code testing are introduced considering three concerns: the role of citizen developer in testing, the need for high-level test automation, and cloud testing. We provide references to the state-of-the-art to specify the difficulties and opportunities from an academic perspective. The results of this research can be used as a starting point for future research in low-code testing area.	testing; citizen developer; low-code; low-code development platform	Khorram, Faezeh; Mottu, Jean-Marie; Sunyé, Gerson	Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings					Excluded	Excluded	new_screen			2						
150	Behave	Toward leveraging Gherkin Controlled Natural Language and Machine Translation for Global Product Information Development	Machine Translation (MT) already plays an important part in software development process at McAfee where the technology can be leveraged to provide early builds for localization and internationalization testing teams. Behavior Driven Development (BDD) has been growing in usage as a development methodology in McAfee. Within BDD, the Gherkin Controlled Natural Language (CNL) is a syntax and common terminology set that is used to describe the software or business process in a User Story. Given there exists this control on the language to describe User Stories for software features using Gherkin, we seek to use Machine Translation to Globalize it at high accuracy and without Post-Editing and reuse it as Product Information. This enables global product information development to happen as part of the Software Development Life Cycle (SDLC) and at low cost. © 2018 Morgan O’Brien, McAfee LLC.		O’Brien M.	EAMT 2018 - Proceedings of the 21st Annual Conference of the European Association for Machine Translation					Included	Included	new_screen			2						
151	Behave	Automating test oracles from restricted natural language agile requirements	Manual testing of software requirements written in natural language for agile or any other methodology requires more time and human resources. This leaves the testing process error prone and time consuming. For satisfied end users with bug-free software delivered on time, there is a need to automate the test oracle process for natural language or informal requirements. The automation of the test oracle is relatively easier with formal requirements, but this task is difficult to achieve with natural language requirements. This study proposes an approach called Restricted Natural Language Agile Requirements Testing (ReNaLART) to automate the test oracle from restricted natural language agile requirements. For this purpose, it uses an existing user story template with some modifications for writing user stories. This helps in identifying test input and expected output for a user story. For comparison of expected and observed outputs it makes use of a regex pattern and string distance functions. It is capable of assigning different types of verdicts automatically depending upon the similarity/dissimilarity between observed and expected outputs of user stories. ReNaLART is validated using several case studies of different domains, namely, OLX Pakistan, Mental Health Tests, McDelivery Pakistan, BlueStacks, Power Searching with Google, TensorFlow Playground, w3Schools 2018 offline and Touch'D. It revealed several faults in five of the above listed eight applications. Plus, the proposed test oracle on an average took 0.02 s for test data generation, expected output generation and verdict assignment. Both these facts show the fault revealing effectiveness and efficiency of ReNaLART. © 2020 John Wiley & Sons, Ltd		Malik M.I., Sindhu M.A., Khattak A.S., Abbasi R.A., Saleem K.	Expert Systems					Included	Included	new_screen			2						
152	Behave	Scenario-Based Microservice Retrieval Using Word2Vec	Microservice architecture (MSA) is an emerging software architectural style, which differs fundamentally from the monolithic, layered architecture. During the development and maintenance of microservice systems, how to provide an effective service retrieval mechanism is a critical challenge to avoid the problems of rework and duplicate code. Meanwhile, nowadays, using the BDD (Behavior-Driven Development) method to develop microservices becomes more and more popular due to its agility and domain-driven characteristics. BDD is an agile software development approach emphasizing that test cases are written in a common language to include scenarios that describe the features of a target system. In this paper, we propose an approach, referred to as SMSR (Scenario-based MicroService Retrieval), to recommend appropriate microservices to users based on the user-written BDD test scenarios. The proposed service retrieval algorithm is based on word2vec, a widely-used machine learning method in NLP (Natural Language Processing), to perform service filtering and service similarity calculation. Experiment results show that SMSR is able to effectively retrieve appropriate microservices from the service repository.	Software; Organizations; Computer architecture; Machine learning; Natural language processing; Filtering; Semantics; Machine Learning; Software Development; Agility; Test Scenarios; Agile Development; Clone Detection; Widely-used Method; Developmental Stages; Support Vector Machine; Artificial Neural Network; Similarity Score; Information Retrieval; Semantic Similarity; Word Embedding; User Requirements; Expansion Method; Similar Words; Context Words; Usage Scenarios; Field Of Computing; Vector Space Model; Service Description; WordNet; Word2vec Model; Removing Stop Words; Microservice, Microservice Retrieval, Requirement Scenario, Behavior-Driven Development, word2vec	Shang-Pin Ma; Yen Chuang; Ci-Wei Lan; Hsi-Min Chen; Chun-Ying Huang; Chia-Yu Li	2018 IEEE 15th International Conference on e-Business Engineering (ICEBE)	https://doi.org/10.1109/ICEBE.2018.00046	"1.I. Nadareishvili, R. Mitra, M. McLarty and M. Amundsen, Microservice Architecture: Aligning Principles Practices and Culture, OReillv Media. Inc., 2016. Google Scholar; 2.C. Y. Fan and S. P. Ma, ""Migrating Monolithic Mobile Application to Microservice Architecture: An Experiment Report"", 2017 IEEE International Conference on AI  Mobile Services (AIMS), pp. 109-112, 2017. View Article  Google Scholar; 3.C. Solis and X. Wang, ""A study of the characteristics of behaviour driven development"", 2011 37th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA), pp. 383-387, 2011. View Article  Google Scholar; 4.M. Soeken, R. Wille and R. Drechsler, Assisted Behavior Driven Development Using Natural Language Processing, Berlin, Heidelberg, pp. 269-287, 2012. Google Scholar; 5.E. Evans and R. Szpoton, Domain-driven design: Helion, 2015. Google Scholar; 6.M. Rahman and J. Gao, ""A reusable automated acceptance testing architecture for microservices in behavior-driven development"", 2015 IEEE Symposium on Service-Oriented System Engineering (SOSE), pp. 321-325, 2015. View Article  Google Scholar; 7.OpenAPI Specification (OAS),  [online]  Available: httns.//swagger.io/docs/snccification/. Google Scholar; 8.RAML (RESTful API Modeling Language),  [online]  Available: https://raml.org/. Google Scholar; 9.T. Mikolov, K. Chen, G. Corrado and J. Dean, Efficient estimation of word representations in vector space, 2013. Google Scholar; 10.S.-P. Ma, C.-H. Li, Y.-Y. Tsai and C.-W. Lan, ""Web Service Discovery Using Lexical and Semantic Query Expansion"", 2013 IEEE 10th International Conference on e-Business Engineering (ICEBE), pp. 423-428, 2013. View Article  Google Scholar; 11.Y. Hao, Y. Zhang and J. Cao, ""Web services discovery and rank: An information retrieval approach"", Future Generation Computer Systems, vol. 26, pp. 1053-1062, 2010. CrossRef  Google Scholar; 12.S. Sharma, J. S. Lather and M. Dave, ""Semantic approach for Web service classification using machine learning and measures of semantic relatedness"", Service Oriented Computing and Applications, vol. 10, pp. 221-231, September 2016. CrossRef  Google Scholar; 13.M. Gysel, L. Kolbener, W. Giersche and O. Zimmermann, ""Service cutter: A systematic approach to service decomposition"", European Conference on Service-Oriented and Cloud Computing, pp. 185-200, 2016. CrossRef  Google Scholar; 14.L. Baresi, M. Garriga and A. De Renzis, ""Microservices Identification Through Interface Analysis"", European Conference on Service-Oriented and Cloud Computing, pp. 19-33, 2017. CrossRef  Google Scholar; 15.S.-P. Ma, C.-W. Lan and C.-H. Li, ""Contextual service discovery using term expansion and binding coverage analysis"", Future Generation Computer Systems, vol. 48, pp. 73-81, 2015. CrossRef  Google Scholar; 16.A. Bagga and B. Baldwin, ""Entity-based cross-document coreferencing using the vector space model"", Proceedings of the 17th international conference on Computational linguistics, vol. 1, pp. 79-85, 1998. CrossRef  Google Scholar; 17.S. P. Ma, C. Y. Fan, Y. Chuang, W. T. Lee, S. J. Lee and N. L. Hsueh, ""Using Service Dependency Graph to Analyze and Test Microservices"", 2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC), pp. 81-86, 2018. View Article  Google Scholar"			Included	Included	new_screen			2	IEEE		Scenario-Based Microservice Retrieval Using Word2Vec	https://ieeexplore.ieee.org/document/8592657	IEEE	nan; Pages; Year; Bibtex
153	Behave	Agile development cycle: Approach to design an effective Model Based Testing with Behaviour driven automation framework	Model Based Testing (MBT) is a relatively an approach widely discussed in software testing. It extends test automation from test design to test execution using automatic test generation from models. The effective use of this approach requires new skills, technology and knowledge, such as test modelling skills, but also good programs and tool support. This paper explores a design of a Behaviour driven test automation framework using MBT and how it can be effectively used during Agile Development. The automation framework is experimented upon the integration of the Graphwalker, a Model Based Graphical User Interface test generator with behaviour driven development framework and Robot Framework.	Data structures; Boolean functions; Testing; Libraries; Pipelines; Radio frequency; Generators; Agile Development; Model-based Testing; Automation Framework; Support Tool; Testing Tools; Software Testing; Testing Framework; Executive Tests; Heuristic; Best Practices; State Machine; Online Assessment; Test Suite; Test Configuration; Continuous Integration; Vertex Labels; Software Testing; Automation Framework; Model Based Testing; Behaviour Driven Automation; Graphical User Interface Testing; Agile Development	Sandeep Sivanandan; Yogeesha C. B	20th Annual International Conference on Advanced Computing and Communications (ADCOM)	https://doi.org/10.1109/ADCOM.2014.7103243	"1.""A generic test automation framework"", The Robot Frame Work website,  [online]  Available: http://code.google.com/p/robotframework. Google Scholar; 2.""The Open Source Model-Based Testing Tool"", The Graphwalker website,  [online]  Available: http://graphwalker.org/. Google Scholar; 3.""The Magazine for Professional Testers"", Test Experience _ Model Based Testing,  [online]  Available: http://www.testingexperience.com/testingexperience17_03_12.pdf, ISSN 1866-5705. Google Scholar; 4.Michiel Pieter and Willem Jacob van Osch, ""Automated Model-based Testing of Hybrid Systems"", pp. 2009-04, 2009. Google Scholar; 5.""Software Testing and Software Quality Assurance"", TOSCA Test Suite,  [online]  Available: www.tricentis.at. Google Scholar; 6.""Applied Model Based Testing - Experiences & Examples"", SimonEjsing, August 2007,  [online]  Available: http://appMBT.blogspot.in/. Google Scholar; 7.""SeleniumHQ Web Application TestingSystem"", Selenium Home Page,  [online]  Available: http://seleniumhq.org/. Google Scholar; 8.B. Gopularam, ""Mechanism for on demand Tag-Based software testing in virtualized environments"", 4th International Conference on Advance Computing - IcoAC-2012, Dec 13-15, 2012. CrossRef  Google Scholar; 9.Kleanthis Thramboulidis and Alkiviadis Zoupas, ""Real-Time Java in Control and Automation: A Model Driven Development Approach"", 10th IEEE Conference on Emerging Technologies and Factory Automation 2005, 2005. CrossRef  Google Scholar"			Included	Included	new_screen			2	IEEE		Agile development cycle: Approach to design an effective Model Based Testing with Behaviour driven automation framework	https://ieeexplore.ieee.org/document/7103243	IEEE	nan; Pages; Year; Bibtex
154	Behave	Automated test case generation from domain specific models of high-level requirements	Model-based software development has been shown to improve productivity and quality of software through automation. This involves using abstractions or models at several stages of development. This work reports on preliminary attempts to automate the generation of test cases from software requirement models using an industrial case study. The requirements are represented using a modeling notation and test cases are automatically generated using model to text transformation techniques.	domain specific languages; model-based testing	Oyindamola Olajubu; Suraj Ajit; Mark Johnson; Scott Turner; Scott Thomson; Mark Edwards	RACS '15: Proceedings of the 2015 Conference on research in adaptive and convergent systems	https://doi.org/10.1145/2811411.2811555		505-508		Excluded	Excluded	new_screen			2	ACM		Automated Test Case Generation from Domain Specific Models of High-Level Requirements	https://dl.acm.org/doi/10.1145/2811411.2811555	Association for Computing Machinery	nan; References; Year; Bibtex
155	Behave	Towards a workflow for model-based testing of embedded systems	Model-based testing (MBT) has been previously used to validate embedded systems. However, (i) creation of a model conforming to the behavioural aspects of an embedded system, (ii) generation of executable test scripts and (iii) assessment of test verdict, re-quires a systematic process. In this paper, we have presented a three-phase tool-supported MBT workflow for the testing of an embedded system, that spans from requirements specification to test verdict assessment. The workflow starts with a simplistic, yet practical, application of a Domain-Specific Language (DSL) based on Gherkin-like style, which allows the requirements engineer to specify requirements and to extract information about model elements(i.e. states and transitions). This is done to assist the graphical modelling of the complete system under test (SUT). Later stages of the workflow generates an executable test script that runs on a domain-specific simulation platform. We have evaluated this tool-supported workflow by specifying the requirements, extracting information from the DSL and developing a model of a subsystem of the train control management system developed at Alstom Transport AB in Sweden. The C# test script generated from the SUT model is successfully executed at the Software-in-the-Loop (SIL) execution platform and test verdicts are visualized as a sequence of passed and failed test steps.	Domain-Specific Language; Model-Based Testing; Software-in-the-Loop	Muhammad Nouman Zafar; Wasif Afzal; Eduard Enoiu	A-TEST 2021: Proceedings of the 12th International Workshop on Automating TEST Case Design, Selection, and Evaluation	https://doi.org/10.1145/3472672.3473956		33-40		Included	Included	new_screen			2	ACM		Towards a Workflow for Model-Based Testing of Embedded Systems	https://dl.acm.org/doi/10.1145/3472672.3473956	Association for Computing Machinery	nan; References; Year; Bibtex
156	Behave	Model-Based Testing in Practice: An Industrial Case Study using GraphWalker	Model-based testing (MBT) is a test design technique that supports the automation of software testing processes and generates test artefacts based on a system model representing behavioural aspects of the system under test (SUT). Previous research has shown some positive aspects of MBT such as low-cost test case generation and fault detection effectiveness. However, it is still a challenge for both practitioners and researchers to evaluate MBT tools and techniques in real, industrial settings. Consequently, the empirical evidence regarding the mainstream use, including the modelling and test case generation using MBT tools, is limited. In this paper, we report the results of a case study on applying GraphWalker, an open-source tool for MBT, on an industrial cyber-physical system (i.e., a Train Control Management System developed by Bombardier Transportation in Sweden), from modelling of real-world requirements and test specifications to test case generation. We evaluate the models of the SUT for completeness and representativeness, compare MBT with manual test cases written by practitioners using multiple attributes as well as share our experiences of selecting and using GraphWalker for industrial application. The results show that a model of the SUT created using both requirements and test specifications provides better understanding of the SUT from testers' perspective, making it more complete and representative than the model created based only on the requirements specification alone. The generated model-based test cases are longer in terms of the number of test steps, achieve better edge coverage and can cover requirements more frequently in different orders while achieving the same level of requirements coverage as manually created test cases.	Case Study; GraphWalker; Model-Based Testing	Muhammad Nouman Zafar; Wasif Afzal; Eduard Enoiu; Athanasios Stratis; Aitor Arrieta; Goiuria Sagardui	ISEC '21: Proceedings of the 14th Innovations in Software Engineering Conference (formerly known as India Software Engineering Conference)	https://doi.org/10.1145/3452383.3452388		1-11		Excluded	Excluded	new_screen			2	ACM		Model-Based Testing in Practice: An Industrial Case Study Using GraphWalker	https://dl.acm.org/doi/10.1145/3452383.3452388	Association for Computing Machinery	nan; References; Year; Bibtex
157	Behave	Towards behavior driven operations (BDOps)	Modern Enterprise Software Systems entail many challenges such as availability, scalability, complexity and providing business agility. Ensuring the systems to be up and running for 24 x 7 has become a mandate for operations. Agile development has been adopted to keep pace with the demands of business and IT. Test Driven Development (TDD) and Behavior Driven Development (BDD) are practices, which enable agile development. So far the agile approach has been limited to development. For ensuring business to be truly agile, we need to take forward the agile approach to operations. In this paper, we discuss the behavior driven approach for operations specifically on the core sub-systems like infrastructure provisioning, deployment and monitoring. We share our explorations and experiments with Behavior Driven Monitoring (BDM) and how the same can be adopted for infrastructure provisioning and deployment. We used Cucumber-Nagios to detect behavior of an enterprise application. We close this paper with a note on the benefits to busmess and IT showing its relevance to DevOps, Continuous Delivery and Cloud Computing.	Behavior Driven Development; Behavior Driven Operations; Behavior Driven Monitoring; Cucumber-Nagios; Behavior Driven Infrastructure	Komal Gohil; Nagalakshmi Alapati; Sunil Joglekar	3rd International Conference on Advances in Recent Technologies in Communication and Computing (ARTCom 2011)	https://doi.org/10.1049/ic.2011.0095				Included	Included	new_screen			2	IEEE		Towards behavior driven operations (BDOps)	https://ieeexplore.ieee.org/document/6193584	IET	nan; References; Pages; Year; Bibtex
158	Behave	Combining behaviour-driven development with scrum for software development in the education domain	Most of the Brazilian universities employ teaching-learning methodologies based on classic frontal lectures. The Medicine Programme of the Federal University of São Carlos (UFSCar) is an exception, since it employs active learning methodologies. The Educational and Academic Management System for Courses Based on Active Learning Methodologies (EAMS-CBALM) was built and it is currently used to support this programme, and has been made available for other programmes as well. This system was developed using Scrum, but during its development project it was often necessary to reconsider system behaviour scenarios, and consequently the product backlog items, mainly due to poor communication between the Product Owner (PO) and the development team. This paper discusses a case study in which Behaviour-Driven Development (BDD) has been used in combination with Scrum to redesign some EAMS-CBALM components. The paper demonstrates that the communication between the PO and the development team can be improved by using BDD as a communication platform to unambiguously define system requirements and automatically generate test suites. ©2017 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.		De Souza P.L., Do Prado A.F., De Souza W.L., Dos Santos Forghieri Pereira S.M., Pires L.F.	ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems					Included	Included	new_screen			2						
159	Behave	Enterprise ontology-driven development	Most of the current techniques and approaches for user requirements specification have problems with capturing the appropriate context for development of enterprise information systems. Primarily, they are designed to capture the functional aspects of software rather than its relevancy to an enterprise. Transactions defined in the DEMO (Design & Engineering Methodology for Organizations) represent business activities in their existential essence without implementation details. Therefore, they are great candidates to be utilized for the initial development phase of enterprise information systems. The paper exemplifies how to specify software specification the using the DEMO transaction pattern and BDD (Behaviour-Driven Development) technique. This proposal resulted from a significant lack of direct utilization of ontology for enterprise information systems development. The major part of the paper gives a step-by-step explanation of how to integrate DEMO transaction patterns into initial BDD scenarios for the development of enterprise information systems. Such created scenarios provide a perfect guideline in the initial phase of information system development for enterprises. The created scenarios were verified using the domain specific language Gherkin and BDD framework Behat. © Springer Nature Switzerland AG 2018.		Matula J., Hunka F.	Lecture Notes in Business Information Processing					Included	Included	new_screen			2						
160	Behave	A Behavior-Based Ontology for Supporting Automated Assessment of Interactive Systems	Nowadays many software development frameworks implement Behavior-Driven Development (BDD) as a mean of automating the test of interactive systems under construction. Automated testing helps to simulate user's action on the User Interface and therefore check if the system behaves properly and in accordance to Scenarios that describe functional requirements. However, most of tools supporting BDD requires that tests should be written using low-level events and components that only exist when the system is already implemented. As a consequence of such low-level of abstraction, BDD tests can hardly be reused with diverse artifacts and with versions of the system. To address this problem, this paper proposes to raise the abstraction level by the means of a behavior-based ontology that is aimed at supporting test automation. The paper presents an ontology and an ontology-based approach for automating the test of functional requirements of interactive systems. With the help of a case study for the flight tickets e-commerce domain, we demonstrate how tests written using our ontology can be used to assess functional requirements using different artifacts, from low-fidelity to full-fledged UI Prototypes.	Ontologies; User interfaces; Interactive systems; Testing; Prototypes; Natural languages; Containers; Interactive System; Active Users; Level Of Abstraction; Functional Requirements; Testing Tools; Natural Language; Human-computer Interaction; User Behavior; State Machine; Acceptance Criteria; Object Properties; Mobile Platform; Interactive Elements; Markup Language; Consistency Checks; Text Field; User Tasks; Domain Ontology; Interface Elements; Common Vocabulary; Use Of Ontologies; Radio Buttons; Business Behavior; Interface Components; User Point; Automated Requirements Assessment; Behavior-Driven Development; Ontological Modeling; Testing of Interactive Systems	Thiago Rocha Silva; Jean-Luc Hak; Marco Winckler	2017 IEEE 11th International Conference on Semantic Computing (ICSC)	https://doi.org/10.1109/ICSC.2017.73	"1.D. Chelimsky, D. Astels, B. Helmkamp, D. North, Z. Dennis and A. Hellesoy, The RSpec Book: Behaviour Driven Development with Rspec Cucumber and Friends, Pragmatic Bookshelf, 2010. Google Scholar; 2.K. Pugh, Lean-Agile Acceptance Test-Driven-Development, Pearson Education, 2010. Google Scholar; 3.G. Adzic, Specification by Example: How Successful Teams Deliver the Right Software, Manning Publications, 2011. Google Scholar; 4.M. Cohn, User Stories Applied: For Agile Software Development, Addison-Wesley Professional, 2004. Google Scholar; 5.N. Guarino, D. Oberle and S. Staab, ""What is an Ontology?"" in Handbook on ontologies, Springer Berlin Heidelberg, pp. 1-17, 2009. CrossRef  Google Scholar; 6.G. Calvary, J. Coutaz, D. Thevenin, Q. Limbourg, L. Bouillon and J. Vanderdonckt, ""A Unifying Reference Framework for multi-target user interfaces"", Interacting with Computers, vol. 15, no. 3, pp. 289-308, 2003. CrossRef  Google Scholar; 7.Q. Limbourg, J. Vanderdonckt, B. Michotte, L. Bouillon and V. Lopez-Jaquero, ""USIXML: a Language Supporting Multi-Path Development of User Interfaces"", EHCI/DS-VIS, 2004. CrossRef  Google Scholar; 8.M. Winckler, J. Vanderdonckt, A. Stanciulescu and F. Trindade, ""Cascading dialog modeling with UsiXML"", International Workshop on Design Specification and Verification of Interactive Systems, pp. 121-135, 2008. CrossRef  Google Scholar; 9.M. Winckler and P. Palanque, ""StateWebCharts: A Formal Description Technique Dedicated to Navigation Modelling of Web Applications"" in Design Specification and Verification of Interactive Systems (DSV-IS), Springer-Verlag, pp. 61-67, 2003. CrossRef  Google Scholar; 10.J. Pullmann, ""MBUI - Glossary - W3C"", Fraunhofer FIT, 2016,  [online]  Available: https://www.w3.org/TR/mbui-glossary/. Google Scholar; 11.J. Barnett et al., ""State Chart XML (SCXML): State Machine Notation for Control Abstraction"", W3C, 2016,  [online]  Available: http://www.w3.org/TR/sexml/. Google Scholar; 12.D. North, Whats in a Story?, 2016,  [online]  Available: http://dannorth.net/whats-in-a-story/. Google Scholar; 13.J-L. Hak, M. Winckler and D. Navarre, ""PANDA: prototyping using annotation and decision analysis"", Proceedings of the 8th ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS'16), pp. 171-176, 2016. CrossRef  Google Scholar; 14.M. Fowler, Page Object, 2016,  [online]  Available: http://martinfowler.com/bliki/PageObject.html. Google Scholar"			Included	Included	new_screen			2	IEEE		A Behavior-Based Ontology for Supporting Automated Assessment of Interactive Systems	https://ieeexplore.ieee.org/document/7889535	IEEE	nan; Pages; Year; Bibtex
161	Behave	A Formal Ontology for Describing Interactive Behaviors and Supporting Automated Testing on User Interfaces	Nowadays many software development frameworks implement Behavior-Driven Development (BDD) as a mean of automating the test of interactive systems under construction. Automated testing helps to simulate user's actions on the User Interface and therefore check if the system behaves properly and in accordance to scenarios that describe functional requirements. However, tools supporting BDD run tests on implemented User Interfaces and are a suitable alternative for assessing functional requirements in later phases of the development process. However, even when BDD tests can be written in early phases of the development process they can hardly be used with specifications of User Interfaces such as prototypes. To address this problem, this paper proposes to raise the abstraction level of both system interactive behaviors and User Interfaces by means of a formal ontology that is aimed at supporting test automation using BDD. The paper presents an ontology and an ontology-based approach for automating the test of functional requirements of interactive systems. We demonstrate the feasibility of this ontology-based approach to assess functional requirements in prototypes and full-fledge applications through an illustrative case study of e-commerce applications for buying flight tickets. © 2017 World Scientific Publishing Company.		Silva T.R., Hak J.-L., Winckler M.	International Journal of Semantic Computing					Included	Included	new_screen			2						
162	Behave	Behavior Driven Development: Tools and Challenges	Nowadays testing usually applies Test Driven Development (TDD) which is an approach to software development in which developers write tests first which initially fail and by adding more application codes tests pass. However, the latest development in this field is an extension to Test Driven Development (TDD) which usually referred as Behavior Driven Development (BDD). As being a modified version of TDD, both the technologies have various similarities. Nevertheless, the differences are also not unnoticeable. Where BDD is more about communication and collaboration TDD is more about coders and coding. This paper focuses on the advantages and glitches of TDD which led to the development of along with the method of working of BDD and several tools along with their features and a comparison of their functionalities.	Testing; Tools; Cloud computing; Writing; Software; Business; Java; Behavior Driven Development; Best Practices; Big Data; Cloud Computing; Cucumber; Testing Tools; User Testing; Testing Coverage; Unit Tests; Simple Text; Huge Volume Of Data; Manual Testing; Test Driven Development (TDD); Behavior Driven Development (BDD); Collaboration	Rakesh Kumar Lenka; Srikant Kumar; Sunakshi Mamgain	2018 International Conference on Advances in Computing, Communication Control and Networking (ICACCCN)	https://doi.org/10.1109/ICACCCN.2018.8748595	"1.I. Ciupa, B. Meyer, M. Oriol and Pretschner, ""A Finding faults: Manual testing vs. random+ testing vs. user reports"", Software Reliability Engineering November 2008. ISSRE 2008. 19th International Symposium on, pp. 157-166. View Article  Google Scholar; 2.N. Nagappan, E.M. Maximilien, T. Bhat and L. Williams, ""Realizing quality improvement through test driven development: results and experiences of four industrial teams"", Empirical Software Engineering, vol. 13, no. 3, pp. 289-302, 2008. CrossRef  Google Scholar; 3.R.K. Barik, R.K. Lenka, A.B. Samaddar, J. Pattnaik, B. Prakash and V. Agarwal, ""m-GeoEduNet: Mobile SDI Model for Education Information Infrastructure Network"" in Advances in Electronics Communication and Computing, Singapore:Springer, vol. 443, 2018. CrossRef  Google Scholar; 4.Lech Madeyski and Lukasz Szala, ""The impact of test-driven development on software development productivity--an empirical study"", In European Conference on Software Process Improvement, pp. 200-211, 2007. CrossRef  Google Scholar; 5.Murat Tiryaki, Ali, Sibel Oztuna, Oguz Dikenelli and Riza CenkErdur, ""Sunit: A unit testing framework for test driven development of multi-agent systems"", International Workshop on Agent-Oriented Software Engineering, pp. 156-173, 2006. Google Scholar; 6.R.K. Barik, R.K. Lenka, S.R. Sahoo, B.B. Das and J. Pattnaik, ""Development of Educational Geospatial Database for Cloud SDI Using Open Source GIS"" in Progress in Advanced Computing and Intelligent Engineering. Advances in Intelligent Systems and Computing, Singapore:Springer, 2018. CrossRef  Google Scholar; 7.Yoonsik Cheon and Gary T. Leavens, ""A simple and practical approach to unit testing: The JML and JUnit way"", In European Conference on Object-Oriented Programming, pp. 231-255, 2002. CrossRef  Google Scholar; 8.R. K. Barik, R. K. Lenka, S. M. Ali, N. Gupta, A. Satpathy and A. Raj, ""Investigation into the efficacy of geospatial big data visualization tools"", 2017 International Conference on Computing Communication and Automation (ICCCA), pp. 88-93, 2017. View Article  Google Scholar; 9.R. K. Lenka and P. Ranjan, ""A Comparative Study on DFA-Based Pattern Matching for Deep Packet Inspection"", 2012 Third International Conference on Computer and Communication Technology, pp. 255-260, 2012. View Article  Google Scholar; 10.""SpecFlow-Pragmatic B. D. D. for .NET"", 2010. Google Scholar; 11.D. North, ""JBehave. A framework for behaviour driven development (BDD)"", 2012. Google Scholar; 12.R. K. Lenka, R. K. Barik, N. K. Das, K. Agarwal, D. Mohanty and S. Vipsita, ""PSPS: An IoT based predictive smart parking system"", 2017 4th IEEE Uttar Pradesh Section International Conference on Electrical Computer and Electronics (UPCON), pp. 311-317, 2017. View Article  Google Scholar; 13.M. Wynne and A. Hellesoy, ""The cucumber book: behaviour-driven development for testers and developers. Pragmatic Bookshelf"", 2012. Google Scholar; 14.S. M. Ali, N. Gupta, G. K. Nayak and R. K. Lenka, ""Big data visualization: Tools and challenges"", 2016 2nd International Conference on Contemporary Computing and Informatics (IC3I), pp. 656-660, 2016. View Article  Google Scholar; 15.R. K. Barik, P. K. Das and R. K. Lenka, ""Development and implementation of SOA based SDI model for tourism information infrastructure management web services"", 2016 6th International Conference - Cloud System and Big Data Engineering (Confluence), pp. 748-753, 2016. View Article  Google Scholar; 16.Ryan Stejskal and Harvey Siy, ""Test-driven learning in high school computer science"", In Software Engineering Education and Training (CSEE) 2013 IEEE 26th Conference on, pp. 289-293, 2013. View Article  Google Scholar; 17.Ghazala Mansuri and Vijayendra Rao, ""Community-based and-driven development: A critical review"", The World Bank Research Observer, vol. 19, no. 1, pp. 1-39, 2014. CrossRef  Google Scholar; 18.Giner P and V. Pelechano, ""Test-driven development of model transformations"", InInternational Conference on Model Driven Engineering Languages and Systems, pp. 748-752, 2009 Oct 4. Google Scholar; 19.Jianjun Zhao, ""Data-flow-based unit testing of aspect-oriented programs"", Computer Software and Applications Conference 2003. COMPSAC 2003. Proceedings. 27th Annual International, 2003. View Article  Google Scholar; 20.R. K. Lenka et al., ""Building Scalable Cyber-Physical-Social Networking Infrastructure using IoT and Low Power Sensors"", IEEE Access. View Article  Google Scholar; 21.G. Adzic, ""Test Driven. NET Development with FitNesse"", 2008. Google Scholar; 22.Per Runeson, ""A survey of unit testing practices"", IEEE software, vol. 23, pp. 22-29, 2006. View Article  Google Scholar; 23.Carlos Solis and Xiaofeng Wang, ""A study of the characteristics of behaviour driven development"", Software Engineering and Advanced Applications (SEAA) 2011 37th EUROMICRO Conference, pp. 383-387, 2011. View Article  Google Scholar; 24.R. K. Lenka, R. K. Barik, S. Panigrahi and S. S. Panda, ""An Improved Hybrid Distributed Collaborative Model for Filtering Recommender Engine Using Apache Spark"", International Journal of Intelligent Systems and Application (IJISA),  [online]  Available: . CrossRef  Google Scholar; 25.Rabindra K. Barik, Ankita Tripathi, Harishchandra Dubey, Rakesh K. Lenka, Tanjappa Pratik, Suraj Sharma, et al., ""Mistgis: Optimizing geospatial data analysis using mist computing"" in In Progress in Computing Analytics and Networking, Singapore:Springer, pp. 733-742, 2018. CrossRef  Google Scholar; 26.Rabindra K. Barik, Amaresh Chandra Dubey, Ankita Tripathi, T. Pratik, Sapna Sasane, Rakesh K. Lenka, et al., ""Mist Data: Leveraging Mist Computing for Secure and Scalable Architecture for Smart and Connected Health"", Procedia Computer Science, vol. 125, 2018,  [online]  Available: https://doi.org/10.1016/j.procs.2017.12.083. CrossRef  Google Scholar; 27.S.M. Ali, G.K. Nayak, R.K. Lenka and R.K. Barik, ""Movie Recommendation System Using Genome Tags and Content-Based Filtering"" in Advances in Data and Information Sciences, Singapore:Springer, vol. 38, 2018. CrossRef  Google Scholar; 28.R. K. Barik, R. K. Lenka, N. V. R. Simha, H. Debey and K. Mankodiya, ""Fog Computing based SDI Framework for Mineral Resources Information Infrastructure Management in India"", arXiv preprint arXiv: 1712.09282, 2017. Google Scholar; 29.Noopur Gupta, Rakesh K. Lenka, Rabindra K. Barik and Harishchandra Dubey, ""FAIR: A Hadoop-based Hybrid Model for Faculty Information Retrieval System"", arXiv preprint arXiv:1706.08018, 2017. Google Scholar; 30.R. K. Lenka, A. Aggarwal, A. Rath and S. Sharma, ""Cluster-based rendezvous routing protocol for wireless sensor network"", 2017 International Conference on Computing Communication and Automation (ICCCA), pp. 748-752, 2017. View Article  Google Scholar"			Included	Included	new_screen			2	IEEE		Behavior Driven Development: Tools and Challenges	https://ieeexplore.ieee.org/document/8748595	IEEE	nan; Pages; Year; Bibtex
163	Behave	Behavior Driven Development Approach in the Modern Quality Control Process	Nowadays usually the Behavior Driven Development is the approach of choice for the quality control engineers, especially for the long-term projects with the big amount of the audits, because of its main advantage - clear test scenarios visualization and understanding for the not involved persons. However, this approach could not reach its maximum efficiency without proper usage, but the documentation covers only the high-level practices which are not always enough to write the good test scenarios. That is why it is needed to describe the best practices and techniques of the usage of behavior-driven development, formed with the experience of its use. These practices would help to create correct and well understandable behavior scenarios, with the ability to use them as part of the technical documentation. Behavior-driven development would be considered in the comparison with the test-driven development and the domain-driven design approaches - the other important strategies in the quality assurance process.	Visualization; Automation; Process control; Quality control; Documentation; Manuals; Best practices; Quality Control; Quality Control Process; Best Practices; Test Scenarios; Quality Assurance Processes; English Language; Use Of Approach; Cucumber; Testing Tools; Common Mistakes; Domain-specific Languages; Design Documents; behaviour driven development; test driven development; quality control; gherkin; practice; technique; scenario; feature; keyword; step	Oleksandr Bezsmertnyi; Nataliia Golian; Vira Golian; Iryna Afanasieva	2020 IEEE International Conference on Problems of Infocommunications. Science and Technology (PIC S&T)	https://doi.org/10.1109/PICST51311.2020.9467891	"1.J. Smart, BDD in action, Shelter Island, N.Y:Manning, 2015. Google Scholar; 2.G. Nagy and S. Rose, Discovery: Explore behaviour using examples, CreateSpace Independent Publishing Platform, 2014. Google Scholar; 3.R. Lenka, S. Kumar and S. Mamgain, ""Behavior Driven Development: Tools and Challenges"", 2018 International Conference on Advances in Computing Communication Control and Networking (ICACCCN), 2018, 23 September 2020. View Article  Google Scholar; 4.J. Juran and J. De Feo, Juran's quality handbook, New York:McGraw-Hill, 2012. Google Scholar; 5.E. Evans, Domain-driven design, Boston, Mass:Addison-Wesley, 2014. Google Scholar; 6.Fowler and R. Parsons, Domain-specific languages, Upper Saddle River (NJ):Addison-Wesley, 2011. Google Scholar; 7.M. Wynne and A. Hellesoy, The cucumber book, Dallas, Tex:Pragmatic Bookshelf, 2012. Google Scholar; 8.""Gherkin Syntax - Cucumber Documentation"", Cucumber.io, Sep 2020,  [online]  Available: https://cucumber.io/docs/gherkin. Google Scholar; 9.D. Graham and M. Fewster, Experiences of test automation, Upper Saddle River, NJ:Addison-Wesley, 2012. Google Scholar; 10.G. Myers, C. Sandler and T. Badgett, The art of software testing, Hoboken, N.J:John Wiley & Sons, 2012. CrossRef  Google Scholar; 11.""Welcome to SpecFlow's documentation! -- documentation"", Docs.specflow.org, Sep 2020,  [online]  Available: https://docs.specflow.org/projects/specflow/en/latest/. Google Scholar"			Included	Included	new_screen			2	IEEE		Behavior Driven Development Approach in the Modern Quality Control Process	https://ieeexplore.ieee.org/document/9467891	IEEE	nan; Pages; Year; Bibtex
164	Behave	Behavior driven development for tests and verification	Nowadays, hardware is usually tested and verified at postdesign time. The bottom line is that more effort is spend in the validation phases than in the implementation, because it is harder to fix bugs in later design stages than during the implementation of the design. In contrast, test-first approaches such as test driven development (TDD) have become increasingly important for software development. Behavior driven development (BDD) extends TDD by using natural language style scenarios to describe tests. But both approaches miss formal verification methods which are very important in hardware design. This research project presents a new approach based on BDD that combines testing and verification seamlessly. © Springer Fachmedien Wiesbaden 2015. All rights reserved.		Diepenbeck M.	Formal Modeling and Verification of Cyber-Physical Systems: 1st International Summer School on Methods and Tools for the Design of Digital Systems, Bremen, Germany, September 2015					Excluded	Excluded	new_screen			2						
165	Behave	Towards automatic scenario generation from coverage information	Nowadays, the design of software systems is pushed towards agile development practices. One of its most fundamental approaches is Test Driven Development (TDD). This procedure is based on test cases which are incrementally written prior to the implementation. Recently, Behavior Driven Development (BDD) has been introduced as an extension of TDD, in which natural language scenarios are the starting point for the test cases. This description offers a ubiquitous communication mean for both the software developers and stakeholders.		Melanie Diepenbeck; Mathias Soeken; Daniel Grosse; Rolf Drechsler	AST '13: Proceedings of the 8th International Workshop on Automation of Software Test	https://doi.org/10.5555/2662413.2662432		82-88		Included	Included	new_screen			2	ACM		Towards Automatic Scenario Generation from Coverage Information	https://dl.acm.org/doi/10.5555/2662413.2662432	IEEE Press	nan; Keywords; References; Year; Bibtex
166	Behave	Towards automatic scenario generation from coverage information	Nowadays, the design of software systems is pushed towards agile development practices. One of its most fundamental approaches is Test Driven Development (TDD). This procedure is based on test cases which are incrementally written prior to the implementation. Recently, Behavior Driven Development (BDD) has been introduced as an extension of TDD, in which natural language scenarios are the starting point for the test cases. This description offers a ubiquitous communication mean for both the software developers and stakeholders. Following the BDD methodology thoroughly, one would expect 100 % code coverage, since code is only written to make the test cases pass. However, as we show in an empirical study this expectation is not valid in practice. It becomes even worse in the process of development, i.e. the coverage decreases over time. To close the coverage gap, we sketch an algorithm that generates BDD-style scenarios based on uncovered code.		M. Diepenbeck; M. Soeken; D. Grobe; R. Drechsler	2013 8th International Workshop on Automation of Software Test (AST)					Excluded	Excluded	new_screen			2						
167	Behave	Using gherkin to extract tests and monitors for safer medical device interaction design	Number entry systems on medical devices are safety critical and it is important to get them right. Interaction design teams can be multidisciplinary, and in this work we present a process where the requirements of the system are drawn up using a Controlled Natural Language (CNL) that is understandable by non-technical experts or clients. These CNL requirements can also be directly used by the Quality Assurance (QA) team to test the system and monitor whether or not the system runs as it should once deployed. Since commonly, systems are too complex to test all possible execution paths before deployment, monitoring the system at runtime is useful in order to check that the system is running correctly. If at runtime, it is discovered that an anomaly is detected, the relevant personnel is notified through a report in natural language.	medical devices; runtime verification; testing; user interfaces	Abigail Cauchi; Christian Colombo; Adrian Francalanza; Mark Micallef; Gordon Pace	EICS '16: Proceedings of the 8th ACM SIGCHI Symposium on Engineering Interactive Computing Systems	https://doi.org/10.1145/2933242.2935868		275-280		Included	Included	new_screen			2	ACM		Using Gherkin to Extract Tests and Monitors for Safer Medical Device Interaction Design	https://dl.acm.org/doi/10.1145/2933242.2935868	Association for Computing Machinery	nan; References; Year; Bibtex
168	Behave	A Behavior-Driven Approach to Intent Specification for Software-Defined Infrastructure Management	"One of the goals of Software-Defined Networking (SDN) is to allow users to specify high-level policies into lower level network rules. Managing a network and decide what policy set is appropriate requires, however, expertise and low level know-how. An emerging SDN paradigm is to allow higher-level network level decisions wishes in the form of ""intents"". Despite its importance in simplifying network management, intent specification is not yet standardized. In this work, we propose a northbound interface (NBI) for intent declaration, based on Behavior-Driven Development. In our approach, intents are specified in plain English and translated by our system into pre-compiled network policies, that are in turn, converted into low-level rules by the software-defined infrastructure e.g. an SDN controller. We demonstrated our behavior-driven approach with two practical use cases: service function chaining deployed on OpenStack, supported by both ONOS and Ryu controllers, and dynamic firewall programming. We also measured the overhead and response time of our NBI. We believe that our approach is far more general and paves the way for a more expressive and simplified northbound interface for intent-driven networking."	Programming; Network function virtualization; Software; Software defined networking; Business; Conferences; Computer languages; Infrastructure; Practical Use; Dynamic Programming; Network Management; Plain English; Practical Use Cases; Rest Of The Paper; Rational Design; Functional Networks; Natural Language; Programming Language; International Network; Application Programming Interface; Traffic Flow; Business Management; Blacklist; Regular Expressions; OpenFlow; Network Congestion; Agile Development; Virtual Network Functions; Technical Leadership; Service Chain; Formal Verification; Set Of Purposes; Whitelist; Workflow; Bitrate; Service Behavior; Virtually	Flavio Esposito; Jiayi Wang; Chiara Contoli; Gianluca Davoli; Walter Cerroni; Franco Callegati	2018 IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN)	https://doi.org/10.1109/NFV-SDN.2018.8725754	"1.""Network Functions Virtualisation (NFV); Architectural Framework"", European Telecommunications Standards Institute Standard ETSI GS NFV 002, 2014. Google Scholar; 2.D. Kreutz, F. M. V. Ramos, P. E. Verissimo, C. E. Rothenberg, S. Azodolmolky and S. Uhlig, ""Software-Defined Networking: A comprehensive survey"", Proceedings of the IEEE, vol. 103, no. 1, pp. 14-76, Jan. 2015. View Article  Google Scholar; 3.A. Khurshid, X. Zou, W. Zhou, M. Caesar and P. B. Godfrey, ""VeriFlow: Verifying network-wide invariants in real time"", Proc. of 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI), pp. 15-27, 2013. CrossRef  Google Scholar; 4.P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown and S. Whyte, ""Real time network policy checking using header space analysis"", Proc. of 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI), pp. 99-112, 2013. Google Scholar; 5.S. Ghorbani and B. Godfrey, ""Towards correct network virtualization"", ACM SIGCOMM Comput. Commun. Rev., vol. 44, no. 4, pp. 109-114, Aug. 2014. CrossRef  Google Scholar; 6.G. N. Nde and R. Khondoker, ""SDN testing and debugging tools: A survey"", Proc. of 5th International Conference on Informatics Electronics and Vision (ICIEV), pp. 631-635, 2016. View Article  Google Scholar; 7.B. Heller et al., ""Leveraging SDN layering to systematically troubleshoot networks"", Proc. of 2nd ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking (HotSDN), pp. 37-42, 2013. CrossRef  Google Scholar; 8.R. Beckett, X. K. Zou, S. Zhang, S. Malik, J. Rexford and D. Walker, ""An assertion language for debugging SDN applications"", Proc. of 3rd ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking (HotSDN), pp. 91-96, 2014. CrossRef  Google Scholar; 9.N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, et al., ""OpenFlow: Enabling innovation in campus networks"", ACM SIGCOMM Comput. Commun. Rev., vol. 38, no. 2, pp. 69-74, Mar. 2008. CrossRef  Google Scholar; 10.""Intent NBI - Definition and Principles"" in Tech. Rep. TR-523, Open Networking Foundation (ONF), October 2016. Google Scholar; 11.Y. Yuan, D. Lin, R. Alur and B. T. Loo, ""Scenario-based programming for SDN policies"", Proc. of 11th ACM Conference on Emerging Networking Experiments and Technologies (CoNEXT), pp. 34:1-34:13, 2015. CrossRef  Google Scholar; 12.B.L. Loo et al., ""Declarative networking"", Commun. ACM, vol. 52, no. 11, pp. 87-95, Nov. 2009. CrossRef  Google Scholar; 13.R. Soule et al., ""Merlin: A language for provisioning network resources"", Proc. of 10th ACM Conference on Emerging Networking Experiments and Technologies (CoNEXT), pp. 213-226, 2014. CrossRef  Google Scholar; 14.N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, et al., ""Frenetic: A network programming language"", Proc. of 16th ACM SIGPLAN International Conference on Functional Programming, pp. 279-291, 2011. CrossRef  Google Scholar; 15.C. Monsanto, J. Reich, N. Foster, J. Rexford and D. Walker, ""Composing software defined networks"", Proc. of 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI), pp. 1-13, 2013. Google Scholar; 16.T. Nelson, A. D. Ferguson, M. J. G. Scheer and S. Krishnamurthi, ""Tierless programming and reasoning for software-defined networks"", Proc. of 11th USENIX Conference on Networked Systems Design and Implementation (NSDI), pp. 519-531, 2014. Google Scholar; 17.A. Alsudais and E. Keller, ""Hey network can you understand me?"", Proc. of 2017 IEEE Conference on Computer Communications Workshops (INFOCOM), pp. 193-198, 2017. View Article  Google Scholar; 18.R. Birkner, D. Drachsler-Cohen, L. Vanbever and M. Vechev, ""Net2Text: Query-guided summarization of network forwarding behaviors"", Proc. of 15th USENIX Symposium on Networked Systems Design and Implementation (NSDI), pp. 609-623, 2018. Google Scholar; 19.D. North, ""Behavior-driven development"", 2003,  [online]  Available: https://dannorth.net/introducing-bdd. Google Scholar; 20.K. Beck, Test Driven Development: By Example, Boston, MA, USA:Addison-Wesley Longman Publishing Co., Inc., 2002. Google Scholar; 21.N. Feamster, J. Rexford and E. Zegura, ""The road to SDN: An intellectual history of programmable networks"", ACM SIGCOMM Comput. Commun. Rev., vol. 44, no. 2, pp. 87-98, Apr. 2014. CrossRef  Google Scholar; 22.Z. Wang, X. Li and J. Zhou, ""Small-footprint keyword spotting using deep neural network and connectionist temporal classifier"", CoRR, vol. abs/1709.03665, 2017,  [online]  Available: http://arxiv.org/abs/1709.03665. Google Scholar; 23.F. Callegati, W. Cerroni, C. Contoli and F. Foresta, ""Performance of intent-based virtualized network infrastructure management"", Proc. of 2017 IEEE International Conference on Communications (ICC), pp. 1-6, 2017. View Article  Google Scholar"			Included	Included	new_screen			2	IEEE		A Behavior-Driven Approach to Intent Specification for Software-Defined Infrastructure Management	https://ieeexplore.ieee.org/document/8725754	IEEE	nan; Pages; Year; Bibtex
169	Behave	Feature-Trace:Generating Operational Profile and Supporting Testing Prioritization from BDD Features	Operational Profiles provide quantitative information about how the software will be used, which supports highlighting those software components more sensitive to reliability based on their profile usage. However, the generation of Operational Profiles usually requires a considerable team effort to liaise requirements specification until their reification into expected software artifacts. In this sense, it becomes paramount in the software life cycle the ability to seamlessly or efficiently perform traceability from requirement to code, embracing the testing process as a means to ensure that the requirements are satisfiably covered and addressed. In this work, we propose the Feature-Trace approach which merges the advantages of the Operational Profile and the benefits of the requirements-to-code traceability present in the BDD (Behavior-Driven Development) approach. The primary goal of our work is to use the BDD approach as an information source for the semi-automated generation of the Operational Profile. The proposed approach was evaluated on the Diaspora software, on a GitHub open source software. The case study revealed that the Feature-Trace approach is capable of extracting the operational profile seamlessly from the specified Diaspora's BDD features as well as obtaining and presenting vital information to guide the process of test cases prioritization.	behavior-driven development; operational profile; requirements traceability; testing	Rafael Fazzolino; Genaina Nunes Rodrigues	SBES '19: Proceedings of the XXXIII Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3350768.3350781		332-336		Included	Included	new_screen			2	ACM		Feature-Trace: Generating Operational Profile and Supporting Testing Prioritization from BDD Features	https://dl.acm.org/doi/10.1145/3350768.3350781	Association for Computing Machinery	nan; References; Year; Bibtex
170	Behave	Cucumber Cookbook	"Over 35 hands-on recipes to efficiently master the art of behaviour-driven development using Cucumber-JVM About This BookCreate a test automation framework to handle web, REST, and native mobile application automationDiscover Glue code, Hooks, Tags, and Cucumber's integration with Maven, Jenkins, and GitComprehensive recipes in Cucumber for behaviour-driven development and test automationWho This Book Is ForThis book is intended for business and development personnel who want to use Cucumber for behavior-driven development and test automation. Readers with some familiarity with Cucumber will find this book of most benefit.Since the main objective of this book is to create test automation frameworks, previous experience in automation will be helpful.What You Will Learn Explore the usage of the Gherkin Language to write meaningful and smart Feature files Understand Scenario, Steps, Backgrounds, Scenario Outlines, and Data Tables Discover the concepts of Glue Code and Step Definitions in detail Gain insights into the different types of Step Definitions, Regular Expressions, Doc Strings, Data Table transformations, and Capture Groups Master the advanced concepts of implementing Tags and Hooks Override default Cucumber options and settings along with different output report formats Run Jenkins and Cucumber from Terminal while running various Cucumber Scenarios in parallel In DetailToday, behaviour-driven development (BDD) is gaining popularity around the world. Cucumber-JVM is one of the fastest growing tools and offers a cutting-edge platform for conceptualizing and implementing BDD. The variety of features available within Cucumber enhances the experience of implementing BDD for both business and development teams.This book provides you with the skills you need to successfully create, customize, and configure the Cucumber framework. You will discover how to create Feature files, and Step Definitions, and enable various configurations, such as ""Before"" and ""After"" functions, with fun exercises. You'll round off your learning by creating automation frameworks to automate Web, REST, and Mobile apps."		Garg, Shankar						Excluded	Excluded	new_screen			2						
171	Behave	A semantic wiki approach to enable behaviour driven requirements management	Poorly managed requirements are considered as one of the principal causes of projects failure and consequently companies struggle to find an effective solution for requirements elicitation and further management. The adoption of such solution becomes even more difficult when the collaboration between different departments (e.g. marketing and development) is necessary. To address this challenge, the authors propose a methodology for requirements management based on Semantic Wiki and Behaviour Driven Development (BDD). BDD allows developers and end-users to interoperate and encourages seamless collaboration between all project participants. It also certifies that requirements are treated properly by their associated developments through the connection of textual descriptions to functional tests. Semantic wikis can be an added value in requirements management due to their enhanced browser interface and collaborative knowledge sharing capability. They allow stakeholders to participate in requirements management independently of their location. This is of major importance to reduce the problem of lack of inputs from interested parties. Moreover, with semantic wikis adoption, end-users and ontologies can coexist in one system since wiki pages are presented in a human-readable format in parallel to their formal representation in ontologies. This knowledge representation supports companies' decision-making by allowing managers to prioritize implementations, to keep a trace of requirements evolution, and reuse implementations when new requirements enter the system.		Marques-Lucena C., Agostinho C., Sarraipa J., Jardim-Goncalves R.	Control Engineering and Applied Informatics					Included	Included	new_screen			2						
172	Behave	C	Power utilization assumes a massive part in any of the integrated circuits, and it’s rundown as a standout amongst essential difficulties in the universal innovation guide into semiconductors. Generally in integrated circuit, flip-flop and clock distribution system consume a lot of energy since they make and utilize the most extreme number of internal transitions. In the clock distribution system, the clock signal circulates from a typical point to every one of the components that required for the circuit. However this capacity is more important to the synchronous framework, much consideration needs to provide for the attributes of these clock signals. In the sequential circuits, a clock distribution system spends a lot of power given the high operating frequency of high capacitance. An existing approach to reducing the limits of a clock signal is based on the quantity of clocked transistors. In this, an advanced procedure is proposed and evaluated by utilizing Dual-Edge Triggered Flip-Flop (DETFF) depends on the Dynamic Signal Driving (DSD) strategy. This DETFF is executed in sequential circuits that have been ordered using Tanner Electronic Design Automation (EDA) tool which is used to simulate and examine control by using Dynamic Signal Driving (DSD) strategy. The outcomes demonstrate that the total power utilization is decreased in sequential benchmark circuit design. A number of Flip flops have been designed by various technologies such as reducing area, delay, and power, but this proposed dynamic signal driving scheme can be used for any integrated circuit- that can be reduced to all these three parameters to give the best trade-off for a particular ASIC platform.	Flip flop, Clock distribution system, Clocked transistor, Tanner, ASIC	Prithivi Raj, M.; Kavithaa, G.	Microprocessors and Microsystems	https://doi.org/doi:10.1007/978-3-540-29678-2_3				Excluded	Excluded	new_screen			2	Pub Med Central		Dynamic signal driving strategy based high speed and low powered dual edge triggered flip flop design used memory applications	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7163932/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
173	Behave	Pro Agile .NET Development with SCRUM	Pro Agile .NET Development with SCRUMguides youthrough a real-world ASP.NET project and shows how agile methodology is put into practice. There is plenty of literature on the theory behind agile methodologies, but no book on the market takes the concepts of agile practices and applies these in a practical manner to an end-to-end ASP.NET project, especially the estimating, requirements and management aspects of a project. Pro Agile .NET Development with SCRUM takes you through the initial stages of a project–gathering requirementsand setting up an environment–through to the development and deployment stages using an agile iterative approach: namely, Scrum. In the book,you'll focuson delivering an enterprise-level ASP.NET project. Each chapter is in iterations or sprints, putting into practice the features of agile–user stories, test-driven development (TDD), behavior-driven development (BDD), continuous integration, user acceptance testing, extreme programming, Scrum, design patterns and principles, inside-out development, lean developent, KanBan boards, and more. An appendix features code katas designed for the reader to get up-to-speed with some of the features of extreme programming, while also showcasing popular open-source frameworks to assist in automated testing and mocking. What you'll learn Gain practical knowledge on employing the Scrum project methodology using a real-world ASP.NET project Seehow extreme programming features in real world .NET projects Learnbest-practice tools foruser interfaceanduser acceptance testing, such as waitiN Discoverdetails on how to capture requirements and drive development using user stories Learnhow to estimate and plan agile projects and work with business stakeholders through a practical example Uncover tips for developing using the outside-in, TDD and BDD methodologies Gain information on tracking the progress of a project through burn down charts, iterations and retrospectives Who this book is for Experienced .NET developers who are looking to see how the Scrum agile project methodology and extreme programming features are employed in a real-world .NET application.		Blankenship, Jerrel; Bussa, Matthew; Millett, Scott						Excluded	Excluded	new_screen			2						
174	Behave	Behavior-driven development in product configuration systems	Product Configuration Systems (PCS) are increasingly used by companies to automate the performance of the sales and engineering processes. Since the benefits from such projects have huge variations, it is crucial to make the right decisions when scoping and developing PCSs. The development of PCS is influenced by both business interests and technical insights. Developers of PCS face various challenges while working in team, including different stakeholders such as business owners, developers, project managers, and product experts. The more diverse the team is, the more significant are the challenges. This paper suggests that Behavior-driven Development (BDD) may provide configuration teams with a specific structure to express scenarios (and thus constraints) on PCS in natural language. BDD may yield benefits such as a better expression of PCS constraints, more efficient communication of requirements and incorporation of the expressed rules in a software transformation process. In other words, applying BDD may eliminate unnecessary tasks when gathering knowledge, developing, and testing PCS projects. In this paper, we present a novel approach from an ongoing project on how to relate BDD to the development process of PCS while using Scrum-based methods. © 2018 CEUR-WS. All rights reserved.		Shafiee S., Hvam L., Haug A., Wautelet Y.	CEUR Workshop Proceedings					Included	Included	new_screen			2						
175	Behave	Light-weight software product lines for small and medium-sized enterprises (SMEs)	Product line engineering practices promote the idea of systematic reuse of core assets and have been reported to decrease time-to-market and development costs for new products. However, our recent efforts to transfer our product line engineering knowledge to several of our small and medium-size enterprise industrial partner showed that there are challenges that need to be addressed before core product line engineering ideas can be deployed in SME context. These challenges include upfront investment costs, business traceability, levels of abstraction of functional features and semantic distinction between functional and non-functional software aspects. In order to address these challenges within the context of SMEs, we adopt and extend the behavior-driven development methodology in a way to not only offer agility in practice but also to equip software developers with the means to capture and manage software variability within the behavior-driven development process. We introduce the details of the extended methodology and discuss its advantages and disadvantages in detail.		Ebrahim Bagheri; Faezeh Ensan	CASCON '13: Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research	https://doi.org/10.5555/2555523.2555556		311-324		Included	Included	new_screen			2	ACM		Light-Weight Software Product Lines for Small and Medium-Sized Enterprises (SMEs)	https://dl.acm.org/doi/10.5555/2555523.2555556	IBM Corp.	nan; Keywords; References; Year; Bibtex
176	Behave	Chapter 8 - Integrating Automation into Your Development Process	Publisher Summary The concept of continuous integration has been around for quite a while now. There are many tools to provide continuous integration and surprisingly, some even work together. Any investment in continuous integration will pay off but it requires discipline that few developers, QA resources, or management actually have at the start of the process. The challenge is to train the development staff and the QA to use continuous integration to work smarter, not harder. There is much interest in continuous integration, and many organizations are implementing continuous integration tools as part of their move to agile development. Difficulty surrounds this move because not only do developers have to change some working habits, but also there typically is a large investment required matching the capabilities of the tool to the organization itself and for that reason alone it is daunting. Many tools, whether they are open source or commercial products, exist for performing automation. The platform in use for development, including the operating system or the development environment platform, as well as the delivery platform of the end product, may restrict the selection of tools. Additionally, the software development language in use may dictate a narrow selection of tools. Some development shops may have restrictions regarding what software can be brought in due to security concerns.		Holtsnider, Bill; Wheeler, Tom; Stragand, George; Gee, Joseph						Excluded	Excluded	new_screen			2						
177	Behave	Chapter 4.1 - The Psychology of Programming in the Large: Team and Organizational Behaviour	Publisher Summary This chapter focuses on the psychology of programming in relation to team and organizational behavior. Software development must be studied at several behavioural levels. Organizing programmers into teams superimposes a layer of social behavior on the cognitive requirements of programming tasks. Two structures have been proposed for programming teams based on the centralized versus decentralized team organizations often studied in group dynamics research. A hybrid approach to structuring programming teams might be taken on large projects that have characteristics favourable to different types of programming teams. Programming team activities offer many opportunities for peer review activities that may be formal or informal components of the development process. On the other hand, team methodologies must focus on coordinating the tasks and product concept. The structure of programming teams should reflect the nature of the task rather than the organization, allow members to speak as if with one mind, and determine the tasks the team can effectively handle.		Curtis, Bill; Walz, Diane						Excluded	Excluded	new_screen			2						
178	Behave	Intuitive design: framing a software test system as a status reporting tool for business	Purpose: This paper aims to present a conceptual framework of how software teams can leverage the implicit information of implemented acceptance tests to cater to the needs of decision makers. The research questions on this framework were how business stakeholders can receive project status information in an intuitive way and how this framework can guarantee the traceability of tests to requirements. Design/methodology/approach: The conceptual framework delineates the design of an acceptance test framework in three aspects: how the requirements model reflects the evolving states of requirement maturity over a project, how the acceptance test model becomes synchronized with the requirements model without a traceability matrix and how the acceptance test model communicates business value to the decision makers. Findings: In an industrial case study, the presented framework yielded the positive effects of intuitive understanding by business stakeholders, high test coverage of requirements and distinctly reduced manual quality assurance (QA) work by automated testing for browsers and mobile devices. Practical implications: The presented framework can help to convince business stakeholders to approve the budget for building a testing framework because it delivers them value as a status reporting tool. Originality/value: This paper is the first to describe a step-by-step approach to solving a critical problem that IT departments frequently face. The solution consists in a new way of transforming the perception of a technical framework into a reporting tool for business information by intuitive design. The idea of mapping hierarchically corresponding abstraction layers can be transferred to other engineering domains. © 2017, © Emerald Publishing Limited.		So C.	Journal of Engineering, Design and Technology					Included	Included	new_screen			2						
179	Behave	IOS Code Testing: Test-Driven Development and Behavior-Driven Development with Swift	Put into motion practical examples to master Test-Driven Development (TDD) and acceptance testing in Swift. This book uses a pragmatic approach to writing well-tested code and provides techniques that can be used to retrofit tests to legacy code bases. You'll be introduced to basic principles of TDD, such as Test First, Red-Green-Refactor, Remove Duplicate code, Dependency Injection, and Single Responsibility. Approaches covered include TDD, behavior-driven development (BDD), UI, and acceptance testing with common standard/open source frameworks. iOS Code Testing offers helpful instruction to teach iOS developers to retrospectively fit tests to legacy code, refactor legacy code so as to make the code more testable, install and configure a popular Swift BDD framework, practice BDD with Xcode, and create automated UI tests with Xcode. Additionally, many projects have legacy code bases. Legacy code is often seen as a blocker when it comes to implementing any kind of testing. What You Will Learn Fit test to legacy code retrospectively Install and configure popular Swift BDD frameworks Practice BDD with Xcode Who This Book Is For Software practitioners, such as Swift developers and mobile app testers.		Mishra, Abhishek						Excluded	Excluded	new_screen			2						
180	Behave	Modern and Responsive Mobile-enabled Web Applications	Rapid web technology improvements in the last few years have powered software developers to quickly write responsive mobile-friendly applications. The innovative web frameworks and libraries make it easy to have same software code base for desktop and mobile devices. Single-page applications offer a more-native-app-like experience to the user. This also means a web application can easily be converted to a native mobile application if desired. This allows software products to be evolved continuously at a much faster pace with features added on daily basis. The software companies who can adopt these technologies will most likely see the benefit in the long run as they can offer new and modified products faster than their competitors. In this paper, we review some of the state-of-the-art web technologies, third-party libraries, and frameworks for quick interactive web development. Finally, we present a simple interactive browser-based, mobile friendly web application which was developed using one of the latest web development framework.	Web-based Applications, JavaScript, Web Framework, Mobile-friendly Application, Single-Page Applications	Shahzad, Farrukh	Procedia Computer Science					Excluded	Excluded	new_screen			2						
181	Behave	Reengineering legacy systems with transaction model	Reengineering of legacy systems is one of trickiest challenges in software development. The paper addresses methodologies applicable to re-engineering legacy information systems. Specifically, it points out a possibility to couple ontological descriptions of the enterprise with information systems features. Such interconnection verifies whether a functionality implemented in the information system relates to business tasks or not. Business processes formulated as DEMO transaction patterns together with Behavior-Driven Development technique enable to link existing businesses processes to production codebase. © 2018 Author(s).		Matula J., Zacek J.	AIP Conference Proceedings					Included	Included	new_screen			2						
182	Behave	A Requirement-based Regression Test Selection Technique in Behavior-Driven Development	Regression testing is an essential software maintenance activity before the release of a new version implementing a bug fix or a new feature. A regression test selection (RTS) technique chooses a subset of existing test cases to ensure that the system will not be adversely affected by the latest modifications. With the rise of DevOps, behavior-driven development (BDD) is growing in popularity as it is in close alignment with agile practices, for example, continuous integration. Hence, it is necessary to propose a novel and effective RTS technique for BDD specifically to accelerate the development process while ensuring software quality. Since most existing techniques for RTS are code-based and thus subject to some limitations, we present a requirement-based technique which uses the requirements in BDD to select test cases in both high-level (acceptance testing) and low-level (unit testing). Our technique firstly illustrates the new requirement with a scenario, and subsequently computes the semantic similarity of the new scenario and all existing scenarios with the vector space model. According to the results, the modification-traversing regression test cases can be selected in a semi-automated way. We also conduct an experimental study to evaluate our technique in terms of inclusiveness, precision, efficiency and generality. The study shows that our technique is applicable for BDD and effective in practice.	Software maintenance; Codes; Computational modeling; Conferences; Semantics; Computer bugs; Software quality; Regression Test; Regression Test Selection; Behavior Driven Development; Semantic; Acceptable Test; Continuous Integration; Unit Tests; Vector Space Model; Natural Language; System Software; Software Development; Acceptance Criteria; Similar Scenario; Test Suite; Coding Structure; Component Of The Project; Software Projects; Code Modifications; regression test selection; behavior-driven development; requirement-based technique; vector space model	Jincheng Xu; Qingfeng Du; Xiaojun Li	2021 IEEE 45th Annual Computers, Software, and Applications Conference (COMPSAC)	https://doi.org/10.1109/COMPSAC51774.2021.00182	"1.O. Legunsen, F. Hariri, A. Shi, Y. Lu, L. Zhang and D. Marinov, ""An extensive study of static regression test selection in modern software evolution"", Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering FSE 2016, pp. 583-594, November 13-18, 2016,  [online]  Available: https://doi.org/10.1145/2950290.2950361. CrossRef  Google Scholar; 2.G. Rothermel and M. J. Harrold, ""Analyzing regression test selection techniques"", Software Engineering IEEE Transactions on, vol. 22, no. 8, pp. 529-551, 1996. View Article  Google Scholar; 3.L. Zhang, ""Hybrid regression test selection"", Proceedings of the 40th International Conference on Software Engineering ICSE 2018, pp. 199-209, May 27 - June 03, 2018,  [online]  Available: https://doi.org/10.1145/3180155.3180198. View Article  Google Scholar; 4.T. Yu and T. Wang, ""A study of regression test selection in continuous integration environments"", 29th IEEE International Symposium on Software Reliability Engineering ISSRE 2018, pp. 135-143, October 15-18, 2018,  [online]  Available: https://doi.org/10.1109/ISSRE.2018.00024. View Article  Google Scholar; 5.L. Bass, I. Weber and L. Zhu, DevOps: A Software Architect's Perspective., Addison-Wesley Professional, 2015. Google Scholar; 6.S. G. Elbaum, G. Rothermel and J. Penix, ""Techniques for improving regression testing in continuous integration development environments"", pp. 235-245, 2014. CrossRef  Google Scholar; 7.D. North, ""Introducing behaviour driven development"",  [online]  Available: http://dannorth.net/introducing-bdd/. Google Scholar; 8.J. Smart, ""Bdd in action"", 2014. Google Scholar; 9.Y. Chen, R. L. Probert and D. P. Sims, ""Specification-based regression test selection with risk analysis"", Conference of the Centre for Advanced Studies on Collaborative Research, pp. 1, 2002. Google Scholar; 10.A. Mahmoud and N. Niu, ""On the role of semantics in automated requirements tracing"", Requirements Engineering, vol. 20, no. 3, pp. 281-300, 2015. CrossRef  Google Scholar; 11.R. K. Saha, L. Zhang, S. Khurshid and D. E. Perry, ""An information retrieval approach for regression test prioritization based on program changes"", IEEE/ACM IEEE International Conference on Software Engineering, 2015. View Article  Google Scholar; 12.K. Wang, C. Zhu, A. Celik, J. Kim, D. S. Batory and M. Gligoric, ""Towards refactoring-aware regression test selection"", Proceedings of the 40th International Conference on Software Engineering ICSE 2018, pp. 233-244, May 27 - June 03, 2018,  [online]  Available: https://doi.org/10.1145/3180155.3180254. View Article  Google Scholar; 13.S. Romano, G. Scanniello, G. Antoniol and A. Marchetto, ""Spiritus: a simple information retrieval regression test selection approach"", Inf. Softw. Technol., vol. 99, pp. 62-80, 2018,  [online]  Available: https://doi.org/10.1016/j.infsof.2018.03.004. CrossRef  Google Scholar; 14.P. K. Chittimalli and M. J. Harrold, ""Regression test selection on system requirements"", Proceeding of the India Software Engineering Conference Isec 2008, pp. 87-96, February, 2008. CrossRef  Google Scholar; 15.T. Nakagawa, K. Munakata and K. Yamamoto, ""Applying modified code entity-based regression test selection for manual end-to-end testing of commercial web applications"", IEEE International Symposium on Software Reliability Engineering Workshops ISSRE Workshops 2019, pp. 1-6, October 27-30, 2019,  [online]  Available: https://doi.org/10.1109/ISSREW.2019.00033. View Article  Google Scholar; 16.Z. Long, Z. Ao, G. Wu, W. Chen and J. Wei, ""Webrts: A dynamic regression test selection tool for java web applications"", IEEE International Conference on Software Maintenance and Evolution ICSME 2020, pp. 822-825, September 28 -October 2, 2020,  [online]  Available: https://doi.org/10.1109/ICSME46990.2020.00102. View Article  Google Scholar; 17.M. Vasic, Z. Parvez, A. Milicevic and M. Gligoric, ""File-level vs. module-level regression test selection for .net"", Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering ESEC/FSE 2017, pp. 848-853, September 4-8, 2017,  [online]  Available: https://doi.org/10.1145/3106237.3117763. CrossRef  Google Scholar; 18.M. Soeken, R. Wille and R. Drechsler, ""Assisted behavior driven development using natural language processing"", International Conference on Objects Models Components Patterns, pp. 269-287, 2012. CrossRef  Google Scholar; 19.E. Hill, D. Binkley, D. Lawrie, L. Pollock and K. Vijay-Shanker, ""An empirical study of identifier splitting techniques"", Empirical Software Engineering, vol. 19, no. 6, pp. 1754-1780, 2014. CrossRef  Google Scholar"			Included	Included	new_screen			2	IEEE		A Requirement-based Regression Test Selection Technique in Behavior-Driven Development	https://ieeexplore.ieee.org/document/9529903	IEEE	nan; Pages; Year; Bibtex
183	Behave	Interface Responsibility Patterns:Processing Resources and Operation Responsibilities	Remote Application Programming Interfaces (APIs), as for instance offered in microservices architectures, are used in almost any distributed system today and are thus enablers for many digitalization efforts. It is hard to design such APIs so that they are easy and effective to use; maintaining their runtime qualities while preserving backward compatibility is equally challenging. Finding well suited granularities in terms of the architectural capabilities of endpoints and the read-write semantics of their operations are particularly important design concerns. Existing pattern languages have dealt with local APIs in object-oriented programming, with remote objects, with queue-based messaging and with service-oriented computing platforms. However, patterns or equivalent guidances for the architectural design of API endpoints, operations and their request and response message structures are still missing. In this paper, we extend our microservice API pattern language (MAP) and introduce endpoint role and operation responsibility patterns, namely Processing Resource, Computation Function, State Creation Operation, Retrieval Operation, and State Transition Operation. Known uses and examples of the patterns are drawn from public Web APIs, as well as application development and system integration projects the authors have been involved in.		Olaf Zimmermann; Daniel Lubke; Uwe Zdun; Cesare Pautasso; Mirko Stocker	EuroPLoP '20: Proceedings of the European Conference on Pattern Languages of Programs 2020	https://doi.org/10.1145/3424771.3424822		1-24		Excluded	Excluded	new_screen			2	ACM		Interface Responsibility Patterns: Processing Resources and Operation Responsibilities	https://dl.acm.org/doi/10.1145/3424771.3424822	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
184	Behave	A Conceptual Metamodel to Bridging Requirement Patterns to Test Patterns	Requirement patterns represent an abstraction of an application's behaviors and services that, in turn, may be replicated in similar applications. However, there has been a lack of efforts exploiting the benefits of requirement patterns in other phases of the software development life cycle, besides the requirements engineering itself. To address this gap, we propose the Software Pattern MetaModel (SoPaMM) that bridges requirement patterns to groups of scenarios with similar behaviors in the form of test patterns. SoPaMM allows the description of the behavior of a requirement pattern through a time executable and easy-to-use language aiming at the automatic generation of test patterns. Using SoPaMM, we model and implement a behavior-driven functional requirement pattern for a web-based user authentication application. Our preliminary results point out that a requirement pattern can be an executable specification capable of generating automated tests.	behavior; metamodeling; requirement pattern; reuse; test pattern	Taciana Novo Kudo; Renato F. Bulcao-Neto; Auri M. R. Vincenzi	SBES '19: Proceedings of the XXXIII Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3350768.3351300		155-160		Included	Included	new_screen			2	ACM		A Conceptual Metamodel to Bridging Requirement Patterns to Test Patterns	https://dl.acm.org/doi/10.1145/3350768.3351300	Association for Computing Machinery	nan; References; Year; Bibtex
185	Behave	A Framework to Diminish the Gap between the Business Specialist and the Software Designer	"Requirements Engineering establishes the process for defining requirements as one in which elicitation, modeling and analysis are tasks which must be carried out. This process should involve different stakeholders and their different viewpoints. Among these stakeholders, there is the software designer, responsible for creating models based on the information gathered by business specialists. However, this communication channel may create some ""noise"" that leads to information being lost. This loss produces a semantic gap between what is desired and what will be developed. The semantic gap is characterized by inconsistencies in the requirements represented by scenarios -- user stories in a behavior-driven context -- and by the conceptual model. This paper presents an interactive approach to the agile requirements modeling, thus fostering greater consistency between the artifacts of the scenarios and the conceptual model. This consistency is ensured by using a mind model specification which will serve as a basis for transforming the definitions of the scenario and generating a conceptual model represented by a UML class diagram. The mind model represents the main role of this approach, and functions as a bond that represents the business entities, thus enabling the requirements to be more consistent with the reality of the business."	Design Software; Conceptual Model; Unified Modeling Language; Semantic Gap; Role Of Approach; Class Diagram; Vocabulary; Software Development; Common Language; Object Classification; Cognitive Map; Model Domain; Domain Experts; Description Of Behavior; Problem Framing; Domain Elements; Mind Map; Domain-specific Languages; JavaScript; Agile Modeling Requirements; Behaviour Driven Development; UML; Mind Map Modeling; Domain Model	Fernando Wanderley; Denis Silva da Silveria	2012 Eighth International Conference on the Quality of Information and Communications Technology	https://doi.org/10.1109/QUATIC.2012.9	"1.Available at: http://blog.standishgroup.com/ [Accessed November 20, 2011].; 2.F. P. Brooks, ""No Silver Bullet- Essence and Accidents of Software Engineering"" Computer Magazine; April - 1987 - University or North Carolina at Chapel Hill. View Article  Google Scholar; 3.Pressman, R.S., Software Engineering, McGraw-Hill, 6 edicao, 2006. Google Scholar; 4.Sommerville, I., Software Engineering, 8 Edicao. Pearson - Addison Wesley, 2007. Google Scholar; 5.D. North, Introducing BDD, 2006. Available at: http://dannorth.net/ introducing-bdd [Accessed December 13, 2010]. Google Scholar; 6.Beck, K. Test-Driven Development by Example, Addison Wesley, 2003 Google Scholar; 7.D. Janzen, D.H. Saiedian, Test-driven development: concepts, taxonomy and future directions, Computer, vol.38, no. 9, pp. 43-50, Sept, 2005 View Article  Google Scholar; 8.L Koskela.Test Driven: TDD and Acceptance TDD for Java Developers, Manning Publications, 2007. Google Scholar; 9.A.Gupta and P. Jalote. An Experimental Evaluation of the Effectiveness and Efficiency of the Test Driven Development. In Proc. of Empirical Software Engineering and Measurement, 2007, pp.285-294 View Article  Google Scholar; 10.D. Janzen and H. Saiedian. Does Test-Driven Development Really Improve Software Design Quality? IEEE Software. vol. 25, no. 2, 2008. View Article  Google Scholar; 11.D. Chelimsky, D. Astels, Z. Dennis, A. Hellesoy, D. North. The RSpec book: Behaviour Driven Development with RSpec, cucumber and friends, Pragmatic Bookshelf, 2010. Google Scholar; 12.D. Astels, A new look at test driven development, http://techblog. daveastels.com/files/BDD-Intro.pdf Google Scholar; 13.JBehave, http://jbehave.org/ [Accessed March 2012]; 14.Cucumber, http://cukes.info/ [Accessed March 2012]; 15.RSpec, http://rspec.info/ [Accessed March 2012]; 16.R. Carvalho, R. Soares Manhaes, and F.L. de Carvalho, Filling the Gap between Business Process Modeling and Behaviour Driven Development, CoRR, 2008. Google Scholar; 17.R. Carvalho, F.L. de Carvalho, and R. Soares, Mapping Business Process Modeling constructs to Behavior Driven Development Ubiquitous Language, CoRR, 2010. Google Scholar; 18.E. Evans. Domain -Driven Design: Tackling Complexity in the Heart of Software. Addison-Wesley Professional, 2003 Google Scholar; 19.T. Buzan, ""The Mind Map Book"", 2003 BBC Active. Google Scholar; 20.R. G. Downs and D. Stea ""Image & Environment: Cognitive Mapping and Spatial Behavior"", 1973. Google Scholar; 21.R. M. Kitchin (1994). Maps Cognitive: Que sao eles e porque estudo eles? Jornal do psychology ambiental, 14: 1-19. Google Scholar; 22.S. Robertson, J. Robertson, ""Mastering the Requirements Process"", 1999 Addison-Wesley Google Scholar; 23.C. Larman, ""Agile and Iterative Development"", 2003 Prentice Hall Google Scholar; 24.S. W. Ambler ""Agile Modeling: Effective Practices for Extreme Programming and the Unified Process"", 2002. Google Scholar; 25.C. Douglas, ""Introduction JSON"", 2008 - json.org [Accessed December 2010] Google Scholar; 26.Jackson JSON Processor http://jackson.codehaus.org/ [Accessed March 2012] Google Scholar; 27.ATL Language Transformation http://www.eclipse.org/atl/ [Accessed April 2012] Google Scholar; 28.Mernik, M.; Heering, J.; Sloane, A. M. When and how to develop domain-specific languages. ACM Computing Surveys, New York: ACM, 2005, v. 37, n. 4, p.316-344 (Pubitemid 43898543) CrossRef  Google Scholar; 29.Czarnecki, K. Overview of Generative Software Development In: BANATRE, J.- P. et al. (Eds.). Unconventional Programming Paradigms. Berlin: Springer, 2005.p.326-341. CrossRef  Google Scholar; 30.Jackson, M. (2001). Problem Frames. Addison-Wesley. pp. 9,10. Google Scholar"			Included	Included	new_screen			2	IEEE		A Framework to Diminish the Gap between the Business Specialist and the Software Designer	https://ieeexplore.ieee.org/document/6511809	IEEE	nan; Pages; Year; Bibtex
186	Behave	Using Behaviour-driven Requirements Engineering for Establishing and Managing Agile Product Lines: An Observational Study	Requirements engineering in agile product line engineering refers to both common and variability components establishing a software. Although it is conventional for the requirements engineering to take place in a dedicated upfront domain analysis phase, agile-based environments denounce such a proactive behaviour. This paper provides an observational study examining a reactive incremental requirement engineering approach called behaviour-driven requirements engineering. The proposed approach uses behaviour-driven development to establish and maintain agile product lines. The findings of the study are very promising and suggest the following: the approach is easy to understand and quick to learn; the approach supports the constantly changing nature of software development; and using behaviour-driven requirements engineering produces reliable and coherent requirements. In practice, the observational study showed that using the proposed approach saved time for development team and customers, decreased costs, improved the software quality, and shortened the time-to-market. © 2021. All Rights Reserved.		Elshandidy H., Mazen S., Hassanein E., Nasr E.	International Journal of Advanced Computer Science and Applications					Included	Included	new_screen			2						
187	Behave	Towards automated testing of RPA implementations	Robotic Process Automation (RPA) is a technology that has grown tremendously in the last years, due to its usability in the area of process automation. An essential part of any software development process is quality assurance, so testing will be very important for RPA processes. However, the classical software techniques are not always suitable for the RPA software robots due to the mix of the graphical description of the robots and their implementations. In this short paper, we describe the state of the practice for testing of software robots and propose some ideas of test automation using model-based testing.	Model-based testing; RPA testing; Robotic Process Automation (RPA); Test automation	Marina Cernat; Adelina Nicoleta Staicu; Alin Stefanescu	A-TEST 2020: Proceedings of the 11th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation	https://doi.org/10.1145/3412452.3423573		21-24		Excluded	Excluded	new_screen			2	ACM		Towards Automated Testing of RPA Implementations	https://dl.acm.org/doi/10.1145/3412452.3423573	Association for Computing Machinery	nan; References; Year; Bibtex
188	Behave	Agent-oriented software patterns for rapid and affordable robot programming	Robotic systems are often quite complex to develop; they are huge, heavily constrained from the non-functional point of view and they implement challenging algorithms. The lack of integrated methods with reuse approaches leads robotic developers to reinvent the wheel each time a new project starts. This paper proposes to reuse the experience done when building robotic applications, by catching it into design patterns. These represent a general mean for (i) reusing proved solutions increasing the final quality, (ii) communicating the knowledge about a domain and (iii) reducing the development time and effort. Despite of this generality, the proposed repository of patterns is specific for multi-agent robotic systems. These patterns are documented by a set of design diagrams and the corresponding implementing code is obtained through a series of automatic transformations. Some patterns extracted from an existing and freely available repository are presented. The paper also discusses an experimental set-up based on the construction of a complete robotic application obtained by composing some highly reusable patterns.	Multi-agent systems, Design patterns, Pattern oriented design, Robotics systems	Chella, Antonio; Cossentino, Massimo; Gaglio, Salvatore; Sabatucci, Luca; Seidita, Valeria	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
189	Behave	Ruby on Rails Tutorial: Learn Web Development with Rails	Ruby on Rails Tutorial by Michael Hartl has become a must-read for developers learning how to build Rails apps. Peter Cooper, Editor of Ruby Inside Using Rails, developers can build web applications of exceptional elegance and power. Although its remarkable capabilities have made Ruby on Rails one of the worlds most popular web development frameworks, it can be challenging to learn and use. Ruby on Rails Tutorial, Second Edition, is the solution. Best-selling author and leading Rails developer Michael Hartl teaches Rails by guiding you through the development of your own complete sample application using the latest techniques in Rails web development. The updates to this edition include all-new site design using Twitters Bootstrap; coverage of the new asset pipeline, including Sprockets and Sass; behavior-driven development (BDD) with Capybara and RSpec; better automated testing with Guard and Spork; roll your own authentication with has_secure_password; and an introduction to Gherkin and Cucumber. Youll find integrated tutorials not only for Rails, but also for the essential Ruby, HTML, CSS, JavaScript, and SQL skills youll need when developing web applications. Hartl explains how each new technique solves a real-world problem, and he demonstrates this with bite-sized code thats simple enough to understand, yet novel enough to be useful. Whatever your previous web development experience, this book will guide you to true Rails mastery. This book will help you Install and set up your Rails development environment Go beyond generated code to truly understand how to build Rails applications from scratch Learn test-driven development (TDD) with RSpec Effectively use the Model-View-Controller (MVC) pattern Structure applications using the REST architecture Build static pages and transform them into dynamic ones Master the Ruby programming skills all Rails developers need Define high-quality site layouts and data models Implement registration and authentication systems, including validation and secure passwords Update, display, and delete users Add social features and microblogging, including an introduction to Ajax Record version changes with Git and share code at GitHub Simplify application deployment with Heroku		Hartl, Michael						Excluded	Excluded	new_screen			2						
190	Behave	Offshore Development Center Management in Action	Serving as a virtual extension of the Customer's IT Department, the Offshore Development Center (ODC) model provides certain benefits in comparison with in-house teams including reduced development complexity, reduced operating expense, and access to a larger pool of talents. Nevertheless, ODCs are prone to problems in Scope, Schedule, Quality, Human Resources, and Communication. From the experiences of Project Managers who have worked in Offshore Development Centers set up by FPT Software- a leading IT Outsourcing Service provider, this paper offers a look at actual problems encountered in ODCs. We then provide a reference ODC Management Framework, which consists of Best Practices that we have applied into an ODC serving a Media Industry customer over the last 4 years. The results of applying the model are discussed to prove its effectiveness.	Offshore; Offshore development center; Outsourcing	Phan Duy Hung; Le Gia Cuong; Nguyen Luu Bach	ICIIT '20: Proceedings of the 2020 5th International Conference on Intelligent Information Technology	https://doi.org/10.1145/3385209.3385214		77-85		Excluded	Excluded	new_screen			2	ACM		Offshore Development Center Management in Action	https://dl.acm.org/doi/10.1145/3385209.3385214	Association for Computing Machinery	nan; References; Year; Bibtex
191	Behave	Test-Driven Infrastructure with Chef: Bring Behavior-Driven Development to Infrastructure as Code	Since Test-Driven Infrastructure with Chef first appeared in mid-2011, infrastructure testing has begun to flourish in the web ops world. In this revised and expanded edition, author Stephen Nelson-Smith brings you up to date on this rapidly evolving discipline, including the philosophy driving it and a growing array of tools. Youll get a hands-on introduction to the Chef framework, and a recommended toolchain and workflow for developing your own test-driven production infrastructure. Several exercises and examples throughout the book help you gain experience with Chef and the entire infrastructure-testing ecosystem. Learn how this test-first approach provides increased security, code quality, and peace of mind.Explore the underpinning philosophy that infrastructure can and should be treated as code Become familiar with the MASCOT approach to test-driven infrastructure Understand the basics of test-driven and behavior-driven development for managing change Dive into Chef fundamentals by building an infrastructure with real examples Discover how Chef works with tools such as Virtualbox and Vagrant Get a deeper understanding of Chef by learning Ruby language basics Learn the tools and workflow necessary to conduct unit, integration, and acceptance tests		Nelson-Smith, Stephen						Excluded	Excluded	new_screen			2						
192	Behave	A permissioned blockchain-based implementation of LMSR prediction markets	Since the seminal work by Hanson (2003), the Logarithmic Market Scoring Rule (LMSR) has become the de facto market-maker mechanism for prediction markets. We suggest in this paper three potential issues with centralized implementations of LMSR, which we refer to as the availability, security, and privacy problems. We also explain how a permissioned blockchain-based implementation of LMSR effectively solves all the above problems. Following the design science research framework (Peffers et al., 2007), our main contribution is a fully functional permissioned blockchain-based implementation of LMSR that is ready to be deployed. We believe our results are of great value not only to prediction market researchers and practitioners looking for LMSR implementations, but also to blockchain professionals looking for fully developed solutions as well as applications of suitable research frameworks to guide blockchain research and development.	Blockchain, Design science, Logarithmic Market Scoring Rule, Prediction markets	Carvalho, Arthur	Decision Support Systems					Excluded	Excluded	new_screen			2						
193	Behave	Introducing continuous experimentation in large software-intensive product and service organisations	Software development in highly dynamic environments imposes high risks to development organizations. One such risk is that the developed software may be of only little or no value to customers, wasting the invested development efforts. Continuous experimentation, as an experiment-driven development approach, may reduce such development risks by iteratively testing product and service assumptions that are critical to the success of the software. Although several experiment-driven development approaches are available, there is little guidance available on how to introduce continuous experimentation into an organization. This article presents a multiple-case study that aims at better understanding the process of introducing continuous experimentation into an organization with an already established development process. The results from the study show that companies are open to adopting such an approach and learning throughout the introduction process. Several benefits were obtained, such as reduced development efforts, deeper customer insights, and better support for development decisions. Challenges included complex stakeholder structures, difficulties in defining success criteria, and building experimentation skills. Our findings indicate that organizational factors may limit the benefits of experimentation. Moreover, introducing continuous experimentation requires fundamental changes in how companies operate, and a systematic introduction process can increase the chances of a successful start.	Continuous experimentation, Experiment-driven software development, Product management, Agile software development, Lean software development, Lean startup	Yaman, Sezin Gizem; Munezero, Myriam; Münch, Jürgen; Fagerholm, Fabian; Syd, Ossi; Aaltola, Mika; Palmu, Christina; Männistö, Tomi	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
194	Behave	Investigating Agile Practices in Software Startups	Software development practices have smoothly shifted from traditional software development to new approaches that fit better to the real and unpredictable world. Agile practices might help practitioners respond quickly to customer change requests and deliver a working software on-schedule. Software startups are companies that develop innovative and software-intensive products and services in a dynamic and fast-growing market. This study aims to investigate the use of agile practices in software startups. We conducted 14 in-depth semi-structured interviews with the CEO and CTO from early-stage software startups. The results indicate that DevOps, Fundamentals, Design and Extreme Programming are the most used agile practice areas. Our results open up an opportunity to improve software engineering practices in early-stage software startups.	Agile practices; Interview; Software engineering; Software startups	Renata Souza; Larissa Rocha; Franklin Silva; Ivan Machado	SBES '19: Proceedings of the XXXIII Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3350768.3350786		317-321		Excluded	Excluded	new_screen			2	ACM		Investigating Agile Practices in Software Startups	https://dl.acm.org/doi/10.1145/3350768.3350786	Association for Computing Machinery	nan; References; Year; Bibtex
195	Behave	Behavior-Driven Development:A case study on its impacts on agile development teams	Software development practices which enhance software quality and help teams better develop collaboratively have received attention by the academic community. Among these techniques is Behavior-Driven Development (BDD), a development method which proposes software to be developed focusing primarily on its expected behavior. In this context, this paper investigates how BDD impacts agile software development teams. In order to achieve this, we have conducted a case study on a mobile application development environment which develops software using agile. In total, 42 interviews were performed. Our results indicate that BDD can have positive impacts, increasing collaboration among team members, and negative impacts, like difficulties in writing unit tests. We concluded that BDD has more positive than negative outcomes.	Agile Development; Behavior-Driven Development; Challenge Based Learning; Software Engineering	Nicolas Nascimento; Alan R. Santos; Afonso Sales; Rafael Chanin	ICSEW'20: Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops	https://doi.org/10.1145/3387940.3391480		109-116		Included	Included	new_screen			2	ACM		Behavior-Driven Development: A Case Study on Its Impacts on Agile Development Teams	https://dl.acm.org/doi/10.1145/3387940.3391480	Association for Computing Machinery	nan; References; Year; Bibtex
196	Behave	Using grounded theory to understand software process improvement: A study of Irish software product companies	Software process improvement (SPI) aims to understand the software process as it is used within an organisation and thus drive the implementation of changes to that process to achieve specific goals such as increasing development speed, achieving higher product quality or reducing costs. Accordingly, SPI researchers must be equipped with the methodologies and tools to enable them to look within organisations and understand the state of practice with respect to software process and process improvement initiatives, in addition to investigating the relevant literature. Having examined a number of potentially suitable research methodologies, we have chosen Grounded Theory as a suitable approach to determine what was happening in actual practice in relation to software process and SPI, using the indigenous Irish software product industry as a test-bed. The outcome of this study is a theory, grounded in the field data, that explains when and why SPI is undertaken by the software industry. The objective of this paper is to describe both the selection and usage of grounded theory in this study and evaluate its effectiveness as a research methodology for software process researchers. Accordingly, this paper will focus on the selection and usage of grounded theory, rather than results of the SPI study itself.	Software engineering, Software process improvement, Qualitative research methods, Grounded theory	Coleman, Gerry; O’Connor, Rory	Information and Software Technology					Excluded	Excluded	new_screen			2						
197	Behave	Using spring Roo for the test-driven development of Web applications	Software should be developed in a way that achieves high external and internal quality. Most programs have to be maintained or are extended. They should not only adhere to their requirements but allow to be efficiently changed. Model-driven software development (MDSD) and test-driven development (TDD) are techniques that help to satisfy this demand. We present a novel approach combining MDSD and TDD while using the Spring Roo Web development framework. Besides discussing existing work and the background, we sketch a test-driven Web development process. We then evaluate its feasibility in an exemplary scenario. Thereby, we contribute to the body of scientific knowledge on Web development frameworks in the field of MDSD and TDD.	TDD; spring; spring roo; test-driven development; web application; web development	Tim A. Majchrzak; Andreas Simon	SAC '12: Proceedings of the 27th Annual ACM Symposium on Applied Computing	https://doi.org/10.1145/2245276.2245404		664-671		Excluded	Excluded	new_screen			2	ACM		Using Spring Roo for the Test-Driven Development of Web Applications	https://dl.acm.org/doi/10.1145/2245276.2245404	Association for Computing Machinery	nan; References; Year; Bibtex
198	Behave	A Survey of Software Testing Practices in Canada	Software testing is an important activity in the software development life-cycle. In an earlier study in 2009, we reported the results of a regional survey of software testing practices among practitioners in the Canadian province of Alberta. To get a larger nationwide view on this topic (across Canada), we conducted a newer survey with a revised list of questions in 2010. Compared to our previous Alberta-wide survey (53 software practitioners), the nation-wide survey had larger number of participants (246 practitioners). We report the survey design, execution and results in this article. The survey results reveal important and interesting findings about software testing practices in Canada. Whenever possible, we also compare the results of this survey to other similar studies, such as the ones conducted in the US, Sweden and Australia, and also two previous Alberta-wide surveys, including our 2009 survey. The results of our survey will be of interest to testing professionals both in Canada and world-wide. It will also benefit researchers in observing the latest trends in software testing industry identifying the areas of strength and weakness, which would then hopefully encourage further industry-academia collaborations in this area. Among the findings are the followings: (1) the importance of testing-related training is increasing, (2) functional and unit testing are two common test types that receive the most attention and efforts spent on them, (3) usage of the mutation testing approach is getting attention among Canadian firms, (4) traditional Test-last Development (TLD) style is still dominating and a few companies are attempting the new development approaches such as Test-Driven Development (TDD), and Behavior-Driven Development (BDD), (5) in terms of the most popular test tools, NUnit and Web application testing tools overtook JUnit and IBM Rational tools, (6) most Canadian companies use a combination of two coverage metrics: decision (branch) and condition coverage, (7) number of passing user acceptance tests and number of defects found per day (week or month) are regarded as the most important quality assurance metrics and decision factors to release, (8) in most Canadian companies, testers are out-numbered by developers, with ratios ranging from 1:2 to 1:5, (9) the majority of Canadian firms spent less than 40% of their efforts (budget and time) on testing during development, and (10) more than 70% of respondents participated in online discussion forums related to testing on a regular basis.	Software testing; Survey; Canada; Industry practices	Garousi, Vahid; Zhi, Junji	J. Syst. Softw.					Excluded	Excluded	new_screen			2						
199	Behave	Software Testing: High-Impact Strategies - What You Need to Know Definitions, Adoptions, Impact, Benefits, Maturity, Vendors	Software testing is an investigation conducted to provide stakeholders with information about the quality of the product or service under test. Software testing also provides an objective, independent view of the software to allow the business to appreciate and understand the risks of software implementation. Test techniques include, but are not limited to, the process of executing a program or application with the intent of finding software bugs (errors or other defects). This book is your ultimate resource for Software Testing. Here you will find the most up-to-date information, analysis, background and everything you need to know. In easy to read chapters, with extensive references and links to get you to know all there is to know about Software Testing right away, covering: Software testing, Acceptance testing, Ad hoc testing, Agile testing, All-pairs testing, American Software Testing Qualifications Board, Api Sanity Autotest, Association for Software Testing, Attack patterns, Augmented Reality-based testing, Australian and New Zealand Testing Board, Automated Testing Framework, Avalanche (dynamic analysis tool), Bebugging, Behavior Driven Development, Black-box testing, Block design, Boundary case, Boundary testing, Boundary-value analysis, Browser speed test, Bs 7925-1, Bs 7925-2, Bug bash, Build verification test, Ca/Eztest, Cause-effect graph, Centercode, Characterization test, Cloud testing, Code coverage, Code integrity, Codenomicon, Compatibility testing, Component-Based Usability Testing, Conference Room Pilot, Conformance testing, Core Security, Corner case, Daikon (system), Data-driven testing, Decision table, Decision-to-decision path, Design predicates, Development, testing, acceptance and production, DeviceAnywhere, Dry run (testing), Dynamic program analysis, Dynamic testing, Edge case, Endeavour Software Project Management,		Roebuck, Kevin						Excluded	Excluded	new_screen			2						
200	Behave	The implementation of ATDD and BDD from Testing Perspectives	Software testing is one of the stages in software development that aims to ensure that the software is built to meet the specifications. Selection of selective test cases has a great chance of finding failure. Black box testing approach is done based on the requirement specification where this approach does not pay attention to the program code but the specification of a software. This approach can be used for testing a software using ATDD (Acceptance Test Driven Development) and BDD (Behavior Driven Development) methods. ATDD is a method of building a software created based on agile principle, acceptance test created by customer, developer and tester. BDD is a growing agile development approach in recent years. Behavior Driven Development (BDD) is built on Test-Driven Development (TDD). This Final Project focuses on the application of ATDD and BDD methods to testing the final three projects of IT Del students tested using the Roboy Framework and Cucumber Framework to find out whether these two methods are effective and be able to improve the software development process. The results obtained are that the application of ATDD and BDD methods are effective and helping to remove the error as soon as possible. © Published under licence by IOP Publishing Ltd.		Christy Barus A.	Journal of Physics: Conference Series					Included	Included	new_screen			2						
201	Behave	Impacts of behavioral driven development in the improvement of quality software deliverables	Sometimes, the software deliverables do not exactly match with the requirements. This mismatch requirement can be captured during the testing. Even then if it is missing it is because of non-coverage of the testing and test cases. This could be resolved by creating the unit test cases / Integration test cases from the requirements. This paper focuses on BDD requirements which generates the test cases as well as report executed. With aid of automation testing, the test cases of BDD can be explained. This paper deals with such test cases, the next version binaries to get the proper deliverables.	BDD - Behavior Driven Development;TDD – Test Driven Development;QA – Quality Assurance;BD – Behavior Driven	A. Sheshasaayee; P. Banumathi	2018 3rd International Conference on Inventive Computation Technologies (ICICT)					Excluded	Excluded	new_screen			2						
202	Behave	A Natural Language Driven Approach for Automated Web API Development:Gherkin2OAS	"Speeding up the development process of Web Services, while adhering to high quality software standards is a typical requirement in the software industry. This is why industry specialists usually suggest ""driven by"" development approaches to tackle this problem. In this paper, we propose such a methodology that employs Specification Driven Development and Behavior Driven Development in order to facilitate the phases of Web Service requirements elicitation and specification. Furthermore, we introduce gherkin2OAS, a software tool that aspires to bridge the aforementioned development approaches. Through the suggested methodology and tool, one may design and build RESTful services fast, while ensuring proper functionality."	behavior driven development; gherkin; open API specification; restful API	Anastasios Dimanidis; Kyriakos C. Chatzidimitriou; Andreas L. Symeonidis	WWW '18: Companion Proceedings of the The Web Conference 2018	https://doi.org/10.1145/3184558.3191654		1869-1874		Included	Included	new_screen			2	ACM		A Natural Language Driven Approach for Automated Web API Development: Gherkin2OAS	https://dl.acm.org/doi/10.1145/3184558.3191654	International World Wide Web Conferences Steering Committee	nan; References; Year; Bibtex
203	Behave	Sismic—A Python library for statechart execution and testing	Statecharts are a well-known visual modelling language for representing the executable behaviour of complex reactive event-based systems. The essential complexity of statechart models solicits the need for advanced model testing and validation techniques, such as test-driven development, behaviour-driven development, design by contract, and property statecharts for monitoring of violations of behavioural properties during statechart execution. Sismic is an open-source Python library providing a tool suite to define, simulate, execute and test statecharts with all of the aforementioned techniques.	Statechart, Executable modelling, Behaviour-driven development, Design by contract, Runtime verification	Decan, Alexandre; Mens, Tom	SoftwareX					Excluded	Excluded	new_screen			2						
204	Behave	A Method for Testing and Validating Executable Statechart Models	Statecharts constitute an executable language for modelling event-based reactive systems. The essential complexity of statechart models solicits the need for advanced model testing and validation techniques. In this article, we propose a method aimed at enhancing statechart design with a range of techniques that have proven their usefulness to increase the quality and reliability of source code. The method is accompanied by a process that flexibly accommodates testing and validation techniques such as test-driven development, behaviour-driven development, design by contract, and property statecharts that check for violations of behavioural properties during statechart execution. The method is supported by the Sismic tool, an open-source statechart interpreter library in Python, which supports all the aforementioned techniques. Based on this tooling, we carry out a controlled user study to evaluate the feasibility, usefulness and adequacy of the proposed techniques for statechart testing and validation.	Behaviour-driven development; Design by contract; Runtime verification; Statechart; Executable modeling	Mens, Tom; Decan, Alexandre; Spanoudakis, Nikolaos I.	Softw. Syst. Model.					Excluded	Excluded	new_screen			2						
205	Behave	A method for testing and validating executable statechart models	Statecharts constitute an executable language for modelling event-based reactive systems. The essential complexity of statechart models solicits the need for advanced model testing and validation techniques. In this article, we propose a method aimed at enhancing statechart design with a range of techniques that have proven their usefulness to increase the quality and reliability of source code. The method is accompanied by a process that flexibly accommodates testing and validation techniques such as test-driven development, behaviour-driven development, design by contract, and property statecharts that check for violations of behavioural properties during statechart execution. The method is supported by the Sismic tool, an open-source statechart interpreter library in Python, which supports all the aforementioned techniques. Based on this tooling, we carry out a controlled user study to evaluate the feasibility, usefulness and adequacy of the proposed techniques for statechart testing and validation. © 2018, Springer-Verlag GmbH Germany, part of Springer Nature.		Mens T., Decan A., Spanoudakis N.I.	Software and Systems Modeling					Included	Included	new_screen			2						
206	Behave	Rails 3 in Action	Summary Rails 3 in Action is a collaboration between Rails community leaders, Ryan Bigg and Yehuda Katz, that covers Rails 3.1 making it the most up-to-date resource available. But it's much more than just a Rails 3 reference book. You'll learn to do Rails the right way, so you can build stable, scalable, and maintainable apps that will satisfy even the most demanding clients. About the BookRails 3 is a full stack, open source web framework powered by Ruby and this book is an introduction to it. Whether you're just starting or you have a few cycles under your belt, you'll appreciate the book's guru's-eye-view of idiomatic Rails programming.You'll master Rails 3.1 by developing a ticket tracking application that includes RESTful routing, authentication and authorization, state maintenance, file uploads, email, and more. You'll also explore powerful features like designing your own APIs and building a Rails engine. You will see Test Driven Development and Behavior Driven Development in action throughout the book, just like you would in a top Rails shop.It is helpful for readers to have a background in Ruby, but no prior Rails experience is needed. What's InsideCovers Rails 3.1 from the ground up Testing and BDD using RSpec and Cucumber Working with Rack=============================================== Table of ContentsRuby on Rails, the framework Testing saves your bacon Developing a real Rails application Oh CRUD! Nested resources Authentication and basic authorization Basic access control More authorization File uploading Tracking state Tagging Sending email Designing an API Deployment Alternative authentication Basic performance enhancements Engines Rack-based applications		Bigg, Ryan; Katz, Yehuda						Excluded	Excluded	new_screen			2						
207	Behave	BeSoS: A Tool for Behavior-driven and Scenario-based Requirements Modeling for Systems of Systems	Systems of Systems (SoS), like connected vehicle systems, provide their functionality by the interaction of several constituent systems (CSs). [Problem] Due to the managerial, operational and evolutionary independence of the CSs in an SoS, requirements constantly change over time and linear, top-down requirements engineering methods cannot be applied without significant adaptations. New tools are needed that support the continuous and iterative specification and alignment of requirements across different levels of abstraction. [Principal Ideas] We propose to integrate the behavior-driven development (BDD) approach with an intuitive and executable scenario-based modeling of functional requirements. In this way, stakeholder expectations can be structured via features and documented in natural language as usage scenarios. Based on usage scenarios, the modeling of functional requirements can be driven by tests, allowing for the automated testing and analysis of requirements. This in turn supports the iterative specification of requirements and the alignment of stakeholder needs. [Contribution] In this paper we showcase the tool BeSoS that supports the iterative and behavior-driven specification of requirements in an SoS context. We propose a method and describe its tool components using an example. The tool is available here: https://vimeo.com/512739942. © 2021 CEUR-WS. All rights reserved.		Wiecher C., Greenyer J.	CEUR Workshop Proceedings					Included	Included	new_screen			2						
208	Behave	Behavior-Driven Development:An Expert Panel to evaluate benefits and challenges	"Teaching modern software techniques is a challenging task as these practices tend to be collaborative and require a lot of preparation and environment setup. Among these techniques is Behavior-Driven Development (BDD), a development method which proposes software to be develop focusing primarily on its expected behavior. In this context, this paper investigates the perception of active-learning experts regarding the potential benefits and challenges of teaching BDD in active learning environments to software engineering students. To achieve this goal, we have conducted an expert panel with 28 active-learning experts from four countries. Our preliminary results indicate that experts perceive both benefits, like improvement in specification, and challenges to embrace the BDD ""culture"" when teaching BDD to software engineering students. Based in these findings, we found indicatives that BDD should benefit software engineering students in active learning environments, however it may require more setup, teacher preparation and engagement during the learning process."	Agile Development; Behavior-Driven Development; Challenge Based Learning; Software Engineering	Nicolas Nascimento; Alan R. Santos; Afonso Sales; Rafael Chanin	SBES '20: Proceedings of the XXXIV Brazilian Symposium on Software Engineering	https://doi.org/10.1145/3422392.3422460		41-46		Included	Included	new_screen			2	ACM		Behavior-Driven Development: An Expert Panel to Evaluate Benefits and Challenges	https://dl.acm.org/doi/10.1145/3422392.3422460	Association for Computing Machinery	nan; References; Year; Bibtex
209	Behave	Testing meets static and runtime verification	Test driven development (TDD) is a technique where test cases are used to guide the development of a system. This technique introduces several advantages at the time of developing a system, e.g. writing clean code, good coverage for the features of the system, and evolutionary development. In this paper we show how the capabilities of a testing focused development methodology based on TDD and model-based testing, can be enhanced by integrating static and runtime verification into its workflow. Considering that the desired system properties capture data- as well as control-oriented aspects, we integrate TDD with (static) deductive verification as an aid in the development of the data-oriented aspects, and we integrate model-based testing with runtime verification as an aid in the development of the control-oriented aspects. As a result of this integration, the proposed development methodology features the benefits of TDD and model-based testing, enhanced with, for instance, early detection of bugs which may be missed by TDD, regarding data aspects, and the validation of the overall system with respect to the model, regarding the control aspects.	Java; runtime verification; static verification; test driven development	Jesus Mauricio Chimento; Wolfgang Ahrendt; Gerardo Schneider	FormaliSE '18: Proceedings of the 6th Conference on Formal Methods in Software Engineering	https://doi.org/10.1145/3193992.3194000		30-39		Excluded	Excluded	new_screen			2	ACM		Testing Meets Static and Runtime Verification	https://dl.acm.org/doi/10.1145/3193992.3194000	Association for Computing Machinery	nan; References; Year; Bibtex
210	Behave	Jasmine JavaScript Testing Update	Test your JavaScript applications efficiently using Jasmine and React.js About This BookLeverage the power of unit testing React.js to develop full-fledged JavaScript applicationsLearn the best practices of modularization and code organization while scaling your applicationEnhance your practical skills required to develop applications using the Jasmine framework in a step-by-step mannerWho This Book Is ForThis book is for web developers and designers who work with React.js and JavaScript and who are new to unit testing and automation. It's assumed that you have a basic knowledge of JavaScript and HTML. In Detail Take your testing of JavaScript applications to a new level of efficiency and reliability with the help of this book. Starting with the fundamentals of Jasmine and behavior-driven development (BDD), you will learn about tooling and automation. You will learn how to create a sustainable code base with the help of Jasmine. You will also take a look at integrated testing with React.js and Karma, and how you can speed this process up by faking AJAX requests. As you progress through the book, you will learn about the challenges of testing an application built on top of a framework and how you can prevent your application from suffering from dependency management. You will understand the concept of client-side and server-side rendering and test applications using React.js. You will also learn to automate using webpack and work with JavaScript module systems using ECMA Script 6 (ES6) modules.By the end of this book, you will be a competent web developer with good knowledge and a strong understanding of how to efficiently use the Jasmine framework for testing purposes.		Ragonha, Paulo						Excluded	Excluded	new_screen			2						
211	Behave	TestBox: Behavior Driven Development	TestBox is a testing framework for ColdFusion (CFML) that is based on BDD (Behavior Driven Development) for providing a clean obvious syntax for writing tests. It also includes MockBox for mocking and stubbing.		Majano, Luis Fernando; Reyes, Jorge Emilio						Excluded	Excluded	new_screen			2						
212	Behave	Assessing Agile Testing Practices for Enterprise Systems:A Survey Approach	"Testing enterprise systems is a challenging task. In this context, besides considering user requirements and business rules, there are several concerns that must also be considered when designing a test suite, including user interaction, integration with legacy systems, and access to relational or non-relational databases. In addition, test engineers often have to decide whether to test in the different levels (e.g., unit, integration, and system testing) or not, whether to use mock objects or not, and so on. Sadly, these decisions often conflict to each other. In this paper, we report an 18-month experience on using different approaches and tools to test two enterprise systems (SISBOL and SISDOT) from the Brazilian Army. SISBOL is an enterprise system based on the REST architectural style, using JEE (Java Enterprise Edition) in the business and integration tiers and AngularJS in the presentation tier. On the other hand, SISDOT is a ""pure"" Java enterprise system, using Java Server Faces on the presentation tier. We found that using executable specifications (as recommended in approaches based on Behavior Driven Development) is not only valid in test first scenarios as well as giving confidence on the system requirements validation, but they also help to identify new execution paths when the source code had been already implemented---suggesting that it is also promising to introduce a BDD approach in later stages of the development than testing pure JEE systems at the integration level."	Behavior Driven Development; Software Testing; Specification by Example; Test Driven Development	Rafael Fazzolino; Henrique Medrado de Faria; Luis Henrique Vieira Amaral; Edna Dias Canedo; Genaina Nunes Rodrigues; Rodrigo Bonifacio	SAST '18: Proceedings of the III Brazilian Symposium on Systematic and Automated Software Testing	https://doi.org/10.1145/3266003.3266010		29-38		Included	Included	new_screen			2	ACM		Assessing Agile Testing Practices for Enterprise Systems: A Survey Approach	https://dl.acm.org/doi/10.1145/3266003.3266010	Association for Computing Machinery	nan; References; Year; Bibtex
213	Behave	Distributed agile: Component-based user acceptance testing	Testing is conducted at multiple levels during the development of software. User Acceptance Testing conforms that the software meets user's criteria. In this paper, User Acceptance Testing is automatically conducted based on acceptance criteria. The acceptance criteria are written in the form of Given-When-Then Template. These acceptance criteria are broken down into steps and numbered. The dependencies among the steps are determined as Given->When->Then. Henceforth, the steps are arranged in a dependency graph. This graph further leads to the creation of a decision table in which the outcome of one step leads to the outcomes of its dependent steps. The decision table forms the basis of generation of a binary weighted dependency tree. This tree becomes the means to form test coverage (number of combinations to test) which forms the basis of generation of acceptance test cases.		P. Pandit; S. Tahiliani; M. Sharma	2016 Symposium on Colossal Data Analysis and Networking (CDAN)					Included	Included	new_screen			2						
214	Behave	Modeling Test Cases in BPMN for Behavior-Driven Development	Testing large-scale process integration solutions is complex and cumbersome. To tackle this problem, researchers employed behavior-driven development. They used the Business Process Model and Notation language to model domain-specific test cases. These test cases can be understood by both developers and business stakeholders and can be executed automatically.	Simple object access protocol; Business process management; Modeling; Testing; Software engineering; Behaviorial sciences; Behavior Driven Development; Process Model; Safety Net; Business Processes; Domain-specific Languages; Land Registration; Test Data; Web Server; Common Language; Web Application; Functional Requirements; Testing Tools; Object-oriented; Test Suite; Test Scenarios; Manual Testing; Testing Framework; Executive Tests; Service Contracts; Service Interactions; Unit Tests; Non-functional Requirements; business processes; Business Process Model and Notation; BPMN; behavior-driven development; BDD; test-driven development; TDD; software testing; software development; software engineering	Daniel Lubke; Tammo van Lessen	IEEE Software	https://doi.org/10.1109/MS.2016.117	"1.W. Mockli, W. Werner and D. Lubke, ""Terravis--Large Scale Business Process Integration between Public and Private Partners"", Proc. 2014 Workshop Business Process Management in the Public Sector, 2014,  [online]  Available: http://subs.emis.de/LNI/Proceedings/Proceedings232/1075.pdf. Google Scholar; 2.D. North, ""Introducing BDD"", 2006,  [online]  Available: http://dannorth.net/introducing-bdd. Google Scholar; 3.K. Beck, Test-Driven Development: By Example, Addison Wesley, 2003. Google Scholar; 4.E. Evans, Domain-Driven Design: Tackling Complexity in the Heart of Software, Addison-Wesley, 2003. Google Scholar; 5.B. Silver, BPMN Method and Style, Cody-Cassidy, 2011. Google Scholar; 6.D. Lubke, ""Using Metric Time Lines for Identifying Architecture Shortcomings in Process Execution Architectures"", presentation at 2015 Workshop Software Architecture Metrics, 2015,  [online]  Available: http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=439407. View Article  Google Scholar; 7.D. Lubke, ""Unit Testing BPEL Compositions"" in Test and Analysis of Web Services, Springer, pp. 149-171, 2007. CrossRef  Google Scholar; 8.M. Fowler, ""Business Readable DSL"", 2008,  [online]  Available: http://martinfowler.com/bliki/BusinessReadableDSL.html. Google Scholar; 9.J. Schulenklopper and E. Rommes, ""Why They Just Don't Get It: Communicating about Architecture with Business Stakeholders"", IEEE Software, vol. 33, no. 3, pp. 13-19. CrossRef  Google Scholar; 10.D. Lubke and T. van Lessen, ""Behavior-Driven Business Process Development with BPMN"", presentation at W-JAX 14, 2014,  [online]  Available: https://speakerdeck.com/vanto/behavior-driven-business-process-development-with-bpmn. Google Scholar"	15- 21		Included	Included	new_screen			2	IEEE		Modeling Test Cases in BPMN for Behavior-Driven Development	https://ieeexplore.ieee.org/document/7548916	IEEE	nan; Year; Bibtex
215	Behave	A study of value in agile software development organizations	The Agile manifesto focuses on the delivery of valuable software. In Lean, the principles emphasise value, where every activity that does not add value is seen as waste. Despite the strong focus on value, and that the primary critical success factor for software intensive product development lies in the value domain, no empirical study has investigated specifically what value is. This paper presents an empirical study that investigates how value is interpreted and prioritised, and how value is assured and measured. Data was collected through semi-structured interviews with 23 participants from 14 agile software development organisations. The contribution of this study is fourfold. First, it examines how value is perceived amongst agile software development organisations. Second, it compares the perceptions and priorities of the perceived values by domains and roles. Third, it includes an examination of what practices are used to achieve value in industry, and what hinders the achievement of value. Fourth, it characterises what measurements are used to assure, and evaluate value-creation activities.	Value, Agile software development, Empirical	Alahyari, Hiva; Berntsson Svensson, Richard; Gorschek, Tony	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
216	Behave	User and System Stories: An Agile Approach for Managing Requirements in AOSE	The agile software development life cycle is widely used in industry today due to its highly flexible and iterative processes that facilitate rapid prototyping. There has been recent work in bringing concepts and processes from agile methodologies to agent-oriented software engineering (AOSE). We contribute to this effort by presenting in this paper a novel approach to capturing requirements of agent systems in AOSE using and extending agile concepts. In this paper, we propose to adopt and extend the well-known concept of User Stories to facilitate the development of agent systems. We introduce a novel concept, System Story, that defines requirements from the perspective of the system. These System Stories are refinements of User Stories and provide more intuitive mappings to agent concepts in the design and implementation. We show how our approach allows better traceability of requirements between stories and the different software development artifacts. We validate our proposal with a feature-based comparison to recent related work, and a preliminary user evaluation based on a drone simulation of a simple search and rescue case study.	AOSE; agile methodologies; engineering MAS	Sebastian Rodriguez; John Thangarajah; Michael Winikoff	AAMAS '21: Proceedings of the 20th International Conference on Autonomous Agents and MultiAgent Systems	https://doi.org/10.5555/3463952.3464076		1064-1072		Excluded	Excluded	new_screen			2	ACM		User and System Stories: An Agile Approach for Managing Requirements in AOSE	https://dl.acm.org/doi/10.5555/3463952.3464076	International Foundation for Autonomous Agents and Multiagent Systems	nan; References; Year; Bibtex
217	Behave	The Art of Rails (Programmer to Programmer)	The Art of Rails(r) Any programmer knows that an API is only half the story, and with Ruby on Rails(r) this is especially true. Good Rails development, like good web development, is much more about the design choices you make than the framework you have at your disposal. Written by an experienced web application developer, this book picks up where the API leaves off and explains how to take good Rails code and turn it into beautiful Rails code: simple, effective, reusable, evolvable code. In a blend of design and programming, this book identifies and describes the very latest in design patterns, programming abstractions, and development methodologies that have emerged for the modern web. Ruby on Rails offers a completely new way of thinking about and using these emerging techniques, and learning to think like a Rails developer will enable you to rapidly design and write high-quality code with elegance and maintainability. With each design technique, you will discover how Rails incorporates it into its domain-specific language, and you will learn how to weave it seamlessly into your own Rails applications. Then you will learn how to take the next step and transform yourself from user into creator, making your own additions to Rails and crafting a development environment tailored to your specific needs. What you will learn from this book * Techniques for organizing your code between and within Model, View, and Controller to eliminate code repetition and maximize your effectiveness * How to think like a REST-based developer and use Rails 2.0 to translate these thoughts into your code * Advanced Ruby and meta-programming: how to use features such as block-based development, monkey patching, and dynamic APIs to build your own additions to the Rails framework * Design patterns for AJAX, web APIs, HTML decomposition, schema development, meta-programming, and more * Behavior-driven development: A new style of testing and development centered arou nd stories and behaviors instead of method calls and assertions * Ways to make your development both productive and fun in the software you write Who this book is for This book is for developers familiar with Ruby on Rails who are looking to advance their skills by learning the design and coding techniques that enable a mastery of web application development with Rails. Wrox guides are crafted to make learning programming languages and technologies easier than you think. Written by programmers for programmers, they provide a structured, tutorial format that will guide you through all the techniques involved.		Benson, Edward						Excluded	Excluded	new_screen			2						
218	Behave	The blockchain: State-of-the-art and research challenges	The blockchain revolutionizes the creation of both scalable information technology systems and diversified applications by integrating the increasingly popular artificial intelligence, cloud computing, and big data. Various industries have recently begun to implement the exploration of blockchain. It will not take long for the blockchain to spread all over the world. In order to identify and further the development of the blockchain technology, this paper reviews the extant studies on the blockchain and its key components, blockchain-based IoT, blockchain-based security, blockchain-based data management, and the main applications based on the blockchain, and it delineates potential trends and challenges. This study provides a comprehensive overview of state-of-the-art blockchain and describes a forward-looking direction.	Blockchain, Decentralization, Smart contract, Security, Privacy	Lu, Yang	Journal of Industrial Information Integration					Excluded	Excluded	new_screen			2						
219	Behave	A User‐Centered Behavioral Software Development Model	The concept of usability, which affects the quality and cost of the software projects, has become essential in recent years. There is a need to integrate usability testing activities and techniques into the development processes; however, integration is difficult. Therefore, this study proposes user‐centered behavioral (UCB) software development model, which aims to bridge the gap between human–computer interaction (HCI) and software engineering (SE) disciplines. A triangulation methodology of mixed methods is used to understand the current situation in software development companies in terms of usability and user‐centered software development by survey and interviews. Their results are then used to inform the development of the proposed model. The UCB software development model proposes a process in which several tools and techniques from SE and HCI are integrated to facilitate the production of highly usable software. In essence, the model proposes an iterative process that combines behavior‐driven development (BDD)—an agile approach that enables a better understanding and analysis of the requirements—with the style guides, usability tests, heuristic evaluation, and Wizard of Oz techniques of HCI. The model was evaluated in a pilot project and then is improved based on feedback gathered. Participants' feedback supported the effectiveness of the proposed model.The UCB software development model proposes a process in which several tools and techniques from SE and HCI are integrated to create a model that will facilitate the production of highly usable software. In essence, the model proposes an iterative process that combines behavior‐driven development (BDD)—an agile approach that enables a better understanding and analysis of the requirements—with the style guides, usability tests, heuristic evaluation, and Wizard of Oz techniques of HCI. image	software engineering; agile methodology; behavior‐driven development (BDD); human–computer interaction (HCI); user‐centered design; user‐centered software development model	Güncan, Damla; Onay Durdu, Pınar	J. Softw. Evol. Process					Excluded	Excluded	new_screen			2						
220	Behave	Behavior Driven Development for circuit design and verification	The design of hardware systems is a challenging and erroneous task where about 70% of the effort in designing these systems is spent on verification. In general, testing and verification are usually tasks that are being applied as a post-process to the implementation. In this paper, we propose a new design flow based on Behavior Driven Development (BDD), an agile technique for the development of software in which acceptance tests written in natural language play a central role and are the starting point in the design flow. We advance the flow such that the specifics that arise when modeling hardware are taken into account. Furthermore, we present a technique that allows for the automatic generalization of test cases to properties that are suitable for formal verification. This allows the designer to apply formal verification techniques based on test cases without specifying properties. We implemented our approach and evaluated the flow for an illustrative example that successfully demonstrates the advantages of the proposed flow.	Data structures; Boolean functions; Hardware design languages; Timing; Calculators; Semantics; Circuit synthesis; Circuit Design; Natural Language; Illustrative Example; Acceptable Test; Design Flow; Formal Verification; Semantic; Syntactic; Design Process; Input Signal; Output Signal; Time Information; Apparent Discrepancy; Implementation Phase; Test Pattern; Test Bench; Regular Expressions; Automatic Generation; Hardware Components; Error Message; Temporal Operators; Implementation Error	Melanie Diepenbeck; Mathias Soeken; Daniel Grosse; Rolf Drechsler	2012 IEEE International High Level Design Validation and Test Workshop (HLDVT)	https://doi.org/10.1109/HLDVT.2012.6418237	"1.K. Beck, Test Driven Development. By Example. Amsterdam: Addison-Wesley Longman, Nov. 2003. Google Scholar; 2.K. Beck, M. Beedle, A. van Bennekum, A. Cockburn, W. Cunningham, M. Fowler, J. Grenning, J. Highsmith, A. Hunt, R. Jeffries, J. Kern, B. Marick, R. C. Martin, S. Mellor, K. Schwaber, J. Sutherland, and D. Thomas, ""Manifesto for agile software development,"" 2001. [Online]. Available: http://www.agilemanifesto.org/ Google Scholar; 3.N. Nagappan, E. M. Maximilien, T. Bhat, and L. Williams, ""Realizing quality improvement through test driven development: results and experiences of four industrial teams,"" Empirical Softw. Engg., vol. 13, no. 3, pp. 289-302, Jun. 2008. CrossRef  Google Scholar; 4.E. M. Maximilien, ""Assessing test-driven development at IBM,"" in Intl Conf. on Software Engineering, 2003, pp. 564-569. View Article  Google Scholar; 5.D. North, ""Behavior Modification: The evolution of behavior-driven development,"" Better Software, vol. 8, no. 3, Mar. 2006. Google Scholar; 6.R. C. Martin, ""The truth about BDD,"" 2008. [Online]. Available: http://blog.objectmentor.com/articles/2008/11/27/the-truth-about-bdd Google Scholar; 7.D. Flanagan and Y. Matsumoto, The Ruby Programming Language. OReilly Media, Jan. 2008. Google Scholar; 8.M. Wynne and A. Hellesoy, The Cucumber Book: Behaviour-Driven Development for Testers and Developers. The Pragmatic Bookshelf, Jan. 2012. Google Scholar; 9.Accellera Property Specification Language Reference Manual, version 1.1, http://www.pslsugar.org, 2005. Google Scholar; 10.C. Eisner and D. Fisman, A Practical Introduction to PSL (Series on Integrated Circuits and Systems). Secaucus, NJ, USA: Springer, 2006. Google Scholar; 11.S. Williams. (2012) Icarus Verilog. [Online]. Available: http://iverilog.icarus.com/ Google Scholar; 12.M. Smith, A. Kwan, A. Martin, and J. Miller, ""E-TDD - Embedded Test Driven Development: A Tool for Hardware-Software Co-design Projects,"" in Extreme Programming and Agile Processes in Software Engineering, Jun. 2005, pp. 1229-1231. CrossRef  Google Scholar; 13.N. Johnson and B. Morrs. (2012) AgileSoC. [Online]. Available: http://www.agilesoc.com/ Google Scholar; 14.B. Morris and R. Saxe, ""svunit: Bringing Test Driven Design Into Functional Verification,"" in SNUG, 2009. Google Scholar; 15.H. Baumeister, ""Combining formal specifications with test driven development,""in XP/Agile Universe, 2004, pp. 1-12. CrossRef  Google Scholar; 16.M. Jahanpour and O. Mohamed, ""Automatic generation of model checking properties and constraints from production based specification,"" in Midwest Symposium on Circuits and Systems, Jul. 2004, pp. 435-8. View Article  Google Scholar; 17.M. P. E. Heimdahl, S. Rayadurgam, W. Visser, G. Devaraj, and J. Gao, ""Auto-generating Test Sequences Using Model Checkers: A Case Study,"" in Formal Approaches to Software Testing, Oct. 2003, pp. 42-59. Google Scholar; 18.Y. Zheng, J. Zhou, and P. Krause, ""A Model Checking based Test Case Generation Framework for Web Services,"" in Intl Conf. on Information Technology, Apr. 2007, pp. 715-722. View Article  Google Scholar; 19.M. Soeken, R. Wille, and R. Drechsler, ""Assisted behavior driven development using natural language processing,"" in TOOLS (50), 2012, pp. 269-287. CrossRef  Google Scholar; 20.R. Drechsler, M. Diepenbeck, D. Grosse, U. Kuhne, H. M. Le, J. Seiter, M. Soeken, and R. Wille, ""Completeness-driven development,"" in International Conference on Graph Transformation, 2012. CrossRef  Google Scholar"			Included	Included	new_screen			2	IEEE		Behavior Driven Development for circuit design and verification	https://ieeexplore.ieee.org/document/6418237	IEEE	nan; Pages; Year; Bibtex
221	Behave	Behavior driven development for circuit design and verification	The design of hardware systems is a challenging and erroneous task where about 70% of the effort in designing these systems is spent on verification. In general, testing and verification are usually tasks that are being applied as a post-process to the implementation. In this paper, we propose a new design flow based on Behavior Driven Development (BDD), an agile technique for the development of software in which acceptance tests written in natural language play a central role and are the starting point in the design flow. We advance the flow such that the specifics that arise when modeling hardware are taken into account. Furthermore, we present a technique that allows for the automatic generalization of test cases to properties that are suitable for formal verification. This allows the designer to apply formal verification techniques based on test cases without specifying properties. We implemented our approach and evaluated the flow for an illustrative example that successfully demonstrates the advantages of the proposed flow. © 2012 IEEE.		Diepenbeck M., Soeken M., Große D., Drechsler R.	Proceedings - IEEE International High-Level Design Validation and Test Workshop, HLDVT					Excluded	Excluded	new_screen			2						
222	Behave	Behaviour driven development for tests and verification	The design of hardware systems is a challenging and error-prone task, where a signifcant portion of the effort is spent for testing and verification. Usually testing and verification are applied as a post-process to the implementation. Meanwhile, for the development of software, test-first approaches such as test driven development (TDD) have become increasingly important. In this paper, we propose a new design flow based on behaviour driven development (BDD), an extension of TDD, where acceptance tests written in natural language drive the implementation. We extend this idea by allowing the specification of properties in natural language and use them as a starting point in the design flow. The flow also includes an automatic generalisation of test cases to properties that are used for formal verification. In this way, testing and formal verification are combined in a seamless manner, while keeping the requirements - from which both tests and formal properties are derived - in a single consistent document. The approach has been implemented and evaluated on several examples to demonstrate the advantages of the proposed flow. © 2014 Springer International Publishing Switzerland.		Diepenbeck M., Kühne U., Soeken M., Drechsler R.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
223	Behave	The ASSERT Virtual Machine: A Predictable Platform for Real-Time Systems	The development of real-time control systems is a complex process which has to face often conflicting requirements, especially those related to the performance of the control methods and the real-time behaviour of the system. The ASSERT Virtual Machine provides a reliable execution platform for such systems, which allows developers to cope with functional and real-time aspects separately. In order to guarantee the required real-time properties, the virtual machine only accepts software components which have a predictable temporal behaviour which can be analysed at system design time. Such components can be automatically generated from a high-level description of a system which embodies the functional components (e.g. control algorithms) into a set of containers providing the appropriate concurrent and realtime behaviour. The ASSERT Virtual Machine has been implemented in Ada 2005, using a predictable tasking subset of the language known as the Ravenscar profile. A prototype has been validated on several pilot-scale spacecraft control systems, with good results.	Computers for control, real-time systems, programming environments, software engineering, model-driven development	de la Puente, Juan A.; Zamorano, Juan; Pulido, José A.; Urueña, Santiago	IFAC Proceedings Volumes					Excluded	Excluded	new_screen			2						
224	Behave	Scenarios in the loop:integrated requirements analysis and automotive system validation	The development of safety-relevant systems in the automotive industry requires the definition of high-quality requirements and tests for the coordination and monitoring of development activities in an agile development environment. In this paper we describe a Scenarios in the Loop (SCIL) approach. SCIL combines (1) natural language requirements specification based on Behavior-Driven Development (BDD) with (2) formal and test-driven requirements modeling and analysis, and (3) integrates discipline-specific tools for software and system validation during development. A central element of SCIL is a flexible and executable scenario-based modeling language, the Scenario Modeling Language for Kotlin (SMLK). SMLK allows for an intuitive requirements formalization, and supports engineers to move iteratively, and continuously aided by automated checks, from stakeholder requirements to the validation of the implemented system. We evaluated the approach using a real example from the field of e-mobility.	BizDevOps; automotive systems engineering; requirements analysis; system validation	Carsten Wiecher; Sergej Japs; Lydia Kaiser; Joel Greenyer; Roman Dumitrescu; Carsten Wolff	MODELS '20: Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings	https://doi.org/10.1145/3417990.3421264		1-10		Included	Included	new_screen			2	ACM		Scenarios in the Loop: Integrated Requirements Analysis and Automotive System Validation	https://dl.acm.org/doi/10.1145/3417990.3421264	Association for Computing Machinery	nan; References; Year; Bibtex
225	Behave	Continuous Security through Integration Testing in an Electronic Health Records System	The estimated average cost of a healthcare data breach in 2019 was $6.45 million, which is the highest among all industries. Yet, security remains an afterthought in many digital health applications. Formal methods for testing for bugs are commonplace in software development through the use of unit testing, integration testing, system testing, and acceptance testing. More so, in modern software engineering, continuous integration is a well-known concept to run automated tests soon after any code change, when the system builds and notifies the development team of the test results. In this paper, we describe the use of a popular Python unit testing framework to implement a formal method of security testing. Common Vulnerability Scoring System (CVSS) is used to calculate metrics that represent the state of security of a deployed system. We developed a series of Pytest Behavioral Driven Development (BDD) scripts to test the Authentication and Availability of a widely used Electronic Health Records System called OpenMRS. The advantage of using the BDD approach is that testing scripts, called Gherkin files, can be read, and understood by the developers as well as the non-developer stakeholders. The use of Gherkin serves two purposes: firstly, it serves as the project’s documentation, and secondly, it automates the tests. The use of the CVSS score between 0 to 10 becomes an objective metric to compare every code change, thus achieving continuous security. We plan to expand BDD scripts to attacks like Denial of Service, Session Hijacking, SQL Injection, and other privilege escalation attacks.	Behavior Driven Development;Common Vulnerability Scoring System;Continuous Security;Electronic Health Records;Integration testing;OpenMRS	S. Purkayastha; S. Goyal; T. Phillips; H. Wu; B. Haakenson; X. Zou	2020 International Conference on Software Security and Assurance (ICSSA)					Included	Included	new_screen			2						
226	Behave	Design Driven Testing: Test Smarter, Not Harder	The groundbreaking book Design Driven Testing brings sanity back to the software development process by flipping around the concept of Test Driven Development (TDD)restoring the concept of using testing to verify a design instead of pretending that unit tests are a replacement for design. Anyone who feels that TDD is Too Damn Difficult will appreciate this book. Design Driven Testing shows that, by combining a forward-thinking development process with cutting-edge automation, testing can be a finely targeted, business-driven, rewarding effort. In other words, youll learn how to test smarter, not harder. Applies a feedback-driven approach to each stage of the project lifecycle. Illustrates a lightweight and effective approach using a core subset of UML. Follows a real-life example project using Java and Flex/ActionScript. Presents bonus chapters for advanced DDTers covering unit-test antipatterns (and their opposite, test-conscious design patterns), and showing how to create your own test transformation templates in Enterprise Architect. What youll learn Create unit and behavioral tests using JUnit, NUnit, FlexUnit. Generate acceptance tests for all usage paths through use case thread expansion. Generate requirement tests for functional requirements. Run complex acceptance tests across the enterprise. Isolate individual control points for self-contained unit/behavioral tests. Apply Behavior Driven Development frameworks like JBehave and NBehave Design Driven Testing should appeal to developers, project managers, testers, business analysts, architectsin fact anyone who builds software that needs to be tested. While equally applicable on both large and small projects, Design Driven Testing is especially helpful to those developers who need to verify their software against formal requirements. Such developers will benefit greatly from the rational and disciplined approach espoused by the authors.		Stephens, Matt; Rosenberg, Doug						Excluded	Excluded	new_screen			2						
227	Behave	Development of health software using behaviour driven development - BDD	The health software industry is facing an immense challenge of managing quality and preventing software failures. Poorly defined requirements are one of the significant cause of health software failures. Agile practices are being increasingly used by the software industry to develop systems on time and within budget with improved software quality and user acceptance. Behaviour-driven development (BDD) is an agile software engineering practice that can help to improve health software quality vastly. BDD achieves this by prioritising the illustration of software's behaviour using ubiquitous language, followed by automated acceptance testing to assess if the illustrated behaviour was achieved. This paper presents a review of BDD literature, including the characteristics of BDD and examines how BDD can benefit health software quality. The paper reviews health software standards and guidelines, to examine their compatibility with a BDD approach. Finally, the paper details future plans for the development of a framework that provides health software companies with a detailed step by step guideline on how to use BDD to develop safer health software. Copyright © 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.		Anjum M.Z., Mahon S.T.M., MahonMcCaffery F.	MODELSWARD 2020 - Proceedings of the 8th International Conference on Model-Driven Engineering and Software Development					Excluded	Excluded	new_screen			2						
228	Behave	Behaviour-driven development applied to the conformance testing of INSPIRE web services	The implementation of the INSPIRE directive requires to check the conformity of a large number of network services with the implementing rules of INSPIRE. The evaluation whether a service is fully conformant with INSPIRE is complex and requires the use of specialized testing tools that should report how verification has been made and should identify non-conformances. The use of these tools requires a high degree of technical knowledge. This fact makes very difficult for non-technical stakeholders (end users, managers, domain experts, etc.) to participate effectively in conformance testing, hinders stakeholders understanding of the causes and consequences of non-conformant results and may cause in some stakeholders disinterest in conformance testing. This work explores the suitability of a behaviour-driven development (BDD) approach to the conformance testing of OGC Web services in the context of the INSPIRE directive. BDD emphasizes the participation of non-technical parties in the design of acceptance tests by means of automatable abstract tests expressed in a human readable format. Using this idea as base, this work describes a BDD based workflow to derive abstract test suites and executable test suites from INSPIRE implementation requirements that can be written in the language used by non-technical stakeholders. This work also analyses if BDD and popular BDD tools, such as Gherkin and Cucumber, are compatible with ISO 19105:2000 testing methodology. As demonstration, we present an online conformance tool for INSPIRE View and Discovery services that executes BDD test suites. © Springer International Publishing Switzerland 2014.		Lopez-Pellicer F.J., Latre M.Á., Nogueras-Iso J., Javier Zarazaga-Soria F., Barrera J.	Lecture Notes in Geoinformation and Cartography					Included	Included	new_screen			2						
229	Behave	Towards a Thing-In-the-Loop approach for the Verification and Validation of IoT systems	The Internet of Things (IoT) is rapidly increasing its diffusion, posing great challenges to the research community. IoT systems are composed by smart objects (Things) that are interconnected in order to provide new products and services. The interaction of heterogeneous and distributed smart things guided by software with the physical world brings new sources of safety issues. To this reason, providing valuable and effective solutions to support the verification and validation of such systems is needed. In this paper we introduce a model-driven Thing-In-the-Loop verification and validation approach that transfers the best practices adopted in different embedded system domains towards the IoT world. Starting from models and scenarios representing the structure and behaviors of the IoT system as well as models of its context our approach generates appropriate test cases that are executed in accordance with Model-in-the-Loop, Software-in-the-Loop and Hardware-in-the-Loop techniques. We preliminarily evaluated the feasibility of our approach by applying it in the context of a Smart Mobility case study.	Internet of Things; Model-driven engineering; Thing-In-the-loop; verification and validation	Domenico Amalfitano; Nicola Amatucci; Vincenzo De Simone; Vincenzo Riccio; Fasolino Anna Rita	SafeThings'17: Proceedings of the 1st ACM Workshop on the Internet of Safe Things	https://doi.org/10.1145/3137003.3137007		57-63		Excluded	Excluded	new_screen			2	ACM		Towards a Thing-In-the-Loop Approach for the Verification and Validation of IoT Systems	https://dl.acm.org/doi/10.1145/3137003.3137007	Association for Computing Machinery	nan; References; Year; Bibtex
230	Behave	Supporting smart construction with dependable edge computing infrastructures and applications	The Internet of Things (IoT) such as the use of robots, sensors, actuators, electronic signalization and a variety of other Internet enabled physical devices may provide for new advanced smart applications to be used in construction in the very near future. Such applications require real-time responses and are therefore time-critical. Therefore, in order to support collaboration, control, monitoring, supply management, safety and other construction processes, they have to meet dependability requirements, including requirements for high Quality of Service (QoS). Dependability and high QoS can be achieved by using adequate number and quality of computing resources, such as processing, memory and networking elements, geographically close to the smart environments. The goal of this study is to develop a practical edge computing architecture and design, which can be used to support smart construction environments with high QoS. This study gives particular attention to the solution design, which relies on latest cloud and software engineering approaches and technologies, and provides elasticity, interoperability and adaptation to companies' specific needs. Two edge computing applications supporting video communications and construction process documentation are developed and demonstrate a viable edge computing design for smart construction.	Smart construction, Dependability, Internet of Things, Container-based systems, Edge computing	Kochovski, Petar; Stankovski, Vlado	Automation in Construction					Excluded	Excluded	new_screen			2						
231	Behave	Towards behavior-driven graphical user interface testing	The majority of users interacts with an application through its graphical user interface (GUI). To ensure high quality and expected behavior, those graphical user interfaces have to be tested thoroughly. Yet, creating graphical user interface test cases is considered expensive in comparison to unit or integration tests. In addition, test cases are perceived to be expensive to run and brittle, therefore causing a lot of false negative test results. Behavior-driven test case design addresses this challenges by bringing requirement specifications and test cases closer together. Although industry-proven tools map test specifications automatically, test methods making test scripts executable need to be implemented manually. The specification language Slang introduced by this paper generates automatically executable test cases from BDD-like feature descriptions that integrate low-fidelity prototypes in form of wireframesketcher models. To quantify the economic advantage of our approach an AB/BA crossover designed experiment was conducted. The experiment showed that creating automatically executable test cases utilizing Slang takes 63% less time compared to the industry-proven tool JBehave. In addition to presenting the experiment's results, the paper elaborates on first experience from applying the approach in a large Swiss bank. The findings of our experiments are supported by results from applying our approach in real-world scenarios. In addition, experiment as well as case study participants appreciated the sophisticated editor support of Slang.	GUI test case generation; behavior-driven development; case study; domain-specific language; model-driven engineering	Hendrik Bunder; Herbert Kuchen	ACM SIGAPP Applied Computing Review	https://doi.org/10.1145/3357385.3357386		5-17		Included	Included	new_screen			2	ACM		Towards Behavior-Driven Graphical User Interface Testing	https://dl.acm.org/doi/10.1145/3357385.3357386	Association for Computing Machinery	nan; References; Year; Bibtex
232	Behave	The behavior driven development applied to the software quality test: A case study applied to the promotion of sports financing in Brazil	The mechanisms of private investment in Brazilian sport are one of the main sources of resources that athletes hold to promote participation in high-performance competitions. In order to improve this flow, softwares are designed to shorten the path between donors and recipients. These tools, such as 'Meu Campeãu' used in this paper, require efficient analysis of the quality of the product offered. Concepts known as agile methodologies have brought a new style to the analysis of the software developed, and one of them has gained considerable prominence, known such as BDD (Behavior Driven Development), so this paper aims to analyze the implementation of Behavior Driven Development in the software quality verification process 'Meu Campeãu'. © 2019 AISTI.		Cavalcante M.G., Sales J.I.	Iberian Conference on Information Systems and Technologies, CISTI					Included	Included	new_screen			2						
233	Behave	Graph-based and scenario-driven microservice analysis, retrieval, and testing	The microservice architecture (MSA) differs fundamentally from the monolithic, layered architecture. The use of microservices provides a high degree of autonomy, composability, scalability, and fault-tolerance. MSA is regarded by many as a promising architecture for smart-city applications; however, a number of issues remain, including (1) the management of complex call relationships among microservices; (2) ensuring the quality of the overall software system even as new microservices are added and existing ones are modified, and (3) locating existing microservices that satisfy new requirements. In this paper, we propose a novel approach to the development of microservice-based systems, referred to as GSMART (Graph-based and Scenario-driven Microservice Analysis, Retrieval and Testing). GSMART enables the automatic generation of a “Service Dependency Graph (SDG)” by which to visualize and analyze dependency relationships between microservices as well as between services and scenarios. It also enables the automatic retrieval of test cases required for system changes to reduce the time and costs associated with regression testing. A microservice retrieval method using VSM and word2vec accelerates the development of new microservices tailored specifically to the needs of users based on user-provided scenarios. Experiment results demonstrate the feasibility, effectiveness, and efficiency of all of the main features of GSMART.	Microservice retrieval, Microservice testing, Microservice analysis, Service dependency graph, Behavior-driven development	Ma, Shang-Pin; Fan, Chen-Yuan; Chuang, Yen; Liu, I.-Hsiu; Lan, Ci-Wei	Future Generation Computer Systems					Included	Included	new_screen			2						
234	Behave	CEUR Workshop Proceedings	The proceedings contain 10 papers. The topics discussed include: pattern-driven knowledge systems engineering; an ontology debugger for the semantic Wiki KnowWE; behaviour-driven development for computer-interpretable clinical guidelines; ensuring the semantic correctness of workflow processes: an ontological approach; integration of activity modeller with Bayesian network based recommender for business processes; towards an ontological analysis of BPMN; CAPJA - a connector architecture for prolog and Java; migration of rule inference engine to mobile platform. challenges and case study; knowledge modeling with the open source tool myCBR; and SBVRwiki.		[No author name available]	CEUR Workshop Proceedings					Excluded	Excluded	new_screen			2						
235	Behave	Proceedings - 34th Brazilian Symposium on Software Engineering, SBES 2020	The proceedings contain 101 papers. The topics discussed include: on the influence of different perspectives on evaluating the quality of teamwork in the context of agile software development; challenges in agile transformation journey - a qualitative study; agile global software development: a systematic literature review; behavior-driven development: an expert panel to evaluate benefits and challenges [insightful ideas and emerging results; adaptations of scrum roles in software projects: survey and representation tentative with feature models; are code smell co-occurrences harmful to internal quality attributes? a mixed-method study; recommending composite refactorings for smell removal: heuristics and evaluation; a catalog of object-relational mapping code smells for java; and probabilistic model-based analysis to improve software energy efficiency.		[No author name available]	ACM International Conference Proceeding Series					Excluded	Excluded	new_screen			2						
236	Behave	Proceedings - 2021 IEEE/ACM 6th International Workshop on Metamorphic Testing, MET 2021	The proceedings contain 11 papers. The topics discussed include: robustness evaluation of stacked generative adversarial networks using metamorphic testing; metamorphic detection of repackaged malware; applying metamorphic testing to homomorphic cryptography; BMT: behavior driven development-based metamorphic testing for autonomous driving models; enhancing Euro NCAP standards with metamorphic testing for verification of advanced driver-assistance systems; towards automated metamorphic test identification for ocean system models; metamorphic testing on the continuum of verification and validation of simulation models; and metamorphic testing for image-based calcium imaging analysis pipelines.		[No author name available]	Proceedings - 2021 IEEE/ACM 6th International Workshop on Metamorphic Testing, MET 2021					Excluded	Excluded	new_screen			2						
237	Behave	21st International Conference on Agile Software Development, XP 2020	The proceedings contain 16 papers. The special focus in this conference is on Agile Software Development. The topics include: “When in Rome, Do as the Romans Do”: Cultural Barriers to Being Agile in Distributed Teams; a Quantitative Exploration of the 9-Factor Theory: Distribution of Leadership Roles Between Scrum Master and Agile Team; what an Agile Leader Does: The Group Dynamics Perspective; “This is Just a Prototype”: How Ethics Are Ignored in Software Startup-Like Environments; hypotheses Elicitation in Early-Stage Software Startups Based on Cognitive Mapping; results from a Replicated Experiment on the Affective Reactions of Novice Developers When Applying Test-Driven Development; examining the Current State of System Testing Methodologies in Quality Assurance; onboarding: How Newcomers Integrate into an Agile Project Team; combining User-Centered Design and Lean Startup with Agile Software Development: A Case Study of Two Agile Teams; agile Software Development Practices and Success in Outsourced Projects: The Moderating Role of Requirements Risk; on the Use of Design Thinking: A Survey of the Brazilian Agile Software Development Community; characterising the Quality of Behaviour Driven Development Specifications; “I Don’t Understand!”: Toward a Model to Evaluate the Role of User Story Quality; large-Scale Agile Transformation: A Case Study of Transforming Business, Development and Operations.		[No author name available]	Lecture Notes in Business Information Processing					Excluded	Excluded	new_screen			2						
238	Behave	2020 IEEE International Conference on Problems of Infocommunications Science and Technology, PIC S and T 2020 - Proceedings	The proceedings contain 171 papers. The topics discussed include: last mile technique for wireless delivery system using an accelerating lens; compact polarizers for satellite information systems; highly-distributed systems: what is inside?; behavior driven development approach in the modern quality control process; analysis of influence of UDP parameters on QoS in IP network; categorical analysis of logical networks in application to intelligent radar systems; models and information technology for reliable design of the functioning processes of flexible production systems as complex human-machine systems; advanced code-based electronic digital signature scheme; required safety component of automotive cyber-physical systems; and structure optimization of the multi-channel on-board radar with antenna aperture synthesis and algorithm for power line selection on the background of the earth surface.		[No author name available]	2020 IEEE International Conference on Problems of Infocommunications Science and Technology, PIC S and T 2020 - Proceedings					Excluded	Excluded	new_screen			2						
239	Behave	CEUR Workshop Proceedings	The proceedings contain 19 papers. The topics discussed include: product configuration in the wild: strategies for conflicting decisions in web configurators; configuring release plans; insights for configuration in natural language; group decision support for requirements management processes; Chatbot-based tourist recommendations using model-based reasoning; the effect of default options on consumer decisions in the product configuration process; cost benefit analysis in product configuration systems; do you read me? on the limits of manufacturing part numbers for communicating product variety; behavior-driven development in product configuration systems; integrating semantic web technologies and ASP for product configuration; measuring the complexity of product configuration systems; generating configuration models from requirements to assist in product management - dependency engine and its performance assessment; quasi-finite domains: dealing with the infinite in mass customization; software configuration diagnosis - a survey of existing methods and open challenges; knowledge retrieval for configuring risks when answering calls to tenders or direct customer demands; how to deal with engineering-to-order product/system configuration?; towards knowledge infrastructure for highly variant voltage transmission systems; and configuration lifecycle management - an assessment of the benefits based on maturity.		[No author name available]	CEUR Workshop Proceedings					Excluded	Excluded	new_screen			2						
240	Behave	8th International Conference on Model and Data Engineering, MEDI 2018, International Workshop on Modeling, Verification and Testing of Dependable Critical Systems, DETECT 2018, Model and Data Engineering for Social Good Workshop, MEDI4SG 2018, 2nd International Workshop on Cybersecurity and Functional Safety in Cyber-Physical Systems, IWCFS 2018, International Workshop on Formal Model for Mastering Multifaceted Systems, REMEDY 2018	The proceedings contain 21 papers. The special focus in this conference is on Model and Data Engineering. The topics include: Towards a requirements engineering approach for capturing uncertainty in cyber-physical systems environment; assessment of emerging standards for safety and security co-design on a railway case study; generation of behavior-driven development C++ tests from abstract state machine scenarios; hybrid systems and event-B: A formal approach to signalised left-turn assist; handling reparation in incremental construction of realizable conversation protocols; Analyzing a ROS based architecture for its cross reuse in ISO26262 settings; reliability in fully probabilistic event-B: How to bound the enabling of events; systematic construction of critical embedded systems using event-B; component design and adaptation based on behavioral contracts; An MDA approach for the specification of relay-based diagrams; Towards real-time semantics for a distributed event-based MOP language; Automatic planning: From event-B to PDDL; a problem-oriented approach to critical system design and diagnosis support; formal specification and verification of cloud resource allocation using timed petri-nets; Petri nets to event-B: Handling mathematical sequences through an ERTMS L3 Case; model-based verification and testing methodology for safety-critical airborne systems; gamification and serious games based learning for early childhood in rural areas; context-based sentiment analysis: A survey; a multi-agent system-based distributed intrusion detection system for a cloud computing.		[No author name available]	Communications in Computer and Information Science					Excluded	Excluded	new_screen			2						
241	Behave	17th AGILE Conference on Geographic Information Science, AGILE 2014	The proceedings contain 22 papers. The special focus in this conference is on Geographic Information Science. The topics include: Estimating completeness of vgi datasets by analyzing community activity over time periods; estimation of building types on openstreetmap based on urban morphology analysis; qualitative representations of extended spatial objects in sketch maps; exploring the geographical relations between social media and flood phenomena to improve situational awareness; event identification from georeferenced images; a recursive bayesian filter for anomalous behavior detection in trajectory data; using GPS logs to identify agronomical activities; assessing the influence of preprocessing methods on raw GPS-Data for automated change point detection; mining frequent spatio-temporal patterns in wind speed and direction; the text encoding algorithm for latitude/longitude/time; fast SNN-Based clustering approach for large geospatial data sets; RSS and sensor fusion algorithms for indoor location systems on Smartphones; an image segmentation process enhancement for land cover mapping from very high resolution remote sensing data application in a rural area; line matching for integration of photographic and geographic databases; encoding and querying historic map content; an area merge operation for smooth zooming; point labeling with sliding labels in interactive maps; comparing verbal instructions and sketch maps.; behaviour-driven development applied to the conformance testing of INSPIRE web services; making the web of data available via web feature services; a geospatial exploration of comparable cities and a gis-based process for calculating visibility impact from buildings during transmission line routing.		[No author name available]	Lecture Notes in Geoinformation and Cartography					Excluded	Excluded	new_screen			2						
242	Behave	CEUR Workshop Proceedings	The proceedings contain 24 papers. The topics discussed include: modeling test cases in BPMN for behavior-driven development; automating data exchange in process choreographies; gameful business process modeling; a game theoretic perspective on business processes; elastic process optimization and scheduling in the cloud; learning from quality issues of BPMN models from industry; the process of creating a domain specific modeling method; requirements catalog for business process modeling recommender systems; evaluating wiki collaborative features in ontology authoring; a visual language for modeling multiple perspectives of business process compliance rules; detecting flight trajectory anomalies and predicting diversions in freight transportation; and plausibility checking of formal business process specifications in linear temporal logic.		[No author name available]	CEUR Workshop Proceedings					Excluded	Excluded	new_screen			2						
243	Behave	2012 IEEE International High Level Design Validation and Test Workshop, HLDVT 2012	The proceedings contain 24 papers. The topics discussed include: sequential equivalence checking of hard instances with targeted inductive invariants and efficient filtering strategies; behavior driven development for circuit design and verification; using decision diagrams to compactly represent the state space for explicit model checking; automatic generation of deadlock detection algorithms for a family of micro-architecture description languages of communication fabrics; automatic generation of Verilog bus transactors from natural language protocol specifications; single-source hardware modeling of different abstraction levels with state charts; using haloes in mixed-signal assertion based verification; a formal method to improve SystemVerilog functional coverage; a functional test generation technique for RTL datapaths; constrained signal selection for post-silicon validation; and monitoring distributed reactive systems.		[No author name available]	Proceedings - IEEE International High-Level Design Validation and Test Workshop, HLDVT					Excluded	Excluded	new_screen			2						
244	Behave	Objects, Models, Components, Patterns - 50th International Conference, TOOLS 2012, Proceedings	The proceedings contain 24 papers. The topics discussed include: supporting compile-time debugging and precise error reporting in meta-programs; identifying a unifying mechanism for the implementation of concurrency abstractions on multi-language virtual machines; verification of snapshotable trees using access permissions and typestate; multiparty session C: safe parallel programming with message optimisation; non-interference on UMI state-charts; representing uniqueness constraints in object-relational mapping; detection of seed methods for quantification of feature confinement; assisted behavior driven development using natural language processing; learning to classify bug reports into components; incremental dynamic updates with first-class contexts; and elucidative development for model-based documentation.		[No author name available]	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Excluded	Excluded	new_screen			2						
245	Behave	IFIP WG 13.2/13.5 Joint 6th International Conference on Human-Centered Software Engineering, HCSE 2016 and 8th International Conference on Human Error, Safety, and System Development, HESSD 2016	The proceedings contain 25 papers. The special focus in this conference is on Agile, Human-Centered Software Engineering, Usability Evaluation, Testing, Socio-Technical, Ethical Considerations, Human Error, Safety-Critical Systems, User, Developer Experience, Models, Methods, Adopting Tools, Demos and Posters. The topics include: Supporting the HCI aspect of agile software development by tool support for UI-pattern transformations; usability problems experienced by different groups of skilled internet users; user-test results injection into task-based design process for the assessment and improvement of both usability and user experience; framework for relative web usability evaluation on usability features in MDD; testing prototypes and final user interfaces through an ontological perspective for behavior-driven development; complementary tools and techniques for supporting fitness-for-purpose of interactive critical systems; a conceptual ux-aware model of requirements; audio guidance for runner training; enterprise model-driven agile human-centered software engineering; collaborative task modelling on the web and declarative prototyping with data; a first prototype integrated in HAMSTERS.		[No author name available]	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Excluded	Excluded	new_screen			2						
246	Behave	Enterprise Information Systems of the Future - 6th IFIP WG 8.9 Working Conference, CONFENIS 2012, Revised Selected Papers	The proceedings contain 25 papers. The topics discussed include: process innovation: redesigning an enterprise backbone system; sub-process discovery: opportunities for process diagnostics; measuring the impact of suspension on the process enactment environment during process evolution; user perceptions, motivations and implications on ERP usage: an Indian higher education context; a decision support system based on RCM approach to define maintenance strategies; towards more flexible enterprise information systems; a proposal of a process model for requirements elicitation in information mining projects; a financial perspective on improving ICT service delivery: a case at the Belgian railways; looking for a fit for purpose: business process maturity models from a user's perspective; enterprise information systems security: a case study in the banking sector; and implementing behavior driven development in an open source ERP.		[No author name available]	Lecture Notes in Business Information Processing					Excluded	Excluded	new_screen			2						
247	Behave	2017 8th International Conference on Information and Communication Systems, ICICS 2017	The proceedings contain 65 papers. The topics discussed include: using behavior-driven development with hardware-software co-design for autonomous load management; dealing with decisional natural language why-question in business intelligence; sentence-aligned parallel corpus Amazigh-English; corpora for sentiment analysis of Arabic text in social media; ALIF editor for generating Arabic normalized lexicons; a brain friendly tool to facilitate research-teaching nexus: mind maps; adaptive e-learning web-based English tutor using data mining techniques and Jackson's learning styles; and towards a model-based approach for developing and QA of online business processes.		[No author name available]	2017 8th International Conference on Information and Communication Systems, ICICS 2017					Excluded	Excluded	new_screen			2						
248	Behave	4th International Conference on Computer Science and Computational Intelligence: Enabling Collaboration to Escalate Impact of Research Results for Society, ICCSCI 2019	The proceedings contain 87 papers. The topics discussed include: comparative performance of filtering methods for reducing noise in ischemic posterior Fossa CT images; gender demography classification on instagram based on user's comments section; automotive security with authorization and tracking via gps; combination of test-driven development and behavior-driven development for improving backend testing performance; modeling of the acute lymphoblastic leukemia detection based on the principal object characteristics of the color image; music recommender system based on genre using convolutional recurrent neural networks; MobileNet convolutional neural networks and support vector machines for palmprint recognition; MVC architecture: a comparative study between laravel framework and slim framework in freelancer project monitoring system web based; and recommendation of scheduling tourism routes using tabu search method (case study Bandung).		[No author name available]	Procedia Computer Science					Excluded	Excluded	new_screen			2						
249	Behave	CLOSER 2016 - Proceedings of the 6th International Conference on Cloud Computing and Services Science	The proceedings contain 88 papers. The topics discussed include: native cloud applications; SemNaaS: semantic web for network as a service; design time validation for the correct execution of BPMN collaborations; evidence collection in cloud provider chains; decision support system for adoption of cloud-based services; towards auditing of cloud provider chains using CloudTrust protocol; testing of web services using behavior-driven development; from architecture modeling to application provisioning for the cloud by combining UML and TOSCA; a scalable architecture for distributed OSGi in the cloud; LADY: dynamic resolution of assemblies for extensible and distributed .NET applications; and toward cloud-based classification and annotation support.		[No author name available]	CLOSER 2016 - Proceedings of the 6th International Conference on Cloud Computing and Services Science					Excluded	Excluded	new_screen			2						
250	Behave	A Service Framework for Parallel Test Execution on a Developer's Local Development Workstation	The proliferation of distributed microservices driven by service oriented architecture and the effectiveness of agile software development processes such as Test Driven Development (TDD), Behavior Driven Development (BDD), inspired by extreme programming (XP), have driven the challenging necessity to receive prompt test feedback during software development iteratively. Although few test frameworks can execute unit tests in memory in parallel, no existing test frameworks can reliably perform parallel execution for the tests that rely on file system access, database fixtures and network communication. Isolated test execution environment with dedicated resources is a prerequisite to address these challenges. No previous research addresses this need to run groups of tests in parallel on the same development host. In this paper, to cut down test execution time, we present a service framework for parallel tests execution in a developer's containerized sandbox using operating system level virtualization provided by Docker, the new hot driver for Platform as a Service (PaaS).	Containers; File systems; Testing; Databases; Generators; Workstations; Parallel Test; Executive Tests; Service Framework; Operating System; Test Group; Software Development; Processing Software; File System; Testing Framework; Database File; Agile Development; Unit Tests; Parallel Execution; Execution Environment; Microservices; Development Phase; Number Of Tests; Development Environment; Type Of Test; Web Application; Application Instances; Test Suite; Virtual Machines; Docker Container; Entire Suite; Single Host; Acceptable Test; Run Test; Real-world Scenarios; Mac OSX; parallel testing; cloud testing; test execution environment;Docker; agile development	Mazedur Rahman; Zehua Chen; Jerry Gao	2015 IEEE Symposium on Service-Oriented System Engineering	https://doi.org/10.1109/SOSE.2015.45	"1.M. Fowler, ""Agile Software Development"", Sep 2014. Google Scholar; 2.S. Ambler, ""2013 IT Project Success Rates Survey Results"", Sep 2014. Google Scholar; 3.""Principles behind the Agile Manifesto"", Sep 2014. Google Scholar; 4.""Continuous Integration"". Google Scholar; 5.K. Beck, ""Test Driven Development: By Example"" in , Boston, MA:Addison-Wesley Longman Publishing Co., Inc., pp. 11-12, 2002. Google Scholar; 6.D. North, ""Introducing behaviour driven development"", 2006. Google Scholar; 7.K. Incki, I. Ari and H. Sozer, ""A Survey of Software Testing in the Cloud"", Proc. of 2012 IEEE Sixth International Conference on Software Security and Reliability Companion, pp. 18-23, 2012. View Article  Google Scholar; 8.M. Feathers, ""Let's Reconsider That A Set of Unit Testing Rules"", Oct 2014. Google Scholar; 9.R. Osherove, ""The Art of Unit Testing: Unit-Test Definition"". Google Scholar; 10.T. Banzai, H. Koizumi, R. Kanbayashi, T. Imada, T. Hanawa and M. Sato, ""D-Cloud: Design of a Software Testing Environment for Reliable Distributed Systems using Cloud Computing Technology"", Proc. of the 2010 10th IEEE/ACM Intl. Conf. on Cluster Cloud and Grid Computing, pp. 631-636, 2010. CrossRef  Google Scholar; 11.S. Hykes, ""What is Docker? How is this different from Virtual Machines?"". Google Scholar; 12.""Introdcution to Linux Containers"", Oct 2014. Google Scholar; 13.D. Wells, ""Acceptance Tests"". Google Scholar; 14.S. Ambler, ""Acceptance/Customer Tests as Requirements Artifacts: An Agile Introduction"". Google Scholar; 15.; 16.; 17.; 18.; 19.""Dockerfile Reference"". Google Scholar; 20.""Linux Containers"". Google Scholar; 21.""GNU Bash"". Google Scholar; 22.""AWS Elastic Beanstalk adds Docker support"". Google Scholar; 23.""Containers on Google Cloud Platform"", Nov 2014. Google Scholar; 24.J. Zander, ""New Windows Server containers and Azure support for Docker"", Oct 2014. Google Scholar; 25.R. Kienzler, ""IBM & Docker partner to Deliver Apps in the Cloud & on prem"", Dec 2014. Google Scholar; 26.F. Kung, ""DockerCon 2014: Thoughts on interoperable containers"", Jun 2014. Google Scholar; 27.C. Wolf, ""VMware and Docker - Better Together"", Aug 2014. Google Scholar; 28.""Docker Explained: How To Containerize Python Web Applications"", Dec 2014. Google Scholar"			Excluded	Excluded	new_screen			2	IEEE		A Service Framework for Parallel Test Execution on a Developer's Local Development Workstation	https://ieeexplore.ieee.org/document/7133524	IEEE	nan; Pages; Year; Bibtex
251	Behave	A Systematic Literature Review on Quality Criteria for Agile Requirements Specifications	The quality of requirements is typically considered as an important factor for the quality of the end product. For traditional up-front requirements specifications, a number of standards have been defined on what constitutes good quality : Requirements should be complete, unambiguous, specific, time-bounded, consistent, etc. For agile requirements specifications, no new standards have been defined yet, and it is not clear yet whether traditional quality criteria still apply. To investigate what quality criteria for assessing the correctness of written agile requirements exist, we have conducted a systematic literature review. The review resulted in a list of 16 selected papers on this topic. These selected papers describe 28 different quality criteria for agile requirements specifications. We categorize and analyze these criteria and compare them with those from traditional requirements engineering. We discuss findings from the 16 papers in the form of recommendations for practitioners on quality assessment of agile requirements. At the same time, we indicate the open points in the form of a research agenda for researchers working on this topic .	Systematic literature review; Agile requirement; Correctness; Just-in-time; Quality assessment; Quality criteria	Heck, Petra; Zaidman, Andy	Software Quality Journal					Excluded	Excluded	new_screen			2						
252	Behave	The Rails 3 Way	The Rails 3 Way is a comprehensive resource that digs into the new features in Rails 3 and perhaps more importantly, the rationale behind them.Yehuda Katz, Rails Core The Bible for Ruby on Rails Application Development Ruby on Rails strips complexity from the development process, enabling professional developers to focus on what matters most: delivering business value via clean and maintainable code. The Rails 3 Way is the only comprehensive, authoritative guide to delivering production-quality code with Rails 3. Pioneering Rails expert Obie Fernandez and a team of leading experts illuminate the entire Rails 3 API, along with the idioms, design approaches, and libraries that make developing applications with Rails so powerful. Drawing on their unsurpassed experience and track record, they address the real challenges development teams face, showing how to use Rails 3 to maximize your productivity. Using numerous detailed code examples, the author systematically covers Rails 3 key capabilities and subsystems, making this book a reference that you will turn to again and again. He presents advanced Rails programming techniques that have been proven effective in day-to-day usage on dozens of production Rails systems and offers important insights into behavior-driven development and production considerations such as scalability. Dive deep into the Rails 3 codebase and discover why Rails is designed the way it isand how to make it do what you want it to do. This book will help you Learn whats new in Rails 3 Increase your productivity as a web application developer Realize the overall joy in programming with Rails Leverage Rails powerful capabilities for building REST-compliant APIs Drive implementation and protect long-term maintainability using RSpec Design and manipulate your domain layer using Active Record Understand and program complex program flows using Action Controller Master sophisticated URL routing concepts Use Ajax techniques via Rails 3 support for unobtrusive JavaScript Learn to extend Rails with popular gems and plugins, and how to write your own Extend Rails with the best third-party plug-ins and write your own Integrate email services into your applications with Action Mailer Improve application responsiveness with background processing Create your own non-Active Record domain classes using Active Model Master Rails utility classes and extensions in Active Support		Fernandez, Obie						Excluded	Excluded	new_screen			2						
253	Behave	Using executable specification and regression testing for broadcast mechanism of visual programming language on smartphones	The rapid advancement of mobile computing technology and the rising usage of mobile apps made our daily life more productive. The mobile app should operate all the time bug-free in order to improve user satisfaction and offers great business value to the end user. At the same time, smartphones are full of special features that make testing of apps more challenging. Actually, the quality is a must for successful applications and it cannot be achieved without testing and verification. In this paper, we present the behavior driven development methodology and Cucumber framework to automate regression testing for Android apps. Particularly, the proposed methods use the visual programming language for smartphones (Catrobat) as a reference. The Catrobat program scripts communicate via a broadcast mechanism. The objective is to test the broadcast mechanism from different angles and track regression errors as well as specify and diagnose bugs with the help of executable specifications. The results show that the methods are able to effectively reveal deficiencies in the broadcast mechanism, and ensure that the app meets end users' expectations and needs. © 2018, International Association of Online Engineering.		Ali Z., Ayyal Awwad A.M., Slany W.	International Journal of Interactive Mobile Technologies					Included	Included	new_screen			2						
254	Behave	Reconciling Requirements and Continuous Integration in an Agile Context	"The RE'18 theme is: ""Crossing Boundaries and Increasing Impact"". In this context we propose a tutorial on Requirements in an Agile context that aims at exploring the boundaries between requirements, specifications, stories, scenarios and tests. It follows the recent work started in the RE community about agility, from a practical point of view."	Requirements engineering; Tutorials; Software; Conferences; Tools; Testing; Pragmatics; Continuous Integration; Agility; Software Development; Software Engineering; Undergraduate Level; Requirements Engineering; Agile Development; Requirements; Stories; DevOps; Behaviour Driven Development; Quality Assessment	Sebastien Mosser; Jean-Michel Bruel	2018 IEEE 26th International Requirements Engineering Conference (RE)	https://doi.org/10.1109/RE.2018.00076	"1.R. Kasauli, G. Liebel, E. Knauss, S. Gopakumar and B. Kanagwa, ""Requirements engineering challenges in large-scale agile system development"", 25th IEEE International Requirements Engineering Conference RE 2017, pp. 352-361, September 4-8, 2017. Google Scholar; 2.S. Saito, Y. Iimura, A. K. Massey and A. I. Anton, ""How much undocumented knowledge is there in agile software development?: Case study on industrial project using issue tracking system and version control system"", 25th IEEE International Requirements Engineering Conference RE 2017, pp. 194-203, September 4-8, 2017. View Article  Google Scholar; 3.M. Wynne and A. Hellesoy, The Cucumber Book: Behaviour-Driven Development for Testers and Developers, Pragmatic Bookshelf, 2012. Google Scholar; 4.M. Cohn, User Stories Applied: For Agile Software Development, Redwood City, CA, USA:Addison Wesley Longman Publishing Co., Inc., 2004. Google Scholar; 5.J. Langr, A. Hunt and D. Thomas, Pragmatic Unit Testing in Java 8 with JUnit, Dallas, TX:Pragmatic Bookshelf, 2015,  [online]  Available: https://www.safaribooksonline.com/library/view/pragmatic-unit-testing/9781680500769/. Google Scholar; 6.S. Stolberg, ""Enabling agile testing through continuous integration"", 2009 Agile Conference, pp. 369-374, Aug 2009. View Article  Google Scholar; 7.25th IEEE International Requirements Engineering Conference RE 2017, September 4-8, 2017,  [online]  Available: http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=8048783. Google Scholar"			Excluded	Excluded	new_screen			2	IEEE		Reconciling requirements and continuous integration in an agile context	https://ieeexplore.ieee.org/document/8491183	IEEE	nan; Pages; Year; Bibtex
255	Behave	The impact of tailoring criteria on agile practices adoption: A survey with novice agile practitioners in Brazil	The software development industry adopts agile methods in different ways by considering contextual requirements. To fulfill organizational needs, adoption strategies consider agile methods tailoring. However, tailoring according to the context of the organization remains a problem to be solved. Literature on criteria for adopting software development methods exists, but not specifically for agile methods. Given this scenario, the following research question arises: what is the impact of software method tailoring criteria on the adoption of agile practices? To answer this question, we conducted a survey among agile practitioners in Brazil to gather data about importance of the tailoring criteria and agile practices adopted. A model for agile practices adoption based on the tailoring criteria is proposed using the results of the survey with a majority of novice agile practitioners. The proposed model was validated using PLS-SEM (partial least squares structural equation modeling) and the survey data. Results show that adoption of agile practices was influenced by criteria such as external environment, previous knowledge and internal environment. Results also indicate that organizations tend to use hybrid/custom software methods and select agile practices according to their needs.	Agile method tailoring, Tailoring criteria, Agile practices selection, Agile practices adoption, PLS-SEM, Software method tailoring	Campanelli, Amadeu Silveira; Camilo, Ronaldo Darwich; Parreiras, Fernando Silva	Journal of Systems and Software					Excluded	Excluded	new_screen			2						
256	Behave	Rules of thumb to increase the software quality through testing	The software maintenance typically requires 40-80% of the overall project costs, and this considerable variability mostly depends on the software internal quality: the more the software is designed and implemented to constantly welcome new changes, the lower will be the maintenance costs. The internal quality is typically enforced through testing, which in turn also affects the development and maintenance costs. This is the reason why testing methodologies have become a major concern for any company that builds - or is involved in building - software. Although there is no testing approach that suits all contexts, we infer some general guidelines learned during the Development of the Italian Single-dish COntrol System (DISCOS), which is a project aimed at producing the control software for the three INAF radio telescopes (the Medicina and Noto dishes, and the newly-built SRT). These guidelines concern both the development and the maintenance phases, and their ultimate goal is to maximize the DISCOS software quality through a Behavior-Driven Development (BDD) workflow beside a continuous delivery pipeline. We consider different topics and patterns; they involve the proper apportion of the tests (from end-to-end to low-level tests), the choice between hardware simulators and mockers, why and how to apply TDD and the dependency injection to increase the test coverage, the emerging technologies available for test isolation, bug fixing, how to protect the system from the external resources changes (firmware updating, hardware substitution, etc.) and, eventually, how to accomplish BDD starting from functional tests and going through integration and unit tests. We discuss pros and cons of each solution and point out the motivations of our choices either as a general rule or narrowed in the context of the DISCOS project. © COPYRIGHT SPIE. Downloading of the abstract is permitted for personal use only.		Buttu M., Bartolini M., Migoni C., Orlati A., Poppi S., Righini S.	Proceedings of SPIE - The International Society for Optical Engineering					Excluded	Excluded	new_screen			2						
257	Behave	Automated testing framework development based on social interaction and communication principles	The speed of development of the IT industry as well as the computational power which are increasing exponentially, create great competitiveness in the process of development but also in the launching of software products on the market. Automated testing comes to help with these challenges by trying to increase the speed of development by offering fast feedback and trustworthy quality by means of repeated runs of the implemented tests. This isn't a problem just on a technical level, but also on a social level, especially in the area of communication and understanding the requirements of the client. This work presents the implementation of an automated testing framework which also addresses the social problems. BDD or “Behavior Driven Development” includes an approach which would like to line up the area of client requests to the technical area, offering a uniform platform of collaboration and development. The implementation of this principle is applied in an MVP (Minimum Viable Product) type project which is meant to demonstrate the technical solution which may draw together, both socially and communication wise, the business teams and the technical implementation teams.	testing process;BDD;automated testing;Gherkin language	A. Contan; L. Miclea; C. Dehelean	2017 14th International Conference on Engineering of Modern Electric Systems (EMES)					Included	Included	new_screen			2						
258	Behave	Enabling faith-inspired education on the sustainable development goals through e-learning	The Sustainable Development Goals (SDGs) are composed from a variety of universal goals. They come with a heavy load on ethical demands while they do not provide any ethical guidance. One possibility to fill this void is to teach the SDGs with a faith-based narrative. Grown out of a workshop by Bread for World we will present our approach of Ownership-inspired Behavior-driven development, which is a strategy for an e-learning governance to introduce an Android app to support e-learning on the SDGs in theological education in remote areas in the Global South. Our goal is to develop a governance strategy for higher theological education to fill the SDGs with a faith-based narrative by using e-learning technology. Based on the staircase curriculum for the education of future church leaders developed by the British FBO Relay Trust we introduce the theoretical framework for this goal, which makes the transfer from a hierarchical governance structure found in many African societies into a dynamic e-learning framework. © Springer International Publishing AG 2018.		Gottschalk J., Winther-Nielsen N.	World Sustainability Series					Excluded	Excluded	new_screen			2						
259	Behave	Using BDD and SBVR to refine business goals into an event-B model:a research idea	The transition from a requirements document to a formal specification in Event-B is usually manual and ad-hoc. In order to bridge this gap, we propose a method based on Behavior-Driven Development, an agile approach, and that uses a structured natural language conformant to the formalism of the Semantics of Business Vocabulary and Business Rules (SBVR) standard. This method will successively refine a list of high-level business goals into an Event-B model using transformations. In this paper we present our research idea, describing the steps of this method and showing an example based on the Train System scenario described by Abrial.	BDD; SBVR; event-B; formal methods; method; requirements	Fabio Levy Siqueira; Thiago C. de Sousa; Paulo S. Muniz Silva	FormaliSE '17: Proceedings of the 5th International FME Workshop on Formal Methods in Software Engineering	https://doi.org/10.5555/3101290.3101300		31-36		Included	Included	new_screen			2	ACM		Using BDD and SBVR to Refine Business Goals into an Event-B Model: A Research Idea	https://dl.acm.org/doi/10.5555/3101290.3101300	IEEE Press	nan; References; Year; Bibtex
260	Behave	Using behaviour-driven development with hardware-software co-design for autonomous load management	The typical approach to designing embedded systems manages the specification and design of the hardware and software separately. HW/SW Co-design is used, in embedded computing, to allow the hardware and the software to be designed and implemented together and make sure that the non-functional properties are met. Behavior-driven development (BDD) is an agile software development approach that spurs collaboration of project stakeholders to ensure the right software is developed to meet their needs. BDD describes the behavior of the system as executable user stories and focuses on how the system behaves for users interact with the system. In this paper, we introduce an approach that integrates BDD with HW/SW Co-design. The approach provides the ability to describe the behavior of the software as executable user stories in a HW/SW Co-design environment. The approach is evaluated using a renewable energy project in collaboration with a private company in Canada to build a system for autonomous load management of self-forming renewable energy nanogrids.	Software; Testing; Hardware; Computer architecture; Batteries; Inverters; Relays; Loading Control; Renewable Energy; Software Development; Collaborative Project; Agile Development; Hardware Specifications; Renewable Energy Projects; Canadian Companies; Testing Procedure; Processing Software; Power Grid; Analog-to-digital Converter; Inverter; Test Environment; Text File; Output Parameters; User Requirements; Test Scenarios; Software Testing; Grid Voltage; Photovoltaic Panels; Photovoltaic Inverter; Hardware Components; Market Today; Hardware Test; Powerful Architecture; Load Shedding; Hardware Technology; Embedded Systems; Behaviour-Driven Development; Hardware-Software Co-Design; Test-driven development; Nanogrid systems; Agile software	Mohammad Alhaj; Gilbert Arbez; Liam Peyton	2017 8th International Conference on Information and Communication Systems (ICICS)	https://doi.org/10.1109/IACS.2017.7921944	"1.K. Petersen, C. Wohlin and D. Baca, ""The Waterfall Model in Large-Scale Development"", Lecture Notes in Business Information Processing, 2009. CrossRef  Google Scholar; 2.P. Kruchten, ""The Rational Unified Process: An Introduction"", Addison-Wesley Professional, 2004. Google Scholar; 3.K. Beck, Extreme Programming Explained: Embrace Change, Addisob-Wesley, 2004. Google Scholar; 4.K. Schwaber, ""SCRUM Development Process"", Business Object Design and Implementation, pp. 117-134, 1997. CrossRef  Google Scholar; 5.K. Beck, Test-driven Development: By Example, Addison-Wesley, pp. 220, 2003. Google Scholar; 6.M. Cohn, User Stories Appliedfor Agile Software Development, Addison-Wesley, 2009. Google Scholar; 7.C. Solis and X. Wang, ""A Study of the Characteristics of Behaviour Driven Development"", Software Engineering and Advanced Applications (SEAA), 2011. View Article  Google Scholar; 8.S. Rolland and G. Glania, Hybrid mini-grids for rural electrification: Lessons learneds, 2011. Google Scholar; 9.B. Bacque et al., ""Solving the Last mile Problem for energy self-forming nanogrids"", Humanitarian Technology Conference (IHTC2015) 2015 IEEE Canada International, 2015. View Article  Google Scholar; 10.J. Schonberger, R. Duke and S. Round, ""Dc bus signaling: A distributed control strategy for a hybrid renewable nanogrid"", IEEE Transactions on Industrial Electronics, vol. 53, no. 5, August 2006. View Article  Google Scholar; 11.W. Dalbon, M. Roscia and D. Zaninelli, ""Hybrid photovoltaic system control for enhancing sustainable energy"", Power Engineering Society Summer Meeting, 2002. View Article  Google Scholar; 12.J. Teich, Hardware/Software Codesign: The Past the Present and Predicting the Future IEEE, 2011. Google Scholar; 13.T. Vandoorn, J. D. Kooning, B. Meersman and L. Vandevelde, ""Review of primary control strategies for islanded microgrids with power-electronic interfaces"", Renewable and Sustainable Energy Reviews, vol. 19, pp. 613-628, March 2013. CrossRef  Google Scholar; 14.B. Nordman, K. Christensen and A. Meier, Think Globally Distribute Power Locally: The Promise of Nanogrids IEEE Computer Society, pp. 89-91, 2012. Google Scholar; 15.D. Dahlby, Applying Agile Methods to Embedded Systems Development, vol. 41, pp. 101-123, 2004. Google Scholar; 16.D. North, Introducing BDD,  [online]  Available: http://dannorth.net/introducing-bdd/. Google Scholar"			Included	Included	new_screen			2	IEEE		Using behaviour-driven development with hardware-software co-design for autonomous load management	https://ieeexplore.ieee.org/document/7921944	IEEE	nan; Pages; Year; Bibtex
261	Behave	Towards automated requirements checking throughout development processes of interactive systems	The user-centered development process of interactive systems is iterative and, during multiple iterations, users have the opportunity to bring new requirements that are very likely to have an impact, not only in future development, but also affect previously developed artifacts. Manual testing of all artifacts when new requirements are introduced can be cumbersome and time consuming. For that, we need flexible methods to ensure continuous consistency and accuracy among the various artifacts employed to build interactive systems. The ultimate goal of this position paper is to briefly present our vision on an approach for automating the requirements assessment using a Behavior-Driven Development perspective. Thereby, automated tests can run early in the design process, providing a continuous quality assurance of requirements, and helping clients and teams to identify potential problems and inconsistencies before commitments with software implementation.		Silva T.R., Winckler M.A.A.	CEUR Workshop Proceedings					Excluded	Excluded	new_screen			2						
262	Behave	Automated Test Input Generation via Model Inference Based on User Story and Acceptance Criteria for Mobile Application Development	"There has been observed explosive growth in the development of mobile applications (apps) for Android and iOS operating systems, which has led to the direct impact towards mobile app development. In order to design and propose quality-oriented apps, it is the primary responsibility of developers to devote time and sufficient efforts towards testing to make the apps bug-free and operational in the hands of end-users without any hiccup. Manual testing procedures take a prolonged amount of time in writing test cases, and in some cases, the full testing requirements are not met. Besides, the insufficient knowledge of tester also impacts the overall quality and bug-free apps. To overcome the obstacles of testing, we propose a new testing methodology cum tool called ""AgileUATM"" which works primarily towards white-box and black-box testing. To evaluate the validity of the proposed tool, we put the tool in a real-time operational environment concerning mobile test apps. By using this tool, all the acceptance criteria are determined via user stories. The testers/developers specify requirements with formal specifications based on programs properties, predicates, invariants, and constraints. The results show that the proposed tool generated effective and accurate test cases, test input. Meanwhile, expected output was also generated in a unified fashion from the user stories to meet acceptance criteria. The proposed solution also reduced the development time to identify test data as compared to manual Behavior-Driven Development (BDD) methodologies. This tool can support the developers to get a better idea about the required tests and able to translate the customer's natural languages to computer languages as well. This paper fulfills an approach to suitably test mobile application development. © 2020 World Scientific Publishing Company."		Nguyen D.-M., Huynh Q.-T., Ha N.-H., Nguyen T.-H.	International Journal of Software Engineering and Knowledge Engineering					Included	Included	new_screen			2						
263	Behave	Security and privacy behavior definition for behavior driven development	There is an issue when security measures are implemented and tested while using agile software development techniques such as Behavior Driven Development (BDD). We need to define the necessary levels of security and the privacy behaviors and acceptance criteria for the BDD. A method for defining the acceptance criteria (BehaveSafe) by creating a threat and countermeasure graph called theT&C graph is proposed in this paper. We have estimated the efficiency of our method with a web based system. © Springer International Publishing Switzerland 2014.		Okubo T., Kakizaki Y., Kobashi T., Washizaki H., Ogata S., Kaiya H., Yoshioka N.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
264	Behave	Effort Estimation using Bayesian Networks for Agile Development	This article proposes an automatic method to estimate the effort of development based on narrative texts. Narrative used the agile method. We propose techniques of symbolic analysis of natural language were used for extraction of verbs and nouns, and verbal reduction (verbs in infinitive), and the standardization of keywords through synonyms. For the machine learning was used if the naive Bayesian classifier model. Apply and test the model in real environment that used the narratives in the Portuguese language in the form of BDD (Behavior Driven Development). In these tests, obtaining an accuracy of 83% in the estimates of the story points.	Bayesian network model;Agile;Estimation	C. Ratke; H. H. Hoffmann; T. Gaspar; P. E. Floriani	2019 2nd International Conference on Computer Applications & Information Security (ICCAIS)					Excluded	Excluded	new_screen			2						
265	Behave	Test-Driven Java Development - Second Edition: Invoke TDD Principles for End-to-End Application Development	This book will teach the concepts of test driven development in Java so you can build clean, maintainable and robust code Key Features Explore the most popular TDD tools and frameworks and become more proficient in building applicationsCreate applications with better code design, fewer bugs, and higher test coverage, enabling you to get them to market quickly Implement test-driven programming methods into your development workflows Book Description Test-driven development (TDD) is a development approach that relies on a test-first procedure that emphasizes writing a test before writing the necessary code, and then refactoring the code to optimize it. The value of performing TDD with Java, one of the longest established programming languages, is to improve the productivity of programmers and the maintainability and performance of code, and develop a deeper understanding of the language and how to employ it effectively. Starting with the basics of TDD and understanding why its adoption is beneficial, this book will take you from the first steps of TDD with Java until you are confident enough to embrace the practice in your day-to-day routine. You'll be guided through setting up tools, frameworks, and the environment you need, and we will dive right into hands-on exercises with the goal of mastering one practice, tool, or framework at a time. You'll learn about the Red-Green-Refactor procedure, how to write unit tests, and how to use them as executable documentation. With this book, you'll also discover how to design simple and easily maintainable code, work with mocks, utilize behavior-driven development, refactor old legacy code, and release a half-finished feature to production with feature toggles. You will finish this book with a deep understanding of the test-driven development methodology and the confidence to apply it to application programming with Java. What you will learn Explore the tools and frameworks required for effective TDD development Perform the Red-Green-Refactor process efficiently, the pillar around which all other TDD procedures are based Master effective unit testing in isolation from the rest of your code Design simple and easily maintainable code by implementing different techniques Use mocking frameworks and techniques to easily write and quickly execute tests Develop an application to implement behavior-driven development in conjunction with unit testing Enable and disable features using feature toggles Who This Book Is ForIf you're an experienced Java developer and want to implement more effective methods of programming systems and applications, then this book is for you.		Garcia, Alex; Farcic, Viktor						Excluded	Excluded	new_screen			2						
266	Behave	Behavior-driven development using specification by example: An approach for delivering the right software built in right way	"This chapter highlights a crucial problem seen often in software development that is bridging the communication gap between business and Development"" (BDD) methodology supplemented with ""Specification By Example"" approach of delivering the right software that matters. Effective communication has always been a challenge between clients, business stakeholders, project managers, developers, testers and business analysts because a ""ubiquitous"" language that every one can easily understand and use does not exist. Specification By Example serves as that ubiquitous language for all, helps build right software that matters through effective communication. Specifications are written in plain English language using the Gherkin syntax to describe various behaviors of software. BDD tools help write software specification using gherkin language and also create a living documentation that is automatically generated by programming language reflecting the current state of software at any given point of time. © 2016 by IGI Global. All rights reserved."		Menon P.R.	Emerging Innovations in Agile Software Development					Excluded	Excluded	new_screen			2						
267	Behave	The Business Transformation Framework and Enterprise Architecture Framework for Managers in Business Innovation: An Applied Holistic Mathematical Model	This journal article proposes a cross-business domain applied holistic mathematical model (AHMM) that is the result of a lifetime long research on business transformations, applied mathematics, software modelling, business engineering, financial analysis, and global enterprise architecture. This ultimate research is based on an authentic and proprietary mixed research method that is supported by an underlining mainly qualitative holistic reasoning model module. The proposed AHMM formalism attempts to mimic some functions of the human brain, which uses empirical processes that are mainly based on the beam-search, like heuristic decision-making process. The AHMM can be used to implement a decision-making system or an expert system that can integrate in the enterprise’s business, information and communication technology environments. The AHMM uses a behaviour driven development environment or a natural language environment that can be easily adopted by the project’s development teams. The AHMM offers a high level implementation environment that can be used by any team member without any prior computer sciences qualification. The AHMM can be used also to model enterprise architecture (EA) blueprints, business transformation projects, or knowledge management systems; it is supported by many real-life cases of various business domains. The uniqueness of this research is that the AHMM promotes a holistic unbundling process, the alignment of various EA standards and transformation strategies to support business transformation projects. © 2021 IGI Global. All rights reserved.		Trad A.	International Journal of Service Science, Management, Engineering, and Technology					Excluded	Excluded	new_screen			2						
268	Behave	Ontological syntax highlighting	This paper deals with the special type of syntax highlighting which is powered by combination of DEMO methodology (Design & Engineering Methodology for Organizations), BDD technique (Behaviour-Driven Development). Main contribution of this paper is the idea how to highlight business relevant code in IDEs (Integrated Development Environments) and notice a developer about the fact that important part of code base is edited. The proposal of the implementation encounters usage of code coverage technique and user stories derived upon DEMO methodology. © 2018 Author(s).		Matula J., Zacek J.	AIP Conference Proceedings					Included	Included	new_screen			2						
269	Behave	A history of the Groovy programming language	This paper describes the history of the Groovy programming language. At the time of Groovy's inception, Java was a dominant programming language with a wealth of useful libraries. Despite this, it was perceived by some to be evolving slowing and to have shortcomings for scripting, rapid prototyping and when trying to write minimalistic code. Other languages seemed to be innovating faster than Java and, while overcoming some of Java's shortcomings, used syntax that was less familiar to Java developers. Integration with Java libraries was also non-optimal.	Closure; Domain Specific Languages; Dynamic typing; Extensibility; Functional programming; Metaprogramming; Object-oriented; Scripting; Static typing	Paul King	Proceedings of the ACM on Programming Languages	https://doi.org/10.1145/3386326				Excluded	Excluded	new_screen			2	ACM		A History of the Groovy Programming Language	https://dl.acm.org/doi/10.1145/3386326	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
270	Behave	Integrating behavior driven development and programming by contract	This paper developed a Contracted Behavior Driven Development (CBDD) method that extends and combines the ideas behind Test/Behavior Driven Development (TDD/BDD) and Programming by Contract (PBC) to improve the overall stability and quality of a system. A tool is developed to derive unit tests automatically by analyzing human written specifications for preconditions and post-conditions when coupled with data definitions. These results will be used to generate code to be run by a unit testing framework before deployment, either as part of a continuous integration environment or by individual developers. The tool will also generate wireframe classes implementing pre and post-conditions within the code and using runtime contract analysis to generate information when an exception occurs, thereby helping to automate verification of bug fixes. © 2013 Springer-Verlag Berlin Heidelberg.		Schoeneman L., Liu J.B.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
271	Behave	Transit use and the work commute: Analyzing the role of last mile issues	This paper examines the role that public transport last mile problems play in mode choice decisions of commuters, while controlling for trip, built environment, and decision maker related variables. Last-mile problems arise due to lack of adequate connectivity between transit stops and trip origin or termination points. The paper is motivated by previous literature which has pointed out that high-quality public transit needs to consider end-to-end connectivity from trip origins to destinations. In contrast to previous work on transit last mile problems, which has focused on physical distance and sidewalks to transit stops, we consider a wider range of area factors including transit availability, job accessibility, parking costs, the quality of the pedestrian environment and risks to pedestrians from vehicular traffic, and social characteristics such as street-level crime. Using a discrete choice model, our goal is to unpack ways in which such factors contribute to the last-mile problem in home-based work trips, while controlling for these wider range of factors as well as the usual variables such as cost and trip time that inform mode choice. We find that the prevalence of non-domestic violent crimes reduces the odds of using all types of non-motorized alternatives as well as transit that is accessed either by walking or driving. Using compensating variation to measure welfare changes, we show that there are significant benefits that could be brought to transit service users through increasing safety in the transit access trip. By separately controlling for origin and destination transit accessibility, we show that improved destination accessibility significantly boosts transit use to a greater degree than increases in origin level accessibility. These findings argue for improving accessibility and related job densities at employment centers.	Transit use, Last mile problems, Crime, Accessibility, Destination accessibility, Mode choice	Tilahun, Nebiyou; Thakuriah, Piyushimita (Vonu); Li, Moyin; Keita, Yaye	Journal of Transport Geography					Excluded	Excluded	new_screen			2						
272	Behave	Extending behavior-driven development for assessing user interface design artifacts	This paper presents a scenario-based approach to specify requirements and tests by extending Behavior-Driven Development (BDD) with the aim of ensuring the consistency between user requirements and user interface design artifacts. The approach has been evaluated by exploiting user requirements specified by a group of potential Product Owners (POs) for a web system to book business trips. Such requirements gave rise to a set of User Stories that have been refined and used to automatically check the consistency of task models, user interface (UI) prototypes, and final UIs of the system. The results have shown our approach was able to identify different types of inconsistencies in the set of analyzed artifacts and consistently keep the semantic traces between them. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.		Silva T.R., Winckler M., Trætteberg H.	Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE					Included	Included	new_screen			2						
273	Behave	Beast Methodology: An Agile Testing Methodology for Multi-Agent Systems Based on Behaviour Driven Development	This paper presents a testing methodology to apply Behaviour Driven Development (BDD) techniques while developing Multi-Agent Systems (MASs), termed BEhavioural Agent Simple Testing (BEAST) Methodology. This methodology is supported by the open source framework (BEAST Tool) which automatically generates test cases skeletons from BDD scenarios specifications. The developed framework allows the testing of MASs based on JADE or JADEX platforms. In addition, this framework offers a set of configurable Mock Agents with the aim of being able to execute tests while the MAS is under development. The BEAST Methodology presents transparent traceability from user requirements to test cases. Thus, the stakeholders can be aware of the project status. The methodology and the associated tool have been validated in the development of a MAS for fault diagnosis in FTTH (Fiber To The Home) networks. The results have been measured in quantifiable way obtaining a reduction of the tests implementation time.	Behaviour-driven development; Multi-agent systems; Agile; Methodology; Mock-agents; Test	Carrera, Álvaro; Iglesias, Carlos A.; Garijo, Mercedes	Information Systems Frontiers					Excluded	Excluded	new_screen			2						
274	Behave	Beast methodology: An agile testing methodology for multi-agent systems based on behaviour driven development	This paper presents a testing methodology to apply Behaviour Driven Development (BDD) techniques while developing Multi-Agent Systems (MASs), termed BEhavioural Agent Simple Testing (BEAST) Methodology. This methodology is supported by the open source framework (BEAST Tool) which automatically generates test cases skeletons from BDD scenarios specifications. The developed framework allows the testing of MASs based on JADE or JADEX platforms. In addition, this framework offers a set of configurable Mock Agents with the aim of being able to execute tests while the MAS is under development. The BEAST Methodology presents transparent traceability from user requirements to test cases. Thus, the stakeholders can be aware of the project status. The methodology and the associated tool have been validated in the development of a MAS for fault diagnosis in FTTH (Fiber To The Home) networks. The results have been measured in quantifiable way obtaining a reduction of the tests implementation time. © 2013 Springer Science+Business Media New York.		Carrera A., Iglesias C.A., Garijo M.	Information Systems Frontiers					Included	Included	new_screen			2						
275	Behave	A Study of Test Techniques for Integration with Domain Driven Design	This paper presents an exploratory study on agile techniques for software testing Test-Driven Development and Behaviour-Driven Development for integration with the agile software development technique known as Domain-Driven Design. It also comprises a comparison between both test approaches, enhancing the strengths and weaknesses of each one. To make it feasible the integration proposal, an example of domain using Apache Isis framework was developed. According to the study performed, the possibility of creating an automatic test generator to make it agile the validation of entities attributes of the domain model was noted.	Behaviour-Driven Development; Apache Isis; Domain-Driven Development; Software Test; Test-Driven Development	Santos, Eloisa Cristina Silva; Beder, Delano Medeiros; Penteado, Rosângela A. Dellosso	Proceedings of the 2015 12th International Conference on Information Technology - New Generations					Included	Included	new_screen			2						
276	Behave	A Behaviour-Driven Development Approach for Cyber-Physical Production Systems	This paper proposes a method for iterative engineering of cyber-physical production systems (CPPS) that allows early testing of virtual prototypes and early involvement of domain experts. It is based on behaviour-driven development (BDD) from agile software engineering, which is adapted to address a set of issues relevant for CPPS engineering including the use of standardised CPPS models, integration testing, test environments, and brownfield development. The paper describes these adaptations and synthesises them into a procedural model of BDD for CPPS. Finally, a prototypical test system for CPPS is presented that partially implements the approach. © 2020 IEEE.		Kannengiesser U., Krenn F., Stary C.	Proceedings - 2020 IEEE Conference on Industrial Cyberphysical Systems, ICPS 2020					Included	Included	new_screen			2						
277	Behave	Lu-Lu	This paper proposes Lu-Lu as an add-on architecture to open MMOGs and social network games, which has been developed to utilise a key set of ingredients that underline collaborative decision making games as reported within the research literature: personalisation, team matching, non-optimal decision making, leading, decisiveness index, scoring, levelling, and multiple stages. The implementation of Lu-Lu is demonstrated as an add-on to the classic supply chain beer game, including customisation of Lu-Lu to facilitate information exchange through the Facebook games platform, e.g., Graph API and Scores API. Performance assessment of Lu-Lu using Behaviour-Driven Development suggests a successful integration of all key ingredients within Lu-Lu's architecture, yielding autonomous behaviour that improves both player enjoyment and decision making.	Collaborative; Decision making; Game; MPEG-7; Personalisation; Profiling	Daylamani-Zad, Damon; Angelides, Marios C.; Agius, Harry	Decis. Support Syst.					Excluded	Excluded	new_screen			2						
278	Behave	Lu-Lu: A framework for collaborative decision making games	This paper proposes Lu-Lu as an add-on architecture to open MMOGs and social network games, which has been developed to utilise a key set of ingredients that underline collaborative decision making games as reported within the research literature: personalisation, team matching, non-optimal decision making, leading, decisiveness index, scoring, levelling, and multiple stages. The implementation of Lu-Lu is demonstrated as an add-on to the classic supply chain beer game, including customisation of Lu-Lu to facilitate information exchange through the Facebook games platform, e.g., Graph API and Scores API. Performance assessment of Lu-Lu using Behaviour-Driven Development suggests a successful integration of all key ingredients within Lu-Lu's architecture, yielding autonomous behaviour that improves both player enjoyment and decision making.	Collaborative, Decision making, Game, Profiling, Personalisation, MPEG-7	Daylamani-Zad, Damon; Angelides, Marios C.; Agius, Harry	Decision Support Systems					Excluded	Excluded	new_screen			2						
279	Behave	An Approach for Guiding Developers in the Choice of Security Solutions and in the Generation of Concrete Test Cases	This paper tackles the problems of choosing security solutions and writing concrete security test cases for software, which are two tasks of the software life cycle requiring time, expertise and experience. We propose in this paper a method, based upon the notion of knowledge base, for helping developers devise more secure applications from the threat modelling step up to the testing one. The first stage of the approach consists of the acquisition and integration of publicly available security data into a data store. This one is used to assist developers in the design of attack-defense trees expressing the attacker possibilities to compromise an application and the defenses that may be implemented. These defenses are given under the form of security pattern combinations, a security pattern being a generic and reusable solution to design more secure applications. In the second stage, these trees are used to guide developers in the test case generation. Test verdicts show whether an application is vulnerable to the threats modelled by an ADTree and whether the consequences of the chosen security patterns are observed from the application (a consequence leading to some observable events partly showing that a pattern is correctly implemented). We applied this approach to web applications and evaluated it on 24 participants. The results are very encouraging in terms of the two criteria: comprehensibility and effectiveness.	Security; Attack-defense trees; Security patterns; Test case generation	Salva, Sébastien; Regainia, Loukmen	Software Quality Journal					Excluded	Excluded	new_screen			2						
280	Behave	Parsing BDD Stories for Automated Verification of Software Artefacts	This position paper reports on our ongoing developments towards the automated verification of software artefacts by parsing sentences on Behaviour-Driven Development (BDD) stories. The solution we propose is based on different strategies for analysing the consistency of user requirements specified in BDD stories on task models, graphical user interfaces (GUIs), GUI prototypes, and domain models. We illustrate our solution through concrete examples and discuss its challenges and limitations. © 2020, Electronic Communications of the EASST. All rights reserved.		Silva T.R., Fitzgerald B.	Electronic Communications of the EASST					Included	Included	new_screen			2						
281	Behave	Tit for tat and big steps: The case of Swedish banks’ internationalization 1961–2010	This study examines four major Swedish banks’ internationalization process patterns during the period 1961–2010. The study complements earlier studies by also considering the banks’ levels of market commitment. One objective is to determine if ‘Tit for tat’-behaviour seen in earlier studies of Swedish banks still prevails after the deregulation. Adding to earlier studies, this study also considers the level of market activities and commitments. A secondary purpose is to examine how the financial crisis has affected the banks with reference to the banks’ internationalization patterns. The empirical study is based on archival data on the studied banks’ foreign operations. The results show that the banks’ behaviour follows ‘Tit for tat’-behaviour but that the internationalization has accelerated after the deregulation, hence being carried out with ‘big steps’ rather than small steps. The analysis also shows that the mimetic behaviour is complemented by other types of internationalization behaviours. The differences in bank internationalization also mean that the effect of a financial crisis varies depending on how the banks have internationalized.	Banks, Commitment, Financial crisis, Internationalization process, Longitudinal study	Ekman, Peter; Hadjikhani, Annoch Isa; Pajuvirta, Andreas; Thilenius, Peter	International Business Review					Excluded	Excluded	new_screen			2						
282	Behave	A case study of agile software development for safety-Critical systems projects	This study explores the introduction of agile software development within an avionics company engaged in safety-critical system engineering. There is increasing pressure throughout the software industry for development efforts to adopt agile software development in order to respond more rapidly to changing requirements and make more frequent deliveries of systems to customers for review and integration. This pressure is also being experienced in safety-critical industries, where release cycles on typically large and complex systems may run to several years on projects spanning decades. However, safety-critical system developments are normally highly regulated, which may constrain the adoption of agile software development or require adaptation of selected methods or practices. To investigate this potential conflict, we conducted a series of interviews with practitioners in the company, exploring their experiences of adopting agile software development and the challenges encountered. The study also explores the opportunities for altering the existing software process in the company to better fit agile software development to the constraints of software development for safety-critical systems. We conclude by identifying immediate future research directions to better align the tempo of software development for safety-critical systems and agile software development.		Islam, Gibrail; Storer, Tim	Reliability Engineering & System Safety					Excluded	Excluded	new_screen			2						
283	Behave	Does IT team climate matter? An empirical study of the impact of co-workers and the Confucian work ethic on deviance behavior	This study seeks to determine the impact of IT co-workers on individual deviance behavior in organizations. Using data collected from 322 IT employees and their supervisors in Chinese software companies, we also examine the impact of the Confucian work ethic on deviant behavior. The results suggest that both co-workers’ production deviance and the Confucian work ethic have impacts on individuals’ production deviance. The influence of IT co-workers’ production deviance was greater in high team climates and low team climates than in neutral team climates. The Confucian work ethic has no significant influence on production deviance in low team climates.	Confucian work ethic, IT co-worker production deviance, IT team climate	Zhang, Hanpeng; Luo, Xin (Robert); Liao, Qinyu; Peng, Lifang	Information & Management					Excluded	Excluded	new_screen			2						
284	Behave	Legislation-driven development of a Gift Aid system using Event-B	This work presents our approach to formally model the Swiftaid system design, a digital platform that enables donors to automatically add Gift Aid to donations made via card payments. Following principles of Behaviour-Driven Development, we use Gherkin to capture requirements specified in legislation, specifically the UK Charity (Gift Aid Declarations) Regulations 2016. The Gherkin scenarios provide a basis for subsequent formal modelling and analysis using Event-B, Rodin and ProB. Interactive model simulations assist communication between domain experts, software architects and other stakeholders during requirements capture and system design, enabling the emergent system behaviour to be validated. Our approach was employed within the development of the real Swiftaid product, launched by Streeva in February 2019. Our analysis helped conclude that there was not a strong enough business case for one of the features, whichwas shown to provide nominal user convenience at the expense of increased complexity. This work provides a case study in allying formal and agile software development to enable rapid development of robust software.	Behaviour-driven development; Formal modelling; Gherkin; Event-B; Gift Aid; Swiftaid	David M. Williams; Salaheddin Darwish; Steve Schneider; David R. Michael	Formal Aspects of Computing	https://doi.org/10.1007/s00165-020-00512-5		251-273		Included	Included	new_screen			2	ACM		Legislation-driven development of a Gift Aid system using Event-B	https://dl.acm.org/doi/10.1007/s00165-020-00512-5	Springer-Verlag	nan; References; Year; Bibtex
285	Behave	Test Descriptions with ETSI TDL	To address the need for abstract, high-level test descriptions that can be shared among different stakeholders, the European Telecommunications Standards Institute (ETSI) commissioned the design of the Test Description Language (TDL). TDL is designed as a domain-specific language for testing, consisting of a standardised abstract syntax (meta-model) and concrete syntaxes for textual specification, graphical design, and model exchange between tools. Its main purpose is to support a test methodology that is followed in the standardisation work for software-intense systems at ETSI and is applicable in industrial projects as well. TDL enables the formal specification of both test objectives derived from system requirements and test descriptions refining the test objectives. The latter serve as blueprint for the implementation of executable tests. A standardised mapping of TDL specifications to test scripts in the standardised test execution language TTCN-3 widens the reach of TDL to ensure compatibility and consistency of generated executable tests. An open-source toolset has been developed as a common platform to accelerate the adoption of TDL and lower the barrier to entry for users and tool vendors. Reports from pilot applications within three ETSI standardisation groups demonstrate the practicality of the chosen approach.	Model-based testing; Domain-specific modelling; Test description language; Test methodology; Testing in standardisation	Makedonski, Philip; Adamis, Gusztáv; Käärik, Martti; Kristoffersen, Finn; Carignani, Michele; Ulrich, Andreas; Grabowski, Jens	Software Quality Journal					Excluded	Excluded	new_screen			2						
286	Behave	Enabling IoT Platform Interoperability Using a Systematic Development Approach by Example	Today, the IoT landscape consists of a large number of vertical IoT platforms that are rarely interconnected. To enable creation of applications across platforms and domain boundaries interoperability needs to be established between IoT platforms. In this paper we present how this task can be simplified by utilizing a systematic software development process based on behavior- and domain-driven development. This process is illustrated using an example that uses the open source IoT interoperability framework symbIoTe to connect two indoor navigation platforms. We show that developers can actually profit from this approach but existing IoT interoperability frameworks are still cumbersome to use.	Internet of Things;IoT;interoperability;semantic interoperability;behavior-driven development;domain-driven design	M. Schneider; B. Hippchen; S. Abeck; M. Jacoby; R. Herzog	2018 Global Internet of Things Summit (GIoTS)					Included	Included	new_screen			2						
287	Behave	Mining reading patterns from eye-tracking data: method and demonstration	Understanding how developers interact with different software artifacts when performing comprehension tasks has a potential to improve developers’ productivity. In this paper, we propose a method to analyze eye-tracking data using process mining to find distinct reading patterns of how developers interacted with the different artifacts. To validate our approach, we conducted an exploratory study using eye-tracking involving 11 participants. We applied our method to investigate how developers interact with different artifacts during domain and code understanding tasks. To contextualize the reading patterns and to better understand the perceived benefits and challenges participants associated with the different artifacts and their choice of reading patterns, we complemented the eye-tracking data with the data obtained from think aloud. The study used behavior-driven development, a development practice that is increasingly used in Agile software development contexts, as a setting. The study shows that our method can be used to explore developers’ behavior at an aggregated level and identify behavioral patterns at varying levels of granularity. © 2019, Springer-Verlag GmbH Germany, part of Springer Nature.		Ioannou C., Nurdiani I., Burattin A., Weber B.	Software and Systems Modeling					Excluded	Excluded	new_screen			2						
288	Behave	Testing web applications with state objects	Use states to drive your tests.		Arie van Deursen	Communications of the ACM	https://doi.org/10.1145/2755501		36-43		Excluded	Excluded	new_screen			2	ACM		Testing Web Applications with State Objects	https://dl.acm.org/doi/10.1145/2755501	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
289	Behave	User interface prototype generation from agile requirements specifications written in concordia	User interface prototypes (UIP) are widely used to get feedback before building a software feature. They can prevent misunderstandings between the software development team and other stakeholders (e.g., users, investors) that lead to rework or a resulting software that does not meet their needs. UIP can also be a valuable resource in Agile software development, in which feedback is key. In this paper, we present an approach to generate UIP automatically from Agile requirements specifications written in Concordia and its corresponding prototype tool. The tool is able to generate UIP for web-based applications. We evaluated the approach and the tool with questionnaires, and the results revealed that: (i) the generated UIP are very similar to those drawn by respondents; (ii) the generated source code has good enough quality to be reused by developers; and (iii) they save design and development time.	agile; concordia; generation; user interface; user story	Thiago Delgado Pinto; Willian Inacio Goncalves; Pablo Veiga Costa	WebMedia '19: Proceedings of the 25th Brazillian Symposium on Multimedia and the Web	https://doi.org/10.1145/3323503.3360639		61-64		Included	Included	new_screen			2	ACM		User Interface Prototype Generation from Agile Requirements Specifications Written in Concordia	https://dl.acm.org/doi/10.1145/3323503.3360639	Association for Computing Machinery	nan; References; Year; Bibtex
290	Behave	Remote but Connected: Ownership-Inspired Behavior-Driven Development and What an E-Learning Governance System for Africa Could Look like	Using e-learning technology is one key for developing sustainable education in urban and remote areas in Western Africa as it reduced the demands on students who are well integrated in their rural society to leave their homes for an expensive education. In this chapter we present Ownership-inspired Behavior-Driven Development (OIBBD), a development strategy designed for e-learning governance in remote areas in Africa to support sustainable education as part of the agenda 2030 and the Sustainable Development Goals (SDGs) and show how the design of a User Experience (UX), which is based on user-centered design and feedback from the African target group can be used to support the implementation of e-learning in Africa. We reflect on how a governance for sustainable development in theological education on the African continent can look like. We ask how such an e-learning governance can support remote e-learning in hard to reach areas in Africa and how this can be designed specifically of the needs of the African socio-culture. The guiding hypothesis of this chapter is, that especially leadership and its activation in African teachers can trigger them to develop ownership in using e-learning technology and this way supports the reaching of SDG 4, which deals with sustainable education. © 2018, Springer International Publishing AG.		Gottschalk J., Winther-Nielsen N.	World Sustainability Series					Excluded	Excluded	new_screen			2						
291	Behave	Approach of integrating behaviour-driven development with hardware/software codesign	Using typical approaches in designing embedded systems to manage the specification and design of the hardware and software is not suitable in today’s projects. In this paper, we propose a model-driven approach to integrate Hardware/Software codesign with Behaviour-Driven Development. Hardware/Software codesign approach allows the hardware and the software to be designed and implemented concurrently and optimizes the project design constraint, such as performance and cost. Behaviour-Driven Development spurs project stakeholders to collaborate to ensure the right software is developed to meet their needs and ensures that all project participants communicate in the same language. The approach exploits the advantages of each approach and provides the ability to describe the behaviour of the software as executable user stories in a Hardware/Software codesign environment. The approach is evaluated using a renewable energy project in collaboration with a private company in Canada to build a system for autonomous load management of self-forming renewable energy nanogrids. © 2019, ICIC International. All righs reserved.		Alhaj M., Arbez G., Peyton L.	International Journal of Innovative Computing, Information and Control					Included	Included	new_screen			2						
292	Behave	Modeling test cases in BPMN for behavior-driven development (extended abstract)	Validating analytical business processes and testing executable ones are difficult task in process development projects. Within the project Terravis, which builds a process hub for enabling fully digitalized mortgage processes between Swiss land registries, banks, notaries and other parties, these tasks became problematic. For improving stakeholder communication and extending the test scope, behavior-driven development was adapted to BPMN and business processes. This technique was introduced and very well received within the project, leading to better process documentation and better tests.		Lübke D., Van Lessen T.	CEUR Workshop Proceedings					Excluded	Excluded	new_screen			2						
293	Behave	Chapter 11 - Validation of DEVS Models Using AGILE-Based Methods	Validation of discrete event system specification (DEVS) models at the early phases of the discrete-event modeling and simulation design process is a crucial topic when dealing with complex DEVS models. Based on software engineering test methods, we present in this chapter a new approach, which integrates Agile test methods in the process of the simulation in order to design and test DEVS models. We propose an implementation in Python language based on the use of aspect programming concepts (patch, mocking objects, and decorators). This implementation is performed in the framework of the DEVSimPy environment with the definition of a plug-in dedicated to the automatic generation and execution of test scenario.	Modeling, Simulation, Discrete event, Formalism, AGILE, Validation	Capocchi, L.; Santucci, J. F.						Excluded	Excluded	new_screen			2						
294	Behave	Gherkin Syntax Extension for Parameterization of Network Switch Configurations in Test Specification	We applied test automation in the style of Behavior-Driven Development (BDD), an agile software development technique. In applying BDD, the problem is that a large amount of similar configurations of network switches have to be written in the BDD test specification files. To solve this problem, parameterization of configurations is considered effective. However, Gherkin, the BDD test specification language, does not provide syntax for parameterization. In this paper, we propose a syntax extension of Gherkin, which enables parameterization of configurations. From experiments on 11 configurations, parameterization using the proposed syntax extension can reduce the number of the lines used to describe configurations by 39%.	Syntactics; Switches; Automation; Specification languages; Testing; Generators; Switching Network; Agile Development; Development Of Styles; Side Effects; Programming Language; Step Test; Transmission Frame; test specification; parameterization; BDD; Gherkin; syntax extension; network switch; configuration	Tianyao Li; Shigeru Tsubota; Koji Hirono	2017 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)	https://doi.org/10.1109/ISSREW.2017.30	1. [online]  Available: http://pythonhosted.org/behave/philosophy.html.; 2. [online]  Available: https://cucumber.io/.; 3. [online]  Available: http://pythonhosted.org/behave/index.html.			Included	Included	new_screen			2	IEEE		Gherkin Syntax Extension for Parameterization of Network Switch Configurations in Test Specification	https://ieeexplore.ieee.org/document/8109238	IEEE	nan; Pages; Year; Bibtex
295	Behave	Automation and consistency analysis of test cases written in natural language: An industrial context	We present here a novel test automation strategy that receives as input a freestyle natural language (NL) test case (consisting of a sequence of test steps) and produces executable test scripts. This strategy relies on a database of previously automated seed test steps, available for reuse. New steps are automated via a capturing process by a tester, without requiring any programming knowledge. Automated tests can be executed by a replay facility. We discuss the reuse improvement, implementation effort, and user feedback regarding the industrial applicability and usability of our capture & replay tool. We then show that restricting the input textual description to obey a proposed Controlled NL (CNL) brings significant advantages: (1) reuse improvement; (2) the possibility of integration with a test generation framework; and (3) definition of consistency notions for test actions and test action sequences, that ensure, respectively, well-formedness of each action and a proper configuration to safely execute a sequence of actions. We formalize these consistency notions in Alloy and use the Alloy Analyzer to carry out the consistency check; the scalability of the analysis is assessed via an evaluation considering a repository with real test cases; the practical context of our work is mobile device testing, involving a partnership with Motorola Mobility, a Lenovo company.	Test automation, Controlled natural language, Alloy, Test case consistency	Arruda, Filipe; Barros, Flávia; Sampaio, Augusto	Science of Computer Programming					Excluded	Excluded	new_screen			2						
296	Behave	Automatic acceptance testing of the web application security with ITU-T X.805 framework	Web application development companies should ensure the high quality of their products. This can be achieved through high quality of the software development lifecycle. Web applications are mostly running on the Internet and are being exposed to many security threats and malicious operations. The mission of EUCISE2020 project (EUropean test bed for the maritime Common Information Sharing Environment in the 2020 perspective) is to enhance interoperability between systems and networks. The interconnections must be established in a decentralized way using cutting-edge technologies. Hence, it requires innovative and practical solutions from the web development companies. The research problem is being addressed with the Stanford Research Institute NABC (Needs, Approach, Benefits and Competition) method. Our approach is to conceptualize a testing scenario for the web application development process. The concept utilizes the International Telecommunication Union recommended standard security framework (ITU-T X.805) in the context of test automation for end-to-end communications. This study presents a new holistic solution in feature driven fashion. As a result, we propose that building acceptance test scenarios using ITU-T X.805 guidelines in Software Development Lifecycle is a sustainable approach.	Buildings; Companies; Testing; Guidelines; Security; Web Application; Testing Tools; Acceptable Test; Development Process; Software Development; Processing Software; Security Threats; Test Scenarios; Security Framework; Security Standards; Service Providers; Service Quality; Web Server; Cucumber; Architectural Design; Data Exchange; Consumption Of Services; Information Security; Business Processes; Vulnerability Assessment; Service-oriented Architecture; Agile Development; Secure Communication; Security Architecture; Dimensions Of Security; Security Mechanisms; Present Ideas; Significant Number Of Participants; EUCISE 2020; ITU-T Recommendation X.805; NABC analysis; web application development; automated testing scenario; behavior-driven development (BDD)	Paresh Rathod; Viljami Julkunen; Tero Kaisti; Janne Nissila	2015 Second International Conference on Computer Science, Computer Engineering, and Social Media (CSCESM)	https://doi.org/10.1109/CSCESM.2015.7331876	"1.D. Rafi, K. Moses, K. Petersen and M. Mantyla, ""Benefits and limitations of automated software testing: Systematic literature review and practitioner survey"", 7th International Workshop on Automation of Software Test (AST), pp. 36-42, 2012. Google Scholar; 2.Governing Europe's Marine Environment: Europeanization of Regional Seas or Regionalization of EU Policies?, Ashgate Publishing, Ltd., 2015. Google Scholar; 3.M. Papazoglou, Web Services and SOA: Principles and Technology, Canada:Pearson Education, 2012. Google Scholar; 4.T. Erl, SOA: Principles of Service Design, Upper Saddle River:Prentice Hall, 2008. Google Scholar; 5.D. Winder, ""The Network Cheat Sheet - ISO 27001"", PC Pro, pp. 108, Feb 2015. Google Scholar; 6.International Telecommunication Union Security Architecture for Systems Providing End-to-End Communications ITU-T Rec. X.805, 2003. Google Scholar; 7.C. Solari, Security in a Web 2.0 World: A Standards-Based Approach. John Wiley & Sons, 2009. Google Scholar; 8.K. Beck, M. Beedle, A. Van, A. Cockburn, W. Cunningham, M. Fowler, et al., ""Manifesto for agile software development"", 2001. Google Scholar; 9.P. Abrahamsson, J. Warsta, M. Siponen and J. Ronkainen, ""New directions on agile methods: a comparative analysis"", Proceedings. 25th International Conference on Software Engineering, 2003. View Article  Google Scholar; 10.C. R. Carlson and W. W. Wilmot, Innovation: The Five Disciplines for Creating what Customers Want. Crown Business, 2006. Google Scholar; 11.J. Granneman, (2013 September) IT security frameworks and standards: Choosing the right one. TechTarget Network. Google Scholar; 12.C. Geuer-Pollmann and J. Claessens, ""Web services and web service security standards"", Information Security Technical Report, vol. 10, no. 1, pp. 15-24, 2005. CrossRef  Google Scholar; 13.L. Kagal, T. Finin and A. Joshi, ""A policy based approach to security for the semantic web"", International Semantic Web Conference, pp. 402-418, 2003. CrossRef  Google Scholar; 14.A. K. Gupta, U. Chandrashekhar, S. V. Sabnis and F. A. Bastry, ""Building secure products and solutions"", Bell Labs Technical Journal, vol. 12, pp. 21-38, 2007. CrossRef  Google Scholar; 15.M. Wynne and A. Hellesoy, The Cucumber Book: Behaviour-Driven Development for Testers and Developers. Pragmatic Bookshelf, 2012. Google Scholar; 16.P Nastase, F. Nastase and C. Ionescu, ""Challenges generated by the implementation of the IT standards CobiT 4.1 ITIL v3 and ISO/IEC 27002 in enterprises"", Economic Computation & Economic Cybernetics Studies & Research, vol. 43, no. 1, pp. 16, 2009. Google Scholar"			Excluded	Excluded	new_screen			2	IEEE		Automatic acceptance testing of the web application security with ITU-T X.805 framework	https://ieeexplore.ieee.org/document/7331876	IEEE	nan; Pages; Year; Bibtex
297	Behave	Testing of Web Services Using Behavior-Driven Development	Web services are commonly used in the communication of software over the web. To fully trust a web service, it should be tested and certified, but testing of web services provoke new challenges. Behavior-Driven Development (BDD) can be applied to the testing of web services. Gherkin language is used to define scenarios in BDD. We used Gherkin language to define test cases for web services and we developed a tool to convert these test cases into JMeter test scripts.	Behavior-Driven Development; Software Testing; Gherkin; JMeter; Testing of Web Services; Web Services.	Oruç, Ahmet Furkan; Ovatman, Tolga	Proceedings of the 6th International Conference on Cloud Computing and Services Science - Volume 1 and 2					Included	Included	new_screen			2						
298	Behave	ScrumOntoBDD: Agile software development based on scrum, ontologies and behaviour-driven development	When developing a Learning Management System (LMS) using Scrum, we noticed that it was quite often necessary to redefine some system behaviour scenarios, due to ambiguities in the requirement specifications, or due to misinterpretations of stories reported by the Product Owners (POs). The definition of test suites was also cumbersome, resulting in test suites that were incomplete or did not at all comply with the system requirements. Based on this experience and to deal with these problems, in this paper, we propose the ScrumOntoBDD approach to agile software development, which combines Scrum, ontologies and Behaviour-Driven Development (BDD). This approach is centred on the concepts and techniques of Scrum and BDD and focuses on the planning and analysis phases of the software life cycle, since the BDD tools currently provide little support to these phases, while most of the problems during the LMS development were found exactly there. We claim that our approach improves the software development practices in this respect. Furthermore, ScrumOntoBDD employs ontologies in order to reduce ambiguities intrinsic to the use of a natural language as a BDD ubiquitous language. In this paper, we illustrate and systematically evaluate our approach, showing that it is beneficial since it improves the communication between members of an agile development team. © 2021, The Author(s).		Lopes de Souza P., Lopes de Souza W., Ferreira Pires L.	Journal of the Brazilian Computer Society					Included	Included	new_screen			2						
299	Behave	Formal Model Validation Through Acceptance Tests	When formal systems modelling is used as part of the development process, modellers need to understand the requirements in order to create appropriate models, and domain experts need to validate the final models to ensure they fit the needs of stakeholders. A suitable mechanism for such a validation are acceptance tests. In this paper we discuss how the principles of Behaviour-Driven Development (BDD) can be applied to (i) formal modelling and (ii) validation of behaviour specifications, thus coupling those two tasks. We show how to close the gap between the informal domain specification and the formal model, thus enabling the domain expert to write acceptance tests in a high-level language matching the formal specification. We analyse the applicability of this approach by providing the Gherkin scenarios for an formal model of a ‘fixed virtual block’ approach to train movement control, developed according to the Hybrid ERTMS/ETCS Level 3 principles specified by the EEIG ERTMS Users Group and presented as a case study on the 6. International ABZ Conference 2018. © 2019, Springer Nature Switzerland AG.		Fischer T., Dghyam D.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
300	Behave	Executable requirements in a safety-critical context with Ada	When people who need the software and people who build the software do not understand each other, the success of a project may be impacted. In the same way, when it is difficult to know which test case corresponds to a given requirement, or if each and every requirement is fully covered by the test suite, we have a traceability issue that may also impact the success of the project. During the last few years, the agile community has suggested a new development paradigm in order to address this traceability issue. This approach is called Behaviour Driven Development (BDD). It is based on a new way of expressing requirements using a common language understandable by all parties at stake. After having described the Behaviour Driven Development in details, we introduce the XReq tool, an Open Source project developed by SOGILIS and part of the Open-DO project. It is designed to bring the Behaviour Driven Development to the Ada language and other statically typed languages. It also aims at facilitating the traceability of High and Low Level Tests in the context of DO-178B projects.		Bâillon C., Bouchez-Mongardé S.	Ada User Journal					Included	Included	new_screen			2						
301	Behave	Creation of multiple conceptual models from user stories – a natural language processing approach	While Agile methodologies are used in software development, researchers have identified many issues related to requirements engineering in Agile approaches. Some of these issues relate to ambiguity in user stories, which is a widely-used requirements specification mechanism in Agile methodologies. This research proposes the use of conceptual models while developing user stories. We posit that the use of conceptual models helps reducing ambiguity in user stories. An important aspect of our research is the creation of an algorithm for automatic generation of such models while developing the user stories. © Springer Nature Switzerland AG 2019.		Gupta A., Poels G., Bera P.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Excluded	Excluded	new_screen			2						
302	Behave	Test Automation with the Gauge Framework: Experience and Best Practices	While Behavior-driven development (BDD) tools such as Cucumber are powerful tools for automated testing, they have certain limitations. For example, they often enforce strict syntax for test cases, like the “Given-When-Then” format, which may not always be easy to write for a given test case. A new test automation framework named Gauge (gauge.org) addresses that limitation since it does not prescribe the BDD testing process with a strict syntax. In Gauge, writing a test case is as easy as writing down the flow of test cases in several itemized sentences in a natural language, like English. In the context of Testinium (testinium.com), a large software testing company which provides software testing services, tools and solutions to a large number of clients, we have actively used the Gauge framework since 2018 to develop large automated front-end test suites for several large web applications. In this paper/talk, the speakers will share several examples and best practices of developing automated tests in natural-language requirements using the Gauge framework. By learning from the ideas presented in the talk, readers (attendees) will be able to consider applying the Gauge framework in their own test automation projects. © 2020, Springer Nature Switzerland AG.		Garousi V., Keleş A.B., Balaman Y., Güler Z.Ö.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Excluded	Excluded	new_screen			2						
303	Behave	Leveraging Semi-formal Approaches for DepDevOps	While formal methods have long been praised by the dependable Cyber-Physical System community, continuous software engineering practices are now employing or promoting semi-formal approaches for achieving lean and agile processes. This paper is a discussion about using Behaviour Driven Development, particularly Gherkin and RSpec for DepDevOps, DevOps for dependable Cyber-Physical Systems. © 2020, Springer Nature Switzerland AG.		Zaeske W., Durak U.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)					Included	Included	new_screen			2						
304	Behave	FormTester:effective integration of model-based and manually specified test cases	Whilst Model Based Testing (MBT) is an improvement over manual test specification, the leap from it to MBT can be hard. Only recently MBT tools for web applications have emerged that can recover models from existing manually specified test cases. However, there are further requirements for supporting both MBT and manually specified tests. First, we need support for the generation of test initialization procedures. Also, we want to identify areas of the system that are not testable due to defects. We present FormTester, a new MBT tool addressing these limitations. An evaluation with real web applications shows that FormTester helps to reduce the time spent on developing test cases.		Rahul Dixit; Christof Lutteroth; Gerald Weber	ICSE '15: Proceedings of the 37th International Conference on Software Engineering - Volume 2	https://doi.org/10.5555/2819009.2819154		745-748		Excluded	Excluded	new_screen			2	ACM		FormTester: Effective Integration of Model-Based and Manually Specified Test Cases	https://dl.acm.org/doi/10.5555/2819009.2819154	IEEE Press	nan; Keywords; References; Year; Bibtex
305	Behave	Software Automation Testing Secrets Revealed	Widely acknowledged one of the best practical guide to software test automation, Narayanan Palani's Automation Labs has been helping freshers write better automation test scripts for the last three years! Now this classic book has been fully updated and revised with leading-testing tools–and hundreds of new script samples–illustrating the art and science of automation testing. Capturing the body of knowledge available from strong professional experience and industry best practices, Palani synthesizes the most effective techniques and must-know principles into clear, pragmatic guidance. No matter what your experience level,test environment, or project size, this book will inform and stimulate your thinking–and help you build the highest quality automation scripts. Discover the timeless techniques and framework designing methods that help you:Design for TestNG, Visual Studio, Jenkins, Excel VBA, Selenium, HP UFT (formerly QTP), Ranorex, RFT and other wide ranged QA Testing Tools. Reap the benefits of well built selenium webdriver automation framework! Apply powerful programming techniques to build well-estabilished data driven framework, keyword driven framework, hybrid framework, Agile Continuous Integration Automation Framework. Exploit opportunities to design Web services based SOAP Automation Frameworks with the help of SOA, ETL basics and SQL Automation scripts to validate Database Systems! Use construction practices using Object Recognition Technology of test automation tools and capture dynamic web elements. Debug problems in software development life cycle to improve testing process using test estimation techniques, tool selection process. Build quality automation scripts by understanding the machine learning basics of selenium automation framework Resolve automation issues and introduce cucumber, Specflow based Behaviour Driven Development and Test Driven Development in functional testing.		Palani, Narayanan						Excluded	Excluded	new_screen			2						
306	Behave	ATDD by Example: A Practical Guide to Acceptance Test-Driven Development	With Acceptance Test-Driven Development (ATDD), business customers, testers, and developers can collaborate to produce testable requirements that help them build higher quality software more rapidly. However, ATDD is still widely misunderstood by many practitioners. ATDD by Example is the first practical, entry-level, hands-on guide to implementing and successfully applying it. ATDD pioneer Markus Grtner walks readers step by step through deriving the right systems from business users, and then implementing fully automated, functional tests that accurately reflect business requirements, are intelligible to stakeholders, and promote more effective development. Through two end-to-end case studies, Grtner demonstrates how ATDD can be applied using diverse frameworks and languages. Each case study is accompanied by an extensive set of artifacts, including test automation classes, step definitions, and full sample implementations. These realistic examples illuminate ATDDs fundamental principles, show how ATDD fits into the broader development process, highlight tips from Grtners extensive experience, and identify crucial pitfalls to avoid. Readers will learn to Master the thought processes associated with successful ATDD implementationUse ATDD with Cucumber to describe software in ways businesspeople can understand Test web pages using ATDD toolsBring ATDD to Java with the FitNesse wiki-based acceptance test framework Use examples more effectively in Behavior-Driven Development (BDD)Specify software collaboratively through innovative workshopsImplement more user-friendly and collaborative test automationTest more cleanly, listen to test results, and refactor tests for greater value If youre a tester, analyst, developer, or project manager, this book offers a concrete foundation for achieving real benefits with ATDD nowand it will help you reap even more value as you gain experience.		Grtner, Markus; Grtner, Markus						Excluded	Excluded	new_screen			2						
307	Behave	A serious gaming framework for decision support on hydrological hazards	With increasing population and human intervention on the natural environment, hazards are a growing threat, coming in many forms, including floods, droughts, soil erosion, and water pollution. A key approach to mitigate hydrological disaster risk at the community level is informed planning with decision support systems. The literature shows emerging efforts on multi-hazard decision support systems for hydrological disasters and demonstrates the need for an engaging, accessible, and collaborative serious game environment facilitating the relationship between the environment and communities. In this study, a web-based decision support tool (DST) was developed for hydrological multi-hazard analysis while employing gamification techniques to introduce a competitive element. The serious gaming environment provides functionalities for intuitive management, visualization, and analysis of geospatial, hydrological, and economic data to help stakeholders in the decision-making process regarding hydrological hazard preparedness and response. Major contributions of the presented DST include involving the community in environmental decision making by reducing the technical complexity required for analysis, increasing community awareness for the environmental and socio-economic consequences of hydrological hazards, and allowing stakeholders to discover and discuss potential trade-offs to hazardous scenarios considering the limitations in budget, regulations, and technicality. The paper describes the software design approaches and system architecture applied for a modular, secure, and scalable software as well as the framework's intuitive web-based user interfaces for real-time and collaborative data analysis and damage assessment. Finally, a case study was conducted to demonstrate the usability of DST in a formal setting and to measure user satisfaction with surveys.	Serious games, Multi-hazard tournament, Decision support systems, Hydrological data management and visualization, Web-based systems	Sermet, Yusuf; Demir, Ibrahim; Muste, Marian	Science of The Total Environment					Excluded	Excluded	new_screen			2						
308	Behave	Towards accountability driven development for machine learning systems	With rapid deployment of Machine Learning (ML) systems into diverse domains such as healthcare and autonomous driving, important questions regarding accountability in case of incidents resulting from ML errors remain largely unsolved. To improve accountability of ML systems, we introduce a framework called Accountability Driven Development (ADD). Our framework reuses Behaviour Driven Development (BDD) approach to describe testing scenarios and system behaviours in ML Systems’ development using natural language, guides and forces developers and intended users to actively record necessary accountability information in the design and implementation stages. In this paper, we illustrate how to transform accountability requirements to specific scenarios and provide syntax to describe them. The use of natural language allows non technical collaborators such as stakeholders and non ML domain experts deeply engaged in ML system development to provide more comprehensive evidence to support system’s accountability. This framework also attributes the responsibility to the whole project team including the intended users rather than putting all the accountability burden on ML engineers only. Moreover, this framework can be considered as a combination of both system test and acceptance test, thus making the development more efficient. We hope this work can attract more engineers to use our idea, which enables them to create more accountable ML systems. Copyright © 2021 for this paper by its authors.		Fung C.P., Pang W., Naja I., Markovic M., Edwards P.	CEUR Workshop Proceedings					Included	Included	new_screen			2						
309	Behave	Automated acceptance test refactoring	With the increasing popularity of agile software development and Test-Driven-Development, also maintenance of acceptance test has become an important issue. In this paper, we describe a concept and a tool for automated acceptance test maintenance using a refactoring approach. Acceptance tests are user tests which are used to determine if a system satisfies acceptance criteria and to enable a customer to determine whether or not to accept the system. In agile development acceptance test are also used as a mean for specification, i.e. acceptance tests are written in advance to the production code (called Behavior-Driven-Development - BDD). In an agile project this poses three major challenges with respect to maintenance of acceptance tests: new requirements may cause changes in the acceptance criteria, which require the system under test to be adapted; when the system under test undergoes a major restructuring, even the acceptance test might have to be adapted; with the increasing acceptance test suite in an agile project the tests themselves may undergo a major reorganization. Having a large acceptance test base, doing these refactorings manually is error prone and causes a lot of effort. In this paper we present a concept and tool for executing automated refactoring for Fit acceptance tests, which significantly reduces the effort for test maintenance and makes them much less error prone.	acceptance test; automation; eclipse; maintenance; plug-in; refactoring	Rodrick Borg; Martin Kropp	WRT '11: Proceedings of the 4th Workshop on Refactoring Tools	https://doi.org/10.1145/1984732.1984736		15-21		Excluded	Excluded	new_screen			2	ACM		Automated Acceptance Test Refactoring	https://dl.acm.org/doi/10.1145/1984732.1984736	Association for Computing Machinery	nan; References; Year; Bibtex
310	Behave	Automated acceptance test refactoring	With the increasing popularity of agile software development and Test-Driven-Development, also maintenance of acceptance test has become an important issue. In this paper, we describe a concept and a tool for automated acceptance test maintenance using a refactoring approach. Acceptance tests are user tests which are used to determine if a system satisfies acceptance criteria and to enable a customer to determine whether or not to accept the system. In agile development acceptance test are also used as a mean for specification, i.e. acceptance tests are written in advance to the production code (called Behavior-Driven-Development - BDD). In an agile project this poses three major challenges with respect to maintenance of acceptance tests: new requirements may cause changes in the acceptance criteria, which require the system under test to be adapted; when the system under test undergoes a major restructuring, even the acceptance test might have to be adapted; with the increasing acceptance test suite in an agile project the tests themselves may undergo a major reorganization. Having a large acceptance test base, doing these refactorings manually is error prone and causes a lot of effort. In this paper we present a concept and tool for executing automated refactoring for Fit acceptance tests, which significantly reduces the effort for test maintenance and makes them much less error prone. Copyright 2011 ACM.		Borg R., Kropp M.	WRT 2011 - Proceedings of the 4th Workshop on Refactoring Tools, co-located with ICSE 2011					Excluded	Excluded	new_screen			2						
311	Behave	Building Applications with Scala	Write modern, scalable, and reactive applications with the power of ScalaAbout This BookDelves into the intricacies of functional reactive programming with ScalaExplores frameworks like Akka, Play and Slick used to develop efficient applications A step by step guide with plenty of examples showing practical implementation of essential concepts Who This Book Is ForIf you are a Java or JVM developer who wants to use Scala to build reactive functional applications for the JVM platform, then this book is for you. Prior knowledge of Java or functional programing would help. No Scala knowledge is required. What You Will Learn Use Akka to create a chat service for your appEquip yourself with the techniques and tools to build reports and build database persistence with Scala and Slick Develop a customer-facing Rest API that makes use of Scala and SprayMake use of the Scala web development principles and scale up the architecture of your applicationGet familiar with the core principles and concepts of Functional Programming Use the Play framework to create models, controllers, and views Develop reactive backing frameworks by writing code with RxScala Discover what proper testing entails with Scala using behavior-driven development In DetailScala is known for incorporating both object-oriented and functional programming into a concise and extremely powerful package. However, creating an app in Scala can get a little tricky because of the complexity the language has. This book will help you dive straight into app development by creating a real, reactive, and functional application. We will provide you with practical examples and instructions using a hands-on approach that will give you a firm grounding in reactive functional principles. The book will take you through all the fundamentals of app development within Scala as you build an application piece by piece. We've made sure to incorporate everything you need from setting up to building reports and scaling architecture. This book also covers the most useful tools available in the Scala ecosystem, such as Slick, Play, and Akka, and a whole lot more. It will help you unlock the secrets of building your own up-to-date Scala application while maximizing performance and scalability. Style and approach This book takes a step-by-step approach to app development with Scala. It will place special emphasis on functional language. It will teach you the core benefits of Scala and the fundamentals of functional programming by developing a robust application.		Pacheco, Diego						Excluded	Excluded	new_screen			2						
312	Behave	Documentation by example	Writing documentation can be fun and rewarding, but keeping up with an ever-changing system can take a toll on that joy. The documentation tends to get either expensive (duplication-intense), outdated or non-existing. This demonstration will present an open source tool that addresses these shortcomings by extending the BDD[1] approach to provide rich and human readable documents automatically from a JUnit[2] test suite. You'll learn how to include snippets, run-time data and more in your documents, all this with minimal effort and intrusion. This approach is suitable both for APIs and GUIs, as will be shown. © 2009 Springer Berlin Heidelberg.		Brolund D.	Lecture Notes in Business Information Processing					Included	Included	new_screen			2						
313	Behave	Discovery: Explore Behaviour Using Examples (Volume 1)	Written by the creator of SpecFlow and the author of The Cucumber for Java Book, this book provides inside information on how to get the most out of the discovery phase of Behaviour Driven Development (BDD). This practical guide demonstrates good collaboration techniques, illustrated by concrete examples. This book is written for everyone involved in the specification and delivery of software (including product owners, business analysts, developers, and testers). The book starts by explaining the reasons BDD exists in the first place and describes techniques for getting the most out of collaboration between business and delivery team members. This is the first in the BDD Books series that will guide you through the entire development process, including specific technical practices needed to successfully drive development using collaboratively-authored specifications and living documentation.		Nagy, Gaspar; Rose, Seb						Excluded	Excluded	new_screen			2						
314	Behave	The RSpec Book: Behaviour Driven Development with Rspec, Cucumber, and Friends	"You'll get started right away with RSpec 2 and Cucumber by developing a simple game, using Cucumber to express high-level requirements in language your customer understands, and RSpec to express more granular requirements that focus on the behavior of individual objects in the system. You'll learn how to use test doubles (mocks and stubs) to control the environment and focus the RSpec examples on one object at a time, and how to customize RSpec to ""speak"" in the language of your domain. You'll develop Rails 3 applications and use companion tools such as Webrat and Selenium to express requirements for web applications both in memory and in the browser. And you'll learn to specify Rails views, controllers, and models, each in complete isolation from the other. Whether you're developing applications, frameworks, or the libraries that power them, The RSpec Book will help you write better code, better tests, and deliver better software to happier users."		Chelimsky, David; Astels, Dave; Helmkamp, Bryan; North, Dan; Dennis, Zach; Hellesoy, Aslak						Excluded	Excluded	new_screen			2						
315	Behave	The Cucumber Book: Behaviour-Driven Development for Testers and Developers	Your customers want rock-solid, bug-free software that does exactly what they expect it to do. Yet they can't always articulate their ideas clearly enough for you to turn them into code. The Cucumber Book dives straight into the core of the problem: communication between people. Cucumber saves the day; it's a testing, communication, and requirements tool - all rolled into one. We'll show you how to express your customers' wild ideas as a set of clear, executable specifications that everyone on the team can read. You'll learn how to feed those examples into Cucumber and let it guide your development. You'll build just the right code to keep your customers happy, and not a line more. The first part of the book teaches you how to use the core features of Cucumber. You'll learn how to use Cucumber's Gherkin DSL to describe– in plain language - the behavior your customers want from the system. You'll learn how to write Ruby code that interprets those plain language specifications and checks them against your application. In Part 2, you'll consolidate the knowledge you just gained with a worked example. Although it was born in the Ruby community, you can use Cucumber to test almost any system, from a simple shell script or a Perl script, to enterprise PHP or a Java web application. In Part 3, you'll find a selection of recipes for some of the most common situations you'll encounter using Cucumber in the wild. You'll learn how to test Ajax-heavy web applications with Capybara and Selenium, REST web services, Ruby on Rails applications, command-line applications, legacy applications and lots more! Written by the creator of Cucumber and one of its most experienced users and contributors, The Cucumber Book is an authoritative guide that will give you and your team all the knowledge you need to start using Cucumber with confidence. What You Need: Windows, Mac OS X (with XCode) or Linux Ruby 1.9.2 and upwards		Wynne, Matt; Hellesoy, Aslak						Excluded	Excluded	new_screen			2						
316	Behave	A Basic Spring Boot Application	http://link.springer.com/chapter/10.1007/978-1-4842-6131-6_3	specific testing technologies/languages	Moisés Macero García						Excluded	Excluded	new_screen			2						
317	Behave	A Beginner's Guide to Scala, Object Orientation and Functional Programming		specific testing technologies/languages	Dr. John Hunt						Excluded	Excluded	new_screen			2						
318	Behave	A Circumstantial Methodological Analysis of Recent Studies on NLP-driven Test Automation Approaches	http://link.springer.com/chapter/10.1007/978-981-33-6081-5_14	NLP in testing	Atulya GuptaRajendra Prasad Mahapatra						Excluded	Excluded	new_screen			2						
319	Behave	A distributable event-oriented architecture for activity recognition in smart homes	http://link.springer.com/article/10.1007/s40860-020-00125-y		Cédric DemongivertKévin BouchardSébastien GabouryBruno BouchardMaxime LussierMaxime ParenteauCatherine LalibertéMélanie CoutureNathalie BierSylvain Giroux						Excluded	Excluded	new_screen			2						
320	Behave	A domain-specific language to design false data injection tests for air traffic control systems	http://link.springer.com/article/10.1007/s10009-021-00604-4		Alexandre VernotteAymeric CretinBruno LegeardFabien Peureux						Excluded	Excluded	new_screen			2						
321	Behave	A Dynamic System Model Using Agile Method Techniques Applied to Geomatics	http://link.springer.com/chapter/10.1007/978-3-030-33229-7_7		René Rodríguez ZamoraÁlvaro Peraza GarzónIliana Amabely Silva Hernández						Excluded	Excluded	new_screen			2						
322	Behave	A Four-Leaf Clover Shape Methodology for Prosumer Service Developments	http://link.springer.com/chapter/10.1007/978-3-319-13102-3_78		Diego MartínRamon AlcarriaAlvaro Sánchez-PicotTomás RoblesDiego Sánchez de Rivera						Excluded	Excluded	new_screen			2						
323	Behave	A Lightweight Semi-automated Acceptance Test-Driven Development Approach for Web Applications	http://link.springer.com/chapter/10.1007/978-3-319-38791-8_55		Diego ClerissiMaurizio LeottaGianna ReggioFilippo Ricca						Excluded	Excluded	new_screen			2						
324	Behave	A Literature Review on Story Test Driven Development	http://link.springer.com/chapter/10.1007/978-3-642-13054-0_20		Shelly ParkFrank Maurer						Excluded	Excluded	new_screen			2						
325	Behave	A New Ontology-Based Approach for Construction of Domain Model	http://link.springer.com/chapter/10.1007/978-3-319-54472-4_8		Bogumiła HnatkowskaZbigniew HuzarLech TuzinkiewiczIwona Dubielewicz						Excluded	Excluded	new_screen			2						
326	Behave	A scalable Cloud-based system for data-intensive spatial analysis	http://link.springer.com/article/10.1007/s10009-015-0398-6		R. O. SinnottW. Voorsluys						Excluded	Excluded	new_screen			2						
327	Behave	A Survey on Agile Practices and Challenges of a Global Software Development Team	http://link.springer.com/chapter/10.1007/978-3-030-36701-5_11		Tatiane LautertAdolfo Gustavo Serra Seca NetoNádia P. Kozievitch						Excluded	Excluded	new_screen			2						
328	Behave	A Systematic Approach to Automatically Derive Test Cases from Use Cases Specified in Restricted Natural Languages	http://link.springer.com/chapter/10.1007/978-3-319-11743-0_10		Man ZhangTao YueShaukat AliHuihui ZhangJi Wu						Excluded	Excluded	new_screen			2						
329	Behave	A Taxonomy on Continuous Integration and Deployment Tools and Frameworks	http://link.springer.com/chapter/10.1007/978-3-030-63329-5_22		Patricia Ortegon CanoAyrton Mondragon MejiaSilvana De Gyves AvilaGloria Eva Zagal DominguezIsmael Solis MorenoArianne Navarro Lepe						Excluded	Excluded	new_screen			2						
330	Behave	A Test Specification Language for Information Systems Based on Data Entities, Use Cases and State Machines	http://link.springer.com/chapter/10.1007/978-3-030-11030-7_20		Alberto Rodrigues da SilvaAna C. R. PaivaValter E. R. da Silva						Excluded	Excluded	new_screen			2						
331	Behave	A Textual Domain Specific Language for User Interface Modelling	http://link.springer.com/chapter/10.1007/978-1-4614-3558-7_84		Mart Karu						Excluded	Excluded	new_screen			2						
332	Behave	A Very Brief History of Test-Driven Development	http://link.springer.com/chapter/10.1007/978-1-4842-6972-5_1	General books on testing	Juntao Qiu						Excluded	Excluded	new_screen			2						
333	Behave	Lean-agile acceptance test-driven development:better software through collaboration by Ken Pugh	No abstract available.		Gary Downs	ACM SIGSOFT Software Engineering Notes	https://doi.org/10.1145/1988997.1989006				Excluded	Excluded	new_screen			2	ACM		Acceptance Test Driven Development	https://dl.acm.org/doi/10.1145/1988997.1989006	Association for Computing Machinery	nan; Keywords; References; Pages; Year; Bibtex
334	Behave	Acceptance tests for validating ARIA requirements in widgets	http://link.springer.com/article/10.1007/s10209-015-0437-9		Willian Massami WatanabeRenata P. M. FortesAna Luiza Dias						Excluded	Excluded	new_screen			2						
335	Behave	Adopting Agile Software Development Combined with User-Centered Design and Lean Startup: A Systematic Literature Review on Maturity Models	http://link.springer.com/chapter/10.1007/978-3-030-75418-1_24		Maximilian ZorzettiCassiano MorallesLarissa SalernoEliana PereiraSabrina MarczakRicardo Bastos						Excluded	Excluded	new_screen			2						
336	Behave	Advanced Guide to Python 3 Programming	http://link.springer.com/book/10.1007/978-3-030-25943-3	Concurrent Python; Games in Python; Databases in Python; Reactive Programming; Python Graphics and Graphical User Interfaces; Graphics; Games; Databases; Logging; Concurrency; Advanced Language Concepts; Networking and Data Science	John Hunt		https://link.springer.com/book/10.1007/978-3-031-40336-1				Excluded	Excluded	new_screen			2	SpringerLink		Advanced Guide to Python 3 Programming	https://link.springer.com/book/10.1007/978-3-031-40336-1	Springer Link	nan; Venue; Abstract; References; Pages; Year; Bibtex
337	Behave	Advances in infrastructures and tools for multiagent systems	http://link.springer.com/article/10.1007/s10796-014-9493-6		Juan M. AlberolaVicent BottiJose M. Such						Excluded	Excluded	new_screen			2						
338	Behave	Agile Android	http://link.springer.com/chapter/10.1007/978-1-4302-5858-2_4		Godfrey NolanOnur CinarDavid Truxall						Excluded	Excluded	new_screen			2						
339	Behave	Agile Practices in Azure DevOps and TFS	http://link.springer.com/chapter/10.1007/978-1-4842-4483-8_6		Joachim Rossberg						Excluded	Excluded	new_screen			2						
340	Behave	Agile Practices, Collaboration and Experience	https://link.springer.com/chapter/10.1007/978-3-319-49094-6_28		Martin KroppAndreas MeierRobert Biddle						Excluded	Excluded	new_screen			2						
341	Behave	Agile Test Automation			Manfred BaumgartnerMartin KlonkChristian MastnakHelmut PichlerRichard SeidlSiegfried Tanczos						Excluded	Excluded	new_screen			2						
342	Behave	An Empirical Study of Agile Testing in A Distributed Software Development Project	The software engineering industry has witnessed an increasing number of innovative methods and practices in the last decade at different levels, ranging from development processes to software projects and from testing to verification software products. Extensive studies have been conducted empirically to investigate and discuss the impact of using agile principles in the testing process on distributed teams across geographical boundaries. This empirical study has a similar focus, using a real case study in a distributed domain and applying agile testing to a selected team, compares their outcome with another three teams to determine the impact of involving a client in a testing process to overcome distributed development challenges. The findings indicate a highly positive impact on team productivity when using agile tests as compared with other groups using central distributed team testing. All teams met a 90% testing requirement. However, the group applying agile testing verified more than 99% of all requests entered into the testing process, a notable difference supporting the productivity of any development project.	Agile Development; Case study; Distributed Software Development (DSD); Empirical study; Global Software Development (GSD); Software Testing	Abdulrahman M. Qahtani	ICGDA '20: Proceedings of the 2020 3rd International Conference on Geoinformatics and Data Analysis	https://doi.org/10.1145/3397056.3397085		110-114		Excluded	Excluded	new_screen			2	ACM		Agile Testing	https://dl.acm.org/doi/10.1145/3397056.3397085	Association for Computing Machinery	nan; References; Year; Bibtex
343	Behave	An Agile Approach to Requirement Specification	http://link.springer.com/chapter/10.1007/978-3-540-73101-6_35		Tom J. Bang						Excluded	Excluded	new_screen			2						
344	Behave	An architecture governance approach for Agile development by tailoring the Spotify model	http://link.springer.com/article/10.1007/s00146-021-01240-x		Abdallah SalamehJulian M. Bass						Excluded	Excluded	new_screen			2						
345	Behave	An Automated Approach for Acceptance Web Test Case Modeling and Executing	http://link.springer.com/chapter/10.1007/978-3-642-13054-0_12		Felipe M. BessonDelano M. BederMarcos L. Chaim						Excluded	Excluded	new_screen			2						
346	Behave	An autonomous performance testing framework using self-adaptive fuzzy reinforcement learning	http://link.springer.com/article/10.1007/s11219-020-09532-z		Mahshid Helali MoghadamMehrdad SaadatmandMarkus BorgMarkus BohlinBjörn Lisper						Excluded	Excluded	new_screen			2						
347	Behave	An Empirical Study on the Adoption of Agile Software Development in Public Organizations	https://link.springer.com/chapter/10.1007/978-3-319-55907-0_1		Isaque VacariRafael Prikladnicki						Excluded	Excluded	new_screen			2						
348	Behave	An Exploratory Study on Applying a Scrum Development Process for Safety-Critical Systems	http://link.springer.com/chapter/10.1007/978-3-319-69926-4_23		Yang WangJasmin RamadaniStefan Wagner						Excluded	Excluded	new_screen			2						
349	Behave	An Overview of Requirements Evolution	http://link.springer.com/chapter/10.1007/978-3-642-45398-4_1		Neil ErnstAlexander BorgidaIvan J. JuretaJohn Mylopoulos						Excluded	Excluded	new_screen			2						
350	Behave	AngularJS in the wild: a survey with 460 developers	To implement modern web applications, a new family of JavaScript frameworks has emerged, using the MVC pattern. Among these frameworks, the most popular one is ANGULARJS, which is supported by Google. In spite of its popularity, there is not a clear knowledge on how ANGULARJS design and features affect the development experience of Web applications. Therefore, this paper reports the results of a survey about ANGULARJS, including answers from 460 developers. Our contributions include the identification of the most appreciated features of ANGULARJS (e.g., custom interface components, dependency injection, and two-way data binding) and the most problematic aspects of the framework (e.g., performance and implementation of directives).	AngularJS; JavaScript; MVC frameworks	Miguel Ramos; Marco Tulio Valente; Ricardo Terra; Gustavo Santos	PLATEAU 2016: Proceedings of the 7th International Workshop on Evaluation and Usability of Programming Languages and Tools	https://doi.org/10.1145/3001878.3001881		9-16		Excluded	Excluded	new_screen			2	ACM		AngularJS	https://dl.acm.org/doi/10.1145/3001878.3001881	Association for Computing Machinery	nan; References; Year; Bibtex
351	Behave	Apogee: Application Ontology Generation with Size Optimization	http://link.springer.com/chapter/10.1007/978-3-319-25840-9_29		Iaakov ExmanDanil Iskusnov						Excluded	Excluded	new_screen			2						
352	Behave	The Appendix in Parkinson's Disease: From Vestigial Remnant to Vital Organ?	http://link.springer.com/chapter/10.1007/978-1-4842-2526-4_10		Sumanta Boral		https://doi.org/doi:10.3233/JPD-191703				Excluded	Excluded	new_screen			2	Pub Med Central		Appendix	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6839473/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
353	Behave	Applying TDD and BDD Techniques	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_12		Abhishek Mishra						Excluded	Excluded	new_screen			2						
354	Behave	Applying TDD to Collection View Controllers	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_6		Abhishek Mishra						Excluded	Excluded	new_screen			2						
355	Behave	Applying TDD to the Model	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_4		Abhishek Mishra						Excluded	Excluded	new_screen			2						
356	Behave	Applying TDD to View Controllers			Abhishek Mishra						Excluded	Excluded	new_screen			2						
357	Behave	Approaches to Business Analysis in Scrum at StepStone—Case Study	http://link.springer.com/chapter/10.1007/978-3-030-34706-2_11		Piotr Forowicz						Excluded	Excluded	new_screen			2						
358	Behave	Augmented System Verification Using Automated Testing	http://link.springer.com/chapter/10.1007/978-3-319-60366-7_7		Amir SchurMike Williams						Included	Included	new_screen			2						
359	Behave	AutoJet: Web Application Automation Tool	http://link.springer.com/chapter/10.1007/978-981-13-2348-5_3		Sheetika KapoorKalpna Sagar						Excluded	Excluded	new_screen			2						
360	Behave	Automated Acceptance Tests as Software Requirements: An Experiment to Compare the Applicability of Fit Tables and Gherkin Language	http://link.springer.com/chapter/10.1007/978-3-319-91602-6_7		Ernani César dos SantosPatrícia Vilain						Included	Included	new_screen			2						
361	Behave	From logistics process models to automated integration testing:proof-of-concept using open-source simulation software	This paper explores the practical integration of simulation methods into software development processes. An automated integration testing approach is presented, which enables continuous virtual commissioning. For this purpose, an analysis of the current state of knowledge and the standards of software development is presented. This is followed by a case study on logistics order management, referring to a typical B2B application in the retail logistics sector. The proof-of-concept shows how the usage of a simulation model for automated integration testing and its inclusion into continuous-integration can help to ensure software quality, particularly for process-centered logistics applications. The implemented setup proves the feasibility of the approach, using standard open-source development tools, and a Python-based open-source simulation library.		Paul Reichardt; Wladimir Hofmann; Tobias Reggelin; Sebastian Lang	WSC '21: Proceedings of the Winter Simulation Conference	https://doi.org/10.5555/3522802.3522901		1-11		Excluded	Excluded	new_screen			2	ACM		Automated Integration Testing	https://dl.acm.org/doi/10.5555/3522802.3522901	IEEE Press	nan; Keywords; References; Year; Bibtex
362	Behave	Automated Testing of Networked Systems Reliability	The reliability of a network is a crucial requirement for systems such as IoT, client-server, or cloud-based solutions. Unfortunately, real networks cannot be assumed to be fault-free, especially when considering various hardware problems, performance issues, or malicious attacks. Testing networked systems should therefore include evaluating fault tolerance under various network conditions. The paper presents a doctoral research project on automated verification of networked systems using fault-attack injection using a derived model of network communication.	Networked systems; fault/attack injection; network model; testing	Michal Rozsival	ISSTA 2024: Proceedings of the 33rd ACM SIGSOFT International Symposium on Software Testing and Analysis	https://doi.org/10.1145/3650212.3685559		1920-1922		Excluded	Excluded	new_screen			2	ACM		Automated Testing	https://dl.acm.org/doi/10.1145/3650212.3685559	Association for Computing Machinery	nan; References; Year; Bibtex
363	Behave	Automating Expert-Defined Tests: A Suitable Approach for the Medical Device Industry?			David ConnollyFergal Mc CafferyFrank Keenan						Excluded	Excluded	new_screen			2						
364	Behave	Basic concepts of physically-based rendering	This tutorial will cover the basics of physically-based rendering such as reflection models (BRDF), volume scattering (phase functions), optical phenomena (dispersion and polarization). It will also cover image formation via basic camera models. A brief summary of popular algorithms will be covered including radiosity, path tracing, photon tracing, and Metropolis Light Transport. The course will end with a more detailed description of adjoint photon tracing so that attendees can later implement their own physically-based renderer.		Peter Shirley	SA '13: SIGGRAPH Asia 2013 Courses	https://doi.org/10.1145/2542266.2542269		1-11		Excluded	Excluded	new_screen			2	ACM		Basic Concepts	https://dl.acm.org/doi/10.1145/2542266.2542269	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
365	Behave	A Behavior-driven Development and Reinforcement Learning approach for videogame automated testing	Video game development has undergone a significant transformation in the last decade, with modern games becoming increasingly complex and sophisticated. Testing these games for quality assurance is challenging and time-consuming, often relying on manual testers. In this paper, we introduce an automated testing approach that combines Behavior-Driven Development (BDD) with Reinforcement Learning (RL) to streamline the testing process. We present a framework that uses natural language-based test cases to describe game behaviors and expected outcomes, combined with RL, to test games automatically. We validated our approach through tests on four distinct Python-based games. We analyzed the impact of game complexity on training duration and discussed the challenges of defining optimal reward functions. Our framework provides a structured approach to address RL complexities, simplifying the process of creating test scenarios. Combining BDD and RL offers a promising solution to test complex modern video games more efficiently and ensure higher game quality upon release.	videogame; testing; reinforcement learning; behavior-driven development; software quality; software engineering	Vincent Mastain; Fabio Petrillo	GAS '24: Proceedings of the ACM/IEEE 8th International Workshop on Games and Software Engineering	https://doi.org/10.1145/3643658.3643919		1-8		Excluded	Excluded	new_screen			2	ACM		Behavior-Driven Development	https://dl.acm.org/doi/10.1145/3643658.3643919	Association for Computing Machinery	nan; References; Year; Bibtex
366	Behave	End-User Programming of Robot-Assisted Physical Training Activities through Behaviour-Driven Development	In this paper, we introduce an end-user programming approach for allowing physical trainers to program robot-assisted physical training activities without the assistance of a robotics engineer. The approach relies on a textual domain-specific language (DSL) to allow end users to specify the expected robot behaviour through Behaviour-Driven Development (BDD) scenarios. To evaluate the feasibility of our approach, we conducted a workshop with a physical therapist who was tasked with programming two different routines for a training robot. Results of the study highlighted the cognitive strategies employed by the end user to solve the task and also the pain points which required higher efforts from the user and should be therefore prioritized in our future work.	behaviour-driven development (BDD); domain-specific languages (DSLs); end-user programming; robot programming	Jose Pablo De La Rosa; Thiago Rocha Silva; Anders Stengaard Sorensen	HRI '24: Companion of the 2024 ACM/IEEE International Conference on Human-Robot Interaction	https://doi.org/10.1145/3610978.3640618		387-391		Excluded	Excluded	new_screen			2	ACM		Behaviour-Driven Development	https://dl.acm.org/doi/10.1145/3610978.3640618	Association for Computing Machinery	nan; References; Year; Bibtex
367	Behave	Best Practices for OutSystems Development and Its Influence on Test Automation	http://link.springer.com/chapter/10.1007/978-3-030-72654-6_9		Joana SalgueiroFernando RibeiroJosé Metrôlho						Excluded	Excluded	new_screen			2						
368	Behave	Blockchain-Based Distributed Marketplace	http://link.springer.com/chapter/10.1007/978-3-030-04849-5_17		Oliver R. KabiVirginia N. L. Franqueira						Excluded	Excluded	new_screen			2						
369	Behave	BPMN-Based Model-Driven Testing of Service-Based Processes	http://link.springer.com/chapter/10.1007/978-3-319-59466-8_8		Daniel LübkeTammo van Lessen						Excluded	Excluded	new_screen			2						
370	Behave	Bridging Enterprise and Software Engineering Through an User-Centered Design Perspective	http://link.springer.com/chapter/10.1007/978-3-319-48743-4_28		Pedro ValenteThiago SilvaMarco WincklerNuno Nunes						Excluded	Excluded	new_screen			2						
371	Behave	Building Software the Correct Way	http://link.springer.com/chapter/10.1007/978-1-4842-3015-2_1		Shekhar GulatiRahul Sharma						Excluded	Excluded	new_screen			2						
372	Behave	Transferring transactional business processes to FaaS	Function-as-a-Service (FaaS) is a modern cloud service model that has gained significant attention from the research and industry communities in recent years for its many benefits such as dynamic scaling, cost efficiency, faster programming, flexibility to microservices and containers technology. However, the building and deployment of serverless applications come with many challenges that need to be tackled, like workflow design complexity and migration of other applications. When transactions between different parties are involved, the workflow becomes knotty and the communication between participants and all properties of transactions have to be properly resolved. Transactions have widely been discussed in Business processes, so same practices might be adopted by serverless workflows. In this work we provide guidelines and mapping mechanisms for transforming transactional Business Process Modeling Notation 2.0 (BPMN2) applications to a serverless platform. We shed light on the current inability of function orchestrators to express workflow definitions, and deal with various architectural dilemmas that stem from the dissimilar nature of stateful BPMN vs. stateless serverless applications. We overcome the unbalanced capabilities between well-established BPMN notations and function orchestration definitions and illustrate how to exploit and combine cloud native services that comes with FaaS to create serverless applications.	BPMN2; FaaS; OpenWhisk; function orchestration; serverless workflow; transactions	Kostas Meladakis; Chrysostomos Zeginis; Kostas Magoutis; Dimitris Plexousakis	WoSC '22: Proceedings of the Eighth International Workshop on Serverless Computing	https://doi.org/10.1145/3565382.3565882		25-30		Excluded	Excluded	new_screen			2	ACM		Business Processes	https://dl.acm.org/doi/10.1145/3565382.3565882	Association for Computing Machinery	nan; References; Year; Bibtex
373	Behave	Cassandra on Docker, Apache Spark, and the Cassandra Cluster Manager			Sam R. Alapati						Excluded	Excluded	new_screen			2						
374	Behave	Challenges of CE	http://link.springer.com/chapter/10.1007/978-3-319-13776-6_28		Wim J. C. VerhagenJosip StjepandićNel Wognum						Excluded	Excluded	new_screen			2						
375	Behave	Chapter 10 - Development			Lundahl, David						Excluded	Excluded	new_screen			2						
376	Behave	Chasing Mutants	http://link.springer.com/chapter/10.1007/978-3-030-29509-7_12		Adam Leon Smith						Excluded	Excluded	new_screen			2						
377	Behave	Clean C++20	http://link.springer.com/book/10.1007/978-1-4842-5949-8		Stephan Roth						Excluded	Excluded	new_screen			2						
378	Behave	Cloud and Services Testing Applied in Manufacturing			F. AlvesC. CoutinhoR. Peña-OrtizX. XuA. NietoJ. AholaL. SaariA. Katasonov						Excluded	Excluded	new_screen			2						
379	Behave	Algorithm for iris code organization and searching for iris recognition system	Iris recognition has become one of the prominent biometrics features in human identification system. In addition to light intensity, focusing and capture distance problems, percent of IRIS visibility are also one of the major problems. This can cause failure in most common method, Hamming Distance (HD), used for matching the templates. This paper proposes the iris code organization and searching algorithm suggesting the improvement in template matching process. The algorithm also suggests template selection to avoid comparison with all existing IRIS codes resulting in faster searching speed. For the IRIS that has accumulated the cataract, HD methods shows major failure results. The proposed algorithm shows better performance over conventional HD method of template matching and IRIS code selection for template matching.	iris code database; iris code searching; iris codes organization; iris comparison	P. M. Agarkar; S. N. Talbar	ICWET '10: Proceedings of the International Conference and Workshop on Emerging Trends in Technology	https://doi.org/10.1145/1741906.1742029		544-547		Excluded	Excluded	new_screen			2	ACM		Code Organization	https://dl.acm.org/doi/10.1145/1741906.1742029	Association for Computing Machinery	nan; References; Year; Bibtex
380	Behave	Comparison of national clinical practice guidelines and recommendations on vaccination of adult patients with autoimmune rheumatic diseases	http://link.springer.com/article/10.1007/s00296-013-2907-9		Despoina PapadopoulouNikolaos V. Sipsas						Excluded	Excluded	new_screen			2						
381	Behave	Completeness-Driven Development	http://link.springer.com/chapter/10.1007/978-3-642-33654-6_3		Rolf DrechslerMelanie DiepenbeckDaniel GroßeUlrich KühneHoang M. LeJulia SeiterMathias SoekenRobert Wille						Excluded	Excluded	new_screen			2						
382	Behave	Component architecture of model-based testing environment	http://link.springer.com/article/10.1134/S036176881005004X		V. V. Kuliamin						Excluded	Excluded	new_screen			2						
383	Behave	Conceptual Design and Controller Testing	http://link.springer.com/chapter/10.1007/978-1-4302-2944-5_6		Matt StephensDoug Rosenberg						Excluded	Excluded	new_screen			2						
384	Behave	VR Education Contents for Core Fundamental Nursing Skills	This educational content concerns fundamental nursing skills by using virtual reality. Blood sugar testing and the administration of insulin subcutaneous injection are two of the most frequently used among the 20 core fundamental nursing skills. The content pertaining to these tasks can be used for self-management education for diabetic patients. This contents designed a core fundamental nursing skill on immersive VR contents by dividing the learner's experience into three stages: guide, mission, and feedback with these skills. And it is designed by tracking the movement of the hand through finger joint recognition without using a controller for immerse in training. This content will help improve nursing students' clinical practice competency.	Core Fundamental Nursing Skills;  Finger Joint Recognition;  VR Education Contents;  Virtual Reality	Kim, Jungki; Lee, Youngsoo; Yu, Hye-Yon	SA '22: SIGGRAPH Asia 2022 XR	https://doi.org/10.1145/3550472.3558410		1-2	"@inproceedings{10.1145/3550472.3558410,
    author = ""Kim, Jungki and Lee, Youngsoo and Yu, Hye-Yon"",
    title = ""VR Education Contents for Core Fundamental Nursing Skills"",
    year = ""2022"",
    isbn = ""9781450394734"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3550472.3558410"",
    doi = ""10.1145/3550472.3558410"",
    abstract = ""This educational content concerns fundamental nursing skills by using virtual reality. Blood sugar testing and the administration of insulin subcutaneous injection are two of the most frequently used among the 20 core fundamental nursing skills. The content pertaining to these tasks can be used for self-management education for diabetic patients. This contents designed a core fundamental nursing skill on immersive VR contents by dividing the learner's experience into three stages: guide, mission, and feedback with these skills. And it is designed by tracking the movement of the hand through finger joint recognition without using a controller for immerse in training. This content will help improve nursing students' clinical practice competency."",
    booktitle = ""SIGGRAPH Asia 2022 XR"",
    articleno = ""14"",
    numpages = ""2"",
    keywords = ""Core Fundamental Nursing Skills, Finger Joint Recognition, VR Education Contents, Virtual Reality"",
    location = ""Daegu, Republic of Korea"",
    series = ""SA '22""
}"	Excluded	Excluded	new_screen			2	ACM		Contents	https://dl.acm.org/doi/10.1145/3550472.3558410	Association for Computing Machinery	nan; References
385	Behave	Continuous Architecting with Microservices and DevOps: A Systematic Mapping Study	http://link.springer.com/chapter/10.1007/978-3-030-29193-8_7		Davide TaibiValentina LenarduzziClaus Pahl						Excluded	Excluded	new_screen			2						
386	Behave	An IDE Plugin for Gamified Continuous Integration	Interruptions and context switches resulting from meetings, urgent tasks, emails, and queries from colleagues contribute to productivity losses in developers' daily routines. This is particularly challenging for tasks like software testing, which are already perceived as less enjoyable, prompting developers to seek distractions. To mitigate this, applying gamification to testing activities can enhance motivation for test writing. One such gamification tool is Gamekins, which integrates challenges, quests, achievements, and leaderboards into the Jenkins CI (continuous integration) platform. However, as Gamekins is typically accessed through a browser, it introduces a context switch. This paper presents anIntelliJ plugindesigned to seamlessly integrate Gamekins' gamification elements into the IDE, aiming to minimize context switches and boost developer motivation for test writing.	gamification; IDE; IntelliJ; software testing; continuous integration	Philipp Straubinger; Gordon Fraser	IDE '24: Proceedings of the 1st ACM/IEEE Workshop on Integrated Development Environments	https://doi.org/10.1145/3643796.3648462		91-94		Excluded	Excluded	new_screen			2	ACM		Continuous Integration	https://dl.acm.org/doi/10.1145/3643796.3648462	Association for Computing Machinery	nan; References; Year; Bibtex
387	Behave	Controllers and Actions	https://link.springer.com/chapter/10.1007/978-1-4302-2887-5_9		Steven Sanderson						Excluded	Excluded	new_screen			2						
388	Behave	Creating Automation Frameworks Using Appium	http://link.springer.com/chapter/10.1007/978-1-4842-2418-2_5		Shankar Garg	Keyword BDD auto inserted					Excluded	Excluded	new_screen			2						
389	Behave	Cross-species protein sequence and gene structure prediction with fine-tuned Webscipio 2.0 and Scipio	http://link.springer.com/article/10.1186/1756-0500-4-265		Klas HatjeOliver KellerBjörn HammesfahrHolger PillmannStephan WaackMartin Kollmar						Excluded	Excluded	new_screen			2						
390	Behave	Data-Driven Usability Test Scenario Creation	http://link.springer.com/chapter/10.1007/978-3-030-05909-5_6		Maikel L. van EckElse MarkslagNatalia SidorovaAngelique Brosens-KesselsWil M. P. van der Aalst						Excluded	Excluded	new_screen			2						
391	Behave	Design and deployment considerations for high performance MIMO testbeds	MIMO (Multiple Input Multiple Output) enabled systems are characterized by higher reliability and transmission rates, as compared to conventional SISO (Single Input Single Output) systems. However, unless administered properly, the MIMO technologymay notfacilitate very high throughputs on point-to-point wireless links. Therefore, it becomes imperative for the network architect to design such networks in ways that fully exploit the inherent properties of MIMO. In this paper, we first conduct an extensive experimental study, using a powerful hardware platform, in order to understand the behavior of MIMO links in different topological scenarios. Our experiments involve scenarios with MIMO links in isolation, as well as in competition with other MIMO and SISO links. Second, we perform measurements with different commercial platforms towards assessing the ability of each platform to efficiently support the MIMO technology. Based on our experimental observations we deduce that the CPU processing speed of the underlying hardware platform is an important factor that can hide the performance benefits of a MIMO enabled tranceiver. We comment on the applicability of the different hardware choices that we test; furthermore, we suggest the most appropriate choice for building a MIMO testbed, taking into account the cost, the extend-ability and the re-usability of the selected platform. Finally, having adopted this choice in our testbed design, we provide a description of our testbed architecture.	IEEE 802.11n; MIMO communications; testbed deployment; topology	Konstantinos Pelechrinis; Ioannis Broustis; Theodoros Salonidis; Srikanth V. Krishnamurthy; Prasant Mohapatra	WICON '08: Proceedings of the 4th Annual International Conference on Wireless Internet	https://doi.org/10.5555/1554126.1554192		1-9		Excluded	Excluded	new_screen			2	ACM		Deployment Considerations	https://dl.acm.org/doi/10.5555/1554126.1554192	ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering)	nan; References; Year; Bibtex
392	Behave	Description and Analysis of Design Decisions: An Ontological Approach	http://link.springer.com/chapter/10.1007/978-3-030-00940-3_13		Yordani Cruz SeguraNemury Silega MartínezAilía Parra FernándezOiner Gómez Baryolo						Excluded	Excluded	new_screen			2						
393	Behave	Promoting active aging through assistive product design innovation: a preference-based integrated design framework	http://link.springer.com/chapter/10.1007/978-1-4842-4303-9_3		Shailesh Kumar ShivakumarSourabhh Sethii		https://doi.org/doi:10.3389/fpubh.2023.1203830				Excluded	Excluded	new_screen			2	Pub Med Central		Design	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10315631/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
394	Behave	Design for the Decentralized World: Democratization of Blockchain-Based Software Design			Vladislav GladyshevQiong Wu						Excluded	Excluded	new_screen			2						
395	Behave	Fanning the Flames of Passion: A Develop Mindset Predicts Strategy-Use Intentions to Cultivate Passion	https://link.springer.com/chapter/10.1007/978-1-4842-1067-3_6		Tathagat Varma		https://doi.org/doi:10.3389/fpsyg.2021.634903				Excluded	Excluded	new_screen			2	Pub Med Central		Develop	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8375551/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
396	Behave	Developing a Spiral Curriculum for Teaching Agile at the National Software Academy	https://link.springer.com/chapter/10.1007/978-981-13-2751-3_15		James OsborneWendy IvinsCarl Jones						Excluded	Excluded	new_screen			2						
397	Behave	Directed Multi-target Search Based Unit Tests Generation	http://link.springer.com/chapter/10.1007/978-3-030-30275-7_8		Greta RudžionienėŠarūnas PackevičiusEduardas Bareiša						Excluded	Excluded	new_screen			2						
398	Behave	Documentation, Error Handling, Debugging, and Testing	http://link.springer.com/chapter/10.1007/978-1-4842-6324-2_8		Peter Cooper						Excluded	Excluded	new_screen			2						
399	Behave	Documenting, Testing, and Verifying	http://link.springer.com/chapter/10.1007/978-1-4842-4480-7_15		Alejandro Serrano Mena						Excluded	Excluded	new_screen			2						
400	Behave	Domain Modeling Based on Requirements Specification and Ontology	http://link.springer.com/chapter/10.1007/978-3-319-43606-7_3		Iwona DubielewiczBogumiła HnatkowskaZbigniew HuzarLech Tuzinkiewicz						Excluded	Excluded	new_screen			2						
401	Behave	Domain V: Adaptive Planning			Sumanta Boral						Excluded	Excluded	new_screen			2						
402	Behave	Domain VI: Problem Detection and Resolution	http://link.springer.com/chapter/10.1007/978-1-4842-2526-4_7		Sumanta Boral						Excluded	Excluded	new_screen			2						
403	Behave	Editorial to the theme section on model-based testing			Mike PapadakisShaukat AliGilles Perrouin						Excluded	Excluded	new_screen			2						
404	Behave	Automated and effective testing of web services for XML injection attacks	XML is extensively used in web services for integration and data exchange. Its popularity and wide adoption make it an attractive target for attackers and a number of XML-based attack types have been reported recently. This raises the need for cost-effective, automated testing of web services to detect XML-related vulnerabilities, which is the focus of this paper. We discuss a taxonomy of the types of XML injection attacks and use it to derive four different ways to mutate XML messages, turning them into attacks (tests) automatically. Further, we consider domain constraints and attack grammars, and use a constraint solver to generate XML messages that are both malicious and valid, thus making it more difficult for any protection mechanism to recognise them. As a result, such messages have a better chance to detect vulnerabilities. Our evaluation on an industrial case study has shown that a large proportion (78.86%) of the attacks generated using our approach could circumvent the first layer of security protection, an XML gateway (firewall), a result that is much better than what a state-of-the-art tool based on fuzz testing could achieve.	XML injection; constraint solving; security testing	Sadeeq Jan; Cu D. Nguyen; Lionel C. Briand	ISSTA 2016: Proceedings of the 25th International Symposium on Software Testing and Analysis	https://doi.org/10.1145/2931037.2931042		12-23		Excluded	Excluded	new_screen			2	ACM		Effective Testing	https://dl.acm.org/doi/10.1145/2931037.2931042	Association for Computing Machinery	nan; References; Year; Bibtex
405	Behave	Efficient and Flexible Test Automation in Production Systems Engineering			Dietmar WinklerKristof MeixnerPetr Novak	Keyword -- Behavior Driven Test					Included	Included	new_screen			2						
406	Behave	Engineering Multi-agent Systems with Statecharts	http://link.springer.com/article/10.1007/s42979-021-00706-5		Nikolaos I. Spanoudakis						Excluded	Excluded	new_screen			2						
407	Behave	Online social transparency in enterprise information systems: a risk assessment method			Prof. Dr. Joaquim FilipeMichał ŚmiałekAlexander BrodskySlimane Hammoudi		https://doi.org/doi:10.1007/s10799-021-00347-3				Excluded	Excluded	new_screen			2	Pub Med Central		Enterprise Information Systems	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8692828/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
408	Behave	ESPRESSO: Robust discovery and quantification of transcript isoforms from error-prone long-read RNA-seq data	http://link.springer.com/chapter/10.1007/978-1-4842-9701-8_5		Godfrey Nolan		https://doi.org/doi:10.1126/sciadv.abq5072				Excluded	Excluded	new_screen			2	Pub Med Central		Espresso	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9858503/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
409	Behave	Every Product Owner Needs Four Things	http://link.springer.com/chapter/10.1007/978-1-4842-5168-3_5		Allan Kelly						Excluded	Excluded	new_screen			2						
410	Behave	Example-driven modeling: on effects of using examples on structural model comprehension, what makes them useful, and how to create them	http://link.springer.com/article/10.1007/s10270-017-0652-3		Dina ZayanAtrisha SarkarMichał AntkiewiczRita Suzana Pitangueira MacielKrzysztof Czarnecki						Excluded	Excluded	new_screen			2						
411	Behave	Extending, Unit Testing, and Packaging	https://link.springer.com/chapter/10.1007/978-1-4302-6074-5_10		Prabhu Sunderaraman						Excluded	Excluded	new_screen			2						
412	Behave	The proposition of Process flow model for Scrum and eXtreme Programming	To carry out a quality project, the company collaborators need to rely on an efficient management methodology. It is the key to organize the project in a structured and streamlined manner, it helps the team to be more structured. The traditional methods are usually used on projects based on very precise ideas with very detailed specifications and planning which anticipated all possible risks. Nevertheless, these do not allow any kind of interaction with the customer, who will receive the project once it is finished. For that reason, solutions like eXtreme Programming and Scrum have been proposed by project management experts respecting the interaction with the customer, ability to change, and so on. These methods share the same values and principles, but each one has its own singularities. In this paper, we will present the process flow model of the Scrum and XP methods. For this process flow model, we used the BPMN models.	Agile methodologies; BPMN; Process flow model; Scrum; XP; eXtreme Programming	Soukaina Merzouk; Abdessamad Cherkaoui; Abdelaziz Marzak; Nawal Sael; Fatima-Zahra Guerss	NISS '21: Proceedings of the 4th International Conference on Networking, Information Systems & Security	https://doi.org/10.1145/3454127.3457627		1-6		Excluded	Excluded	new_screen			2	ACM		eXtreme Programming	https://dl.acm.org/doi/10.1145/3454127.3457627	Association for Computing Machinery	nan; References; Year; Bibtex
413	Behave	Flipping the Run/Build Ratio: The Business Case for Software Craftsmanship	http://link.springer.com/chapter/10.1007/978-3-319-54087-0_9		Daryl KulakHong Li						Excluded	Excluded	new_screen			2						
414	Behave	Formal Specification Level	http://link.springer.com/chapter/10.1007/978-3-319-01418-0_3		Rolf DrechslerMathias SoekenRobert Wille						Excluded	Excluded	new_screen			2						
415	Behave	Formal Testing from Natural Language in an Industrial Context	http://link.springer.com/chapter/10.1007/978-3-319-49815-7_2		Augusto SampaioFilipe Arruda						Excluded	Excluded	new_screen			2						
416	Behave	FRAGGLE: A FRamework for AGile Gamification of Learning Experiences			Alberto MoraPanagiotis ZahariasCarina GonzálezJoan Arnedo-Moreno	Framework inspired by BDD					Excluded	Excluded	new_screen			2						
417	Behave	Fragment-based spreadsheet debugging	http://link.springer.com/article/10.1007/s10515-018-0250-9		Dietmar JannachThomas SchmitzBirgit HoferKonstantin SchekotihinPatrick KochFranz Wotawa						Excluded	Excluded	new_screen			2						
418	Behave	Framework Options and Design Pattern	http://link.springer.com/chapter/10.1007/978-1-4842-7289-3_9		Shashank Shukla						Excluded	Excluded	new_screen			2						
419	Behave	From COBOL to Business Rules—Extracting Business Rules from Legacy Code	http://link.springer.com/chapter/10.1007/978-3-030-26574-8_14		Harry M. SneedChris Verhoef						Excluded	Excluded	new_screen			2						
420	Behave	From Requirements to Automated Acceptance Tests with the RSL Language	http://link.springer.com/chapter/10.1007/978-3-030-40223-5_3		Ana C. R. PaivaDaniel MacielAlberto Rodrigues da Silva						Excluded	Excluded	new_screen			2						
421	Behave	From Requirements to Verifiable Executable Models Using Rebeca			Marjan SirjaniLuciana ProvenzanoSara Abbaspour AsadollahMahshid Helali Moghadam						Excluded	Excluded	new_screen			2						
422	Behave	Fusing Modeling and Programming into Language-Oriented Programming	http://link.springer.com/chapter/10.1007/978-3-030-03418-4_19		Markus Voelter						Excluded	Excluded	new_screen			2						
423	Behave	Gamification: a systematic review of design frameworks	http://link.springer.com/article/10.1007/s12528-017-9150-4		Alberto MoraDaniel RieraCarina GonzálezJoan Arnedo-Moreno						Excluded	Excluded	new_screen			2						
424	Behave	Getting Coaching That Really Helps	http://link.springer.com/chapter/10.1007/978-3-319-54087-0_13		Daryl KulakHong Li						Excluded	Excluded	new_screen			2						
425	Behave	Getting Started	http://link.springer.com/chapter/10.1007/978-1-4842-7289-3_1		Shashank Shukla		https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2585239/				Excluded	Excluded	new_screen			2	Pub Med Central		Getting Started	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2585239/		nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; Publisher
426	Behave	Getting Started with Selenium and Visual Studio			Chaminda ChandrasekaraPushpa Herath						Excluded	Excluded	new_screen			2						
427	Behave	Getting Started with Test-Driven Development	http://link.springer.com/chapter/10.1007/978-1-4842-7002-8_3		Gio Lodi						Excluded	Excluded	new_screen			2						
428	Behave	Groovy Awesomeness	http://link.springer.com/chapter/10.1007/978-1-4842-2117-4_11		Adam L. Davis						Excluded	Excluded	new_screen			2						
429	Behave	Hamcrest vs AssertJ: An Empirical Assessment of Tester Productivity	http://link.springer.com/chapter/10.1007/978-3-030-29238-6_12		Maurizio LeottaMaura CerioliDario OlianasFilippo Ricca						Excluded	Excluded	new_screen			2						
430	Behave	How Do Software Architects Specify and Validate Quality Requirements?			Andrea CaraccioloMircea Filip LunguOscar Nierstrasz						Excluded	Excluded	new_screen			2						
431	Behave	ICITPM: Integrity Validation of Software in Iterative Continuous Integration Through the Use of Trusted Platform Module (TPM)	https://link.springer.com/chapter/10.1007/978-3-030-66504-3_9		Antonio MuñozAristeidis FaraoJordy Ryan Casas CorreiaChristos Xenakis						Excluded	Excluded	new_screen			2						
432	Behave	Implement Tests in Our Daily Work Routine	https://link.springer.com/chapter/10.1007/978-1-4842-6382-2_10		Avi Tsadok						Excluded	Excluded	new_screen			2						
433	Behave	In the right order of brush strokes: a sketch of a software philosophy retrospective	http://link.springer.com/article/10.1186/2193-1801-3-186		Evgeny Pyshkin						Excluded	Excluded	new_screen			2						
434	Behave	Incident Management Adaption	http://link.springer.com/chapter/10.1007/978-1-4842-3976-6_7		Abhinav Krishna Kaiser						Excluded	Excluded	new_screen			2						
435	Behave	HR-Index: An Effective Index Method for Historical Reachability Queries over Evolving Graphs	Reachability query is a fundamental problem and has been well studied on static graphs. However, in the real world, the graphs are not static but always evolving over time. In this paper, we study the problem of historical reachability query on evolving graphs. We propose a novel index, named HR-Index, which integrates complete and correct historical reachability information of the evolving graph. A historical reachability query on an evolving graph can be converted into a static reachability query on its HR-Index and thus query efficiency can be improved significantly. We also propose two optimization techniques to reduce the size of HR-Index effectively. We confirm the effectiveness and efficiency of our method through conducting extensive experiments on real-life datasets. Experimental results show both vertex and edge size of HR-Index are far smaller than that of the evolving graphs and our method has at least an order of magnitude improvement in time and space efficiency compared to the state-of-the-art method.	evolving graph;  index;  reachability query	Yang, Yajun; Li, Hanxiao; Zhu, Xiangju; Wang, Junhu; Wang, Xin; Gao, Hong	Proc. ACM Manag. Data	https://doi.org/10.1145/3589272			"@article{10.1145/3589272,
    author = ""Yang, Yajun and Li, Hanxiao and Zhu, Xiangju and Wang, Junhu and Wang, Xin and Gao, Hong"",
    title = ""HR-Index: An Effective Index Method for Historical Reachability Queries over Evolving Graphs"",
    year = ""2023"",
    issue_date = ""June 2023"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""1"",
    number = ""2"",
    url = ""https://doi.org/10.1145/3589272"",
    doi = ""10.1145/3589272"",
    abstract = ""Reachability query is a fundamental problem and has been well studied on static graphs. However, in the real world, the graphs are not static but always evolving over time. In this paper, we study the problem of historical reachability query on evolving graphs. We propose a novel index, named HR-Index, which integrates complete and correct historical reachability information of the evolving graph. A historical reachability query on an evolving graph can be converted into a static reachability query on its HR-Index and thus query efficiency can be improved significantly. We also propose two optimization techniques to reduce the size of HR-Index effectively. We confirm the effectiveness and efficiency of our method through conducting extensive experiments on real-life datasets. Experimental results show both vertex and edge size of HR-Index are far smaller than that of the evolving graphs and our method has at least an order of magnitude improvement in time and space efficiency compared to the state-of-the-art method."",
    journal = ""Proc. ACM Manag. Data"",
    month = ""jun"",
    articleno = ""127"",
    numpages = ""25"",
    keywords = ""evolving graph, index, reachability query""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Index	https://dl.acm.org/doi/10.1145/3589272	Association for Computing Machinery	nan; References; Pages
436	Behave	Industry practices and challenges for the evolvability assurance of microservices	https://link.springer.com/article/10.1007/s10664-021-09999-9		Justus BognerJonas FritzschStefan WagnerAlfred Zimmermann						Excluded	Excluded	new_screen			2						
437	Behave	InstAL: An Institutional Action Language	http://link.springer.com/chapter/10.1007/978-3-319-33570-4_6		Julian PadgetEmad ElDeen ElakehalTingting LiMarina De Vos						Excluded	Excluded	new_screen			2						
438	Behave	Installing Quick	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_11		Abhishek Mishra						Excluded	Excluded	new_screen			2						
439	Behave	Integrating Quality Tooling into the Chef Development Life Cycle	https://link.springer.com/chapter/10.1007/978-1-4842-1476-3_6		Stuart Preston						Excluded	Excluded	new_screen			2						
440	Behave	Integration of Security Standards in DevOps Pipelines: An Industry Case Study	http://link.springer.com/chapter/10.1007/978-3-030-64148-1_27		Fabiola MoyónRafael SoaresMaria Pinto-AlbuquerqueDaniel MendezKristian Beckers						Excluded	Excluded	new_screen			2						
441	Behave	Inter-organizational Co-development with Scrum: Experiences and Lessons Learned from a Distributed Corporate Development Environment	http://link.springer.com/chapter/10.1007/978-3-642-38314-4_11		Raoul VallonStefan StroblMario BernhartThomas Grechenig						Excluded	Excluded	new_screen			2						
442	Behave	Language design and implementation using ruby and the interpreter pattern	In this paper, the S-expression Interpreter Framework (SIF) is presented as a tool for teaching language design and implementation. The SIF is based on the interpreter design pattern and is written in the Ruby programming language. Its core is quite small, but it can be easily extended by adding primitive procedures and special forms. The SIF can be used to demonstrate advanced language concepts (variable scopes, continuations, etc.) as well as different programming styles (functional, imperative, and object oriented).	s-expression;  ruby;  interpreter;  design patterns	Ortiz, Ariel	These keywords were added by machine and not by the authors. This process is experimental and the keywords may be updated as the learning algorithm improves.	https://doi.org/10.1145/1352135.1352155		48-52	"@inproceedings{10.1145/1352135.1352155,
    author = ""Ortiz, Ariel"",
    title = ""Language design and implementation using ruby and the interpreter pattern"",
    year = ""2008"",
    isbn = ""9781595937995"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1352135.1352155"",
    doi = ""10.1145/1352135.1352155"",
    abstract = ""In this paper, the S-expression Interpreter Framework (SIF) is presented as a tool for teaching language design and implementation. The SIF is based on the interpreter design pattern and is written in the Ruby programming language. Its core is quite small, but it can be easily extended by adding primitive procedures and special forms. The SIF can be used to demonstrate advanced language concepts (variable scopes, continuations, etc.) as well as different programming styles (functional, imperative, and object oriented)."",
    booktitle = ""Proceedings of the 39th SIGCSE Technical Symposium on Computer Science Education"",
    pages = ""48-52"",
    numpages = ""5"",
    keywords = ""s-expression, ruby, interpreter, design patterns"",
    location = ""Portland, OR, USA"",
    series = ""SIGCSE '08""
}

@article{10.1145/1352322.1352155,
    author = ""Ortiz, Ariel"",
    title = ""Language design and implementation using ruby and the interpreter pattern"",
    year = ""2008"",
    issue_date = ""March 2008"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""40"",
    number = ""1"",
    issn = ""0097-8418"",
    url = ""https://doi.org/10.1145/1352322.1352155"",
    doi = ""10.1145/1352322.1352155"",
    abstract = ""In this paper, the S-expression Interpreter Framework (SIF) is presented as a tool for teaching language design and implementation. The SIF is based on the interpreter design pattern and is written in the Ruby programming language. Its core is quite small, but it can be easily extended by adding primitive procedures and special forms. The SIF can be used to demonstrate advanced language concepts (variable scopes, continuations, etc.) as well as different programming styles (functional, imperative, and object oriented)."",
    journal = ""SIGCSE Bull."",
    month = ""mar"",
    pages = ""48-52"",
    numpages = ""5"",
    keywords = ""s-expression, ruby, interpreter, design patterns""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Interpreter Pattern	https://dl.acm.org/doi/10.1145/1352135.1352155	Association for Computing Machinery	nan; Venue; References
443	Behave	Interviews and Case Studies	http://link.springer.com/chapter/10.1007/978-1-4842-4388-6_9		Dave HarrisonKnox Lively						Excluded	Excluded	new_screen			2						
444	Behave	Introducing a New Agile Development for Web Applications Using a Groupware as Example	http://link.springer.com/chapter/10.1007/978-3-642-22247-4_13		Vinicius PereiraAntonio Francisco do Prado						Excluded	Excluded	new_screen			2						
445	Behave	Introduction to Behavior-Driven Development	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_10		Abhishek Mishra						Excluded	Excluded	new_screen			2						
446	Behave	Introduction to Cucumber	http://link.springer.com/chapter/10.1007/978-1-4842-6141-5_6		Panos Matsinopoulos						Excluded	Excluded	new_screen			2						
447	Behave	Introduction to DevOps	http://link.springer.com/chapter/10.1007/978-1-4842-3976-6_1		Abhinav Krishna Kaiser						Excluded	Excluded	new_screen			2						
448	Behave	Introduction to RSpec	http://link.springer.com/chapter/10.1007/978-1-4842-6141-5_4		Panos Matsinopoulos						Excluded	Excluded	new_screen			2						
449	Behave	Introduction to Security and Quality Improvement in Complex Cyber-Physical Systems Engineering	http://link.springer.com/chapter/10.1007/978-3-030-25312-7_1		Stefan BifflMatthias EckhartArndt LüderEdgar Weippl						Excluded	Excluded	new_screen			2						
450	Behave	Introduction to Test-Driven Development	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_1		Abhishek Mishra						Excluded	Excluded	new_screen			2						
451	Behave	Introduction to Testing	http://link.springer.com/chapter/10.1007/978-1-4302-1040-5_10		John Hunt						Excluded	Excluded	new_screen			2						
452	Behave	Introduction to Testing with Rspec	http://link.springer.com/book/10.1007/978-1-4842-2689-6								Excluded	Excluded	new_screen			2						
453	Behave	iOS Code Testing	https://link.springer.com/book/10.1007/978-1-4842-2689-6		Abhishek Mishra						Excluded	Excluded	new_screen			2						
454	Behave	Iterative and Scenario-Based Requirements Specification in a System of Systems Context	http://link.springer.com/chapter/10.1007/978-3-030-73128-1_12		Carsten WiecherJoel GreenyerCarsten WolffHarald AnackerRoman Dumitrescu						Included	Included	new_screen			2						
455	Behave	Generating fixtures for JavaScript unit testing	In today's web applications, JavaScript code interacts with the Document Object Model (DOM) at runtime. This runtime interaction between JavaScript and the DOM is error-prone and challenging to test. In order to unit test a JavaScript function that has read/write DOM operations, a DOM instance has to be provided as a test fixture. This DOM fixture needs to be in the exact structure expected by the function under test. Otherwise, the test case can terminate prematurely due to a null exception. Generating these fixtures is challenging due to the dynamic nature of JavaScript and the hierarchical structure of the DOM. We present an automated technique, based on dynamic symbolic execution, which generates test fixtures for unit testing JavaScript functions. Our approach is implemented in a tool called ConFix. Our empirical evaluation shows that ConFix can effectively generate tests that cover DOM-dependent paths. We also find that ConFix yields considerably higher coverage compared to an existing JavaScript input generation technique.	DOM;  JavaScript;  concolic execution;  dynamic symbolic execution;  test fixture;  test generation;  web applications	Fard, Amin Milani; Mesbah, Ali; Wohlstadter, Eric		https://doi.org/10.1109/ASE.2015.26		190-200	"@inproceedings{10.1109/ASE.2015.26,
    author = ""Fard, Amin Milani and Mesbah, Ali and Wohlstadter, Eric"",
    title = ""Generating fixtures for JavaScript unit testing"",
    year = ""2015"",
    isbn = ""9781509000241"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ASE.2015.26"",
    doi = ""10.1109/ASE.2015.26"",
    abstract = ""In today's web applications, JavaScript code interacts with the Document Object Model (DOM) at runtime. This runtime interaction between JavaScript and the DOM is error-prone and challenging to test. In order to unit test a JavaScript function that has read/write DOM operations, a DOM instance has to be provided as a test fixture. This DOM fixture needs to be in the exact structure expected by the function under test. Otherwise, the test case can terminate prematurely due to a null exception. Generating these fixtures is challenging due to the dynamic nature of JavaScript and the hierarchical structure of the DOM. We present an automated technique, based on dynamic symbolic execution, which generates test fixtures for unit testing JavaScript functions. Our approach is implemented in a tool called ConFix. Our empirical evaluation shows that ConFix can effectively generate tests that cover DOM-dependent paths. We also find that ConFix yields considerably higher coverage compared to an existing JavaScript input generation technique."",
    booktitle = ""Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering"",
    pages = ""190-200"",
    numpages = ""11"",
    keywords = ""DOM, JavaScript, concolic execution, dynamic symbolic execution, test fixture, test generation, web applications"",
    location = ""Lincoln, Nebraska"",
    series = ""ASE '15""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		JavaScript Unit Testing	https://dl.acm.org/doi/10.1109/ASE.2015.26	IEEE Press	nan; Venue; References
456	Behave	KODEGEN: A Code Generation and Testing Tool Using Runnable Knowledge	http://link.springer.com/chapter/10.1007/978-3-662-46549-3_17		Iaakov ExmanAnton LitovkaReuven Yagel						Excluded	Excluded	new_screen			2						
457	Behave	Languages, Frameworks, Libraries, and Tools	http://link.springer.com/chapter/10.1007/978-1-4842-3775-5_2		Fu Cheng						Excluded	Excluded	new_screen			2						
458	Behave	Lean R&D: An Agile Research and Development Approach for Digital Transformation			Marcos KalinowskiHélio LopesAlex Furtado TeixeiraGabriel da Silva CardosoAndré KuramotoBruno ItagybaSolon Tarso BatistaJuliana Alves PereiraThuener SilvaJorge Alam WarrakMarcelo da CostaMarinho FischerCristiane SalgadoBianca TeixeiraJacques ChuekeBruna Ferreira						Excluded	Excluded	new_screen			2						
459	Behave	Lean Software Development – What Exactly Are We Talking About?	http://link.springer.com/book/10.1007/978-3-030-76020-5		Oisín CawleyXiaofeng WangIta Richardson						Excluded	Excluded	new_screen			2						
460	Behave	Logic, Computation and Rigorous Methods			Alexander RaschkeElvinia RiccobeneProf. Klaus-Dieter Schewe						Excluded	Excluded	new_screen			2						
461	Behave	Making It Better	http://link.springer.com/chapter/10.1007/978-1-4842-5473-8_12		Andrew Davis						Excluded	Excluded	new_screen			2						
462	Behave	Measuring Test Case Similarity to Support Test Suite Understanding	http://link.springer.com/chapter/10.1007/978-3-658-25087-4_6		Michaela GreilerArie van DeursenAndy Zaidman						Excluded	Excluded	new_screen			2						
463	Behave	Meshing agile and plan-driven development in safety-critical software: a case study	http://link.springer.com/chapter/10.1007/978-3-642-30561-0_8		Lise Tordrup HeeagerPeter Axel Nielsen						Excluded	Excluded	new_screen			2						
464	Behave	Microservices: The Evolution and Extinction of Web Services?	http://link.springer.com/article/10.1007/s10664-020-09804-z		Luciano BaresiMartin Garriga						Excluded	Excluded	new_screen			2						
465	Behave	Microservices: Yesterday, Today, and Tomorrow	http://link.springer.com/chapter/10.1007/978-3-319-67425-4_12		Nicola DragoniSaverio GiallorenzoAlberto Lluch LafuenteManuel MazzaraFabrizio MontesiRuslan MustafinLarisa Safina						Excluded	Excluded	new_screen			2						
466	Behave	Migrating to Microservices			Alexis HenryYoussef Ridene						Excluded	Excluded	new_screen			2						
467	Behave	Layout and Image Recognition Driving Cross-Platform Automated Mobile Testing	The fragmentation problem has extended from Android to different platforms, such as iOS, mobile web, and even mini-programs within some applications (app), like WeChat1. In such a situation, recording and replaying test scripts is one of the most popular automated mobile app testing approaches. However, such approach encounters severe problems when crossing platforms. Different versions of the same app need to be developed to support different platforms relying on different platform supports. Therefore, mobile app developers need to develop and maintain test scripts for multiple platforms aimed at completely the same test requirements, greatly increasing testing costs. However, we discover that developers adopt highly similar user interface layouts for versions of the same app on different platforms. Such a phenomenon inspires us to replay test scripts from the perspective of similar UI layouts.In this paper, we propose an image-driven mobile app testing framework, utilizing Widget Feature Matching and Layout Characterization Matching to analyze app UIs. We use computer vision (CV) technologies to perform UI feature comparison and layout hierarchy extraction on mobile app screenshots to obtain UI structures containing rich contextual information of app widgets, including coordinates, relative relationship, etc. Based on acquired UI structures, we can form a platform-independent test script, and then locate the target widgets under test. Thus, the proposed framework non-intrusively replays test scripts according to a novel platform-independent test script model. We also design and implement a tool named LIRAT to devote the proposed framework into practice, based on which, we conduct an empirical study to evaluate the effectiveness and usability of the proposed testing framework. The results show that the overall replay accuracy reaches around 65.85\% on Android (8.74\% improvement over state-of-the-art approaches) and 35.26\% on iOS (35\% improvement over state-of-the-art approaches).	Record and Replay;  Mobile Testing;  Image Analysis;  Cross-Platform Testing	Yu, Shengcheng; Fang, Chunrong; Yun, Yexiao; Feng, Yang		https://doi.org/10.1109/ICSE43902.2021.00139		1561-1571	"@inproceedings{10.1109/ICSE43902.2021.00139,
    author = ""Yu, Shengcheng and Fang, Chunrong and Yun, Yexiao and Feng, Yang"",
    title = ""Layout and Image Recognition Driving Cross-Platform Automated Mobile Testing"",
    year = ""2021"",
    isbn = ""9781450390859"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ICSE43902.2021.00139"",
    doi = ""10.1109/ICSE43902.2021.00139"",
    abstract = ""The fragmentation problem has extended from Android to different platforms, such as iOS, mobile web, and even mini-programs within some applications (app), like WeChat1. In such a situation, recording and replaying test scripts is one of the most popular automated mobile app testing approaches. However, such approach encounters severe problems when crossing platforms. Different versions of the same app need to be developed to support different platforms relying on different platform supports. Therefore, mobile app developers need to develop and maintain test scripts for multiple platforms aimed at completely the same test requirements, greatly increasing testing costs. However, we discover that developers adopt highly similar user interface layouts for versions of the same app on different platforms. Such a phenomenon inspires us to replay test scripts from the perspective of similar UI layouts.In this paper, we propose an image-driven mobile app testing framework, utilizing Widget Feature Matching and Layout Characterization Matching to analyze app UIs. We use computer vision (CV) technologies to perform UI feature comparison and layout hierarchy extraction on mobile app screenshots to obtain UI structures containing rich contextual information of app widgets, including coordinates, relative relationship, etc. Based on acquired UI structures, we can form a platform-independent test script, and then locate the target widgets under test. Thus, the proposed framework non-intrusively replays test scripts according to a novel platform-independent test script model. We also design and implement a tool named LIRAT to devote the proposed framework into practice, based on which, we conduct an empirical study to evaluate the effectiveness and usability of the proposed testing framework. The results show that the overall replay accuracy reaches around 65.85\\% on Android (8.74\\% improvement over state-of-the-art approaches) and 35.26\\% on iOS (35\\% improvement over state-of-the-art approaches)."",
    booktitle = ""Proceedings of the 43rd International Conference on Software Engineering"",
    pages = ""1561-1571"",
    numpages = ""11"",
    keywords = ""Record and Replay, Mobile Testing, Image Analysis, Cross-Platform Testing"",
    location = ""Madrid, Spain"",
    series = ""ICSE '21""
}"	Excluded	Excluded	new_screen			2	ACM		Mobile Testing	https://dl.acm.org/doi/10.1109/ICSE43902.2021.00139	IEEE Press	nan; Venue; References
468	Behave	Mock objects for testing java systems	http://link.springer.com/article/10.1007/s10664-018-9663-0		Davide SpadiniMaurício AnicheMagiel BruntinkAlberto Bacchelli						Excluded	Excluded	new_screen			2						
469	Behave	Modeling and Analyzing Using ASMs: The Landing Gear System Case Study	http://link.springer.com/chapter/10.1007/978-3-319-07512-9_3		Paolo ArcainiAngelo GargantiniElvinia Riccobene						Excluded	Excluded	new_screen			2						
470	Behave	Modeling in Agile Software Development: Decomposing Use Cases Towards Logical Architecture Design	http://link.springer.com/chapter/10.1007/978-3-662-61168-5_10		Nuno SantosJaime PereiraNuno FerreiraRicardo J. Machado						Excluded	Excluded	new_screen			2						
471	Behave	Modeling Software Requirements	http://link.springer.com/book/10.1007/978-3-662-56386-1		Themistoklis DiamantopoulosAndreas L. Symeonidis						Excluded	Excluded	new_screen			2						
472	Behave	NLP-Assisted Model Generation	http://link.springer.com/chapter/10.1007/978-1-4842-2044-3_3		Mathias SoekenRolf Drechsler						Excluded	Excluded	new_screen			2						
473	Behave	Node Modules	http://link.springer.com/chapter/10.1007/978-3-658-22065-5_5		Elad Elrom						Excluded	Excluded	new_screen			2						
474	Behave	Normen, Standards, Practices	http://link.springer.com/chapter/10.1007/978-3-319-77243-1_18		Klaus-Rainer Müller						Excluded	Excluded	new_screen			2						
475	Behave	Onstage Product Owner	http://link.springer.com/chapter/10.1007/978-1-4842-5168-3_8		Allan Kelly						Excluded	Excluded	new_screen			2						
476	Behave	Open Debates	http://link.springer.com/chapter/10.1007/978-1-4842-1464-0_10		Vikram Dhillon						Excluded	Excluded	new_screen			2						
477	Behave	Organization of the Software Test in Agile Projects	http://link.springer.com/chapter/10.1007/978-3-030-73209-7_3		Manfred BaumgartnerMartin KlonkChristian MastnakHelmut PichlerRichard SeidlSiegfried Tanczos						Excluded	Excluded	new_screen			2						
478	Behave	Patterns – Wie geht es weiter?	http://link.springer.com/chapter/10.1007/978-3-642-34718-4_11		Karl EilebrechtGernot Starke						Excluded	Excluded	new_screen			2						
479	Behave	People and Tools	http://link.springer.com/chapter/10.1007/978-1-4842-3832-5_3		Arnon Axelrod						Excluded	Excluded	new_screen			2						
480	Behave	Planning Your Work	http://link.springer.com/chapter/10.1007/978-1-4842-4152-3_2		Chris Northwood						Excluded	Excluded	new_screen			2						
481	Behave	Polytrix: A Pacto-Powered Polyglot Test Matrix	http://link.springer.com/chapter/10.1007/978-3-642-55128-4_27		Max LincolnFernando Alves						Excluded	Excluded	new_screen			2						
482	Behave	Poor Foundations	http://link.springer.com/chapter/10.1007/978-1-4842-1745-0_4		Tim Brizard						Excluded	Excluded	new_screen			2						
483	Behave	PowerShell-Skripte testen mit Pester	http://link.springer.com/chapter/10.1007/978-3-658-17666-2_6		Peter Monadjemi						Excluded	Excluded	new_screen			2						
484	Behave	Preparing the Project	http://link.springer.com/chapter/10.1007/978-1-4842-1679-8_4		Alan Cline						Excluded	Excluded	new_screen			2						
485	Behave	Reducing Barriers to Entry by Removing Prerequisites for a CS1 Introductory Programming Course	Introductory programming has evolved in many places to become a CS0 course, enabling students to get their feet wet with programming without completing significant math coursework. A scan of CS programs shows that a majority of CS1 programming courses that count towards an undergraduate CS degree continue to have a math or CS0 prerequisite. This experience report discusses the impact of removing the math prerequisite at an R2 university and a small liberal arts college. Having minimal prerequisites has beneficial effects in terms of diversifying the CS student body as well as enabling students to begin CS coursework early, often in the first semester, potentially impacting persistence, but also enabling students to decide, early, if CS is right for them. The high success rate of students of various backgrounds taking CS certificates and pursuing graduate school also shows that aggressive prerequisites in the past may have been functioning as barriers to entering CS programs. If we are serious about supporting diversity, we need to acknowledge the wide disparity in high school education nationwide and that prerequisites are perhaps functioning as a needless barrier. Where the CS0 course doesn't count towards a degree, or there isn't space for that requirement in the program, it is also worth considering whether the CS0 prerequisite is necessary.	Barrier Reduction;  Broadening Participation in Computing (BPC);  CS1;  Diversity;  Intro Programming	Das, Udayan; Fulton, Chris		https://doi.org/10.1145/3626253.3635492		1616-1617	"@inproceedings{10.1145/3626253.3635492,
    author = ""Das, Udayan and Fulton, Chris"",
    title = ""Reducing Barriers to Entry by Removing Prerequisites for a CS1 Introductory Programming Course"",
    year = ""2024"",
    isbn = ""9798400704246"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3626253.3635492"",
    doi = ""10.1145/3626253.3635492"",
    abstract = ""Introductory programming has evolved in many places to become a CS0 course, enabling students to get their feet wet with programming without completing significant math coursework. A scan of CS programs shows that a majority of CS1 programming courses that count towards an undergraduate CS degree continue to have a math or CS0 prerequisite. This experience report discusses the impact of removing the math prerequisite at an R2 university and a small liberal arts college. Having minimal prerequisites has beneficial effects in terms of diversifying the CS student body as well as enabling students to begin CS coursework early, often in the first semester, potentially impacting persistence, but also enabling students to decide, early, if CS is right for them. The high success rate of students of various backgrounds taking CS certificates and pursuing graduate school also shows that aggressive prerequisites in the past may have been functioning as barriers to entering CS programs. If we are serious about supporting diversity, we need to acknowledge the wide disparity in high school education nationwide and that prerequisites are perhaps functioning as a needless barrier. Where the CS0 course doesn't count towards a degree, or there isn't space for that requirement in the program, it is also worth considering whether the CS0 prerequisite is necessary."",
    booktitle = ""Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2"",
    pages = ""1616-1617"",
    numpages = ""2"",
    keywords = ""Barrier Reduction, Broadening Participation in Computing (BPC), CS1, Diversity, Intro Programming"",
    location = ""Portland, OR, USA"",
    series = ""SIGCSE 2024""
}"	Excluded	Excluded	new_screen			2	ACM		Prerequisites	https://dl.acm.org/doi/10.1145/3626253.3635492	Association for Computing Machinery	nan; Venue; References
486	Behave	Prioritization of User Story Acceptance Tests in Agile Software Development Using Meta-Heuristic Techniques and Comparative Analysis	http://link.springer.com/chapter/10.1007/978-981-13-2348-5_4		Ritu SibalPreeti KaurChayanika Sharma						Excluded	Excluded	new_screen			2						
487	Behave	A tentative framework for connecting long-term business and product planning with iterative \&amp; incremental software product development	"For a company in the software product business, it is essential to understand how to connect business management and software development [17] and employ a solid, value-based approach in its decision-making. However, software engineering literature (SE) commonly addresses what should be done at the ""floor level"" and leaves the link to business and product management unaddressed [14]. Also, existing software development models mostly adhere to the viewpoint of individual development projects and thus fail to sufficiently address common product development concerns such as multi-project or project portfolio management [20]."		"V\""{a}h\""{a}niitty, Jarno"		https://doi.org/10.1145/1083091.1083097		1-4	"@inproceedings{10.1145/1083091.1083097,
    author = {V\""{a}h\""{a}niitty, Jarno},
    title = ""A tentative framework for connecting long-term business and product planning with iterative \\&amp; incremental software product development"",
    year = ""2005"",
    isbn = ""159593118X"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1083091.1083097"",
    doi = ""10.1145/1083091.1083097"",
    abstract = {For a company in the software product business, it is essential to understand how to connect business management and software development [17] and employ a solid, value-based approach in its decision-making. However, software engineering literature (SE) commonly addresses what should be done at the ""floor level"" and leaves the link to business and product management unaddressed [14]. Also, existing software development models mostly adhere to the viewpoint of individual development projects and thus fail to sufficiently address common product development concerns such as multi-project or project portfolio management [20].},
    booktitle = ""Proceedings of the Seventh International Workshop on Economics-Driven Software Engineering Research"",
    pages = ""1-4"",
    numpages = ""4"",
    location = ""St. Louis, Missouri"",
    series = ""EDSER '05""
}

@article{10.1145/1082983.1083097,
    author = {V\""{a}h\""{a}niitty, Jarno},
    title = ""A tentative framework for connecting long-term business and product planning with iterative \\&amp; incremental software product development"",
    year = ""2005"",
    issue_date = ""July 2005"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""30"",
    number = ""4"",
    issn = ""0163-5948"",
    url = ""https://doi.org/10.1145/1082983.1083097"",
    doi = ""10.1145/1082983.1083097"",
    abstract = {For a company in the software product business, it is essential to understand how to connect business management and software development [17] and employ a solid, value-based approach in its decision-making. However, software engineering literature (SE) commonly addresses what should be done at the ""floor level"" and leaves the link to business and product management unaddressed [14]. Also, existing software development models mostly adhere to the viewpoint of individual development projects and thus fail to sufficiently address common product development concerns such as multi-project or project portfolio management [20].},
    journal = ""SIGSOFT Softw. Eng. Notes"",
    month = ""may"",
    pages = ""1-4"",
    numpages = ""4""
}"	Excluded	Excluded	new_screen			2	ACM		Product Planning	https://dl.acm.org/doi/10.1145/1083091.1083097	Association for Computing Machinery	nan; Venue; Keywords; References
488	Behave	Program comprehension of domain-specific and general-purpose languages: replication of a family of experiments using integrated development environments	Domain-specific languages (DSLs) allow developers to write code at a higher level of abstraction compared with general-purpose languages (GPLs). Developers often use DSLs to reduce the complexity of GPLs. Our previous study found that developers performed program comprehension tasks more accurately and efficiently with DSLs than with corresponding APIs in GPLs. This study replicates our previous study to validate and extend the results when developers use IDEs to perform program comprehension tasks. We performed a dependent replication of a family of experiments. We made two specific changes to the original study: (1) participants used IDEs to perform the program comprehension tasks, to address a threat to validity in the original experiment and (2) each participant performed program comprehension tasks on either DSLs or GPLs, not both as in the original experiment. The results of the replication are consistent with and expanded the results of the original study. Developers are significantly more effective and efficient in tool-based program comprehension when using a DSL than when using a corresponding API in a GPL. The results indicate that, where a DSL is available, developers will perform program comprehension better using the DSL than when using the corresponding API in a GPL. (c) 2018, Springer Science+Business Media, LLC, part of Springer Nature.	Problem oriented languages; Controlled experiment; Domain specific languages; General purpose languages; Program comprehension; Replication; Digital subscriber lines	Kosar, Tomaz; Gaberc, Saso; Carver, Jeffrey C.; Mernik, Marjan	Empirical Software Engineering	https://doi.org/10.1007/s10664-017-9593-2		2734 - 2763	"@ARTICLE{Kosar20182734,
    author = ""Kosar, Tomaz and Gaberc, Saso and Carver, Jeffrey C. and Mernik, Marjan"",
    title = ""Program comprehension of domain-specific and general-purpose languages: replication of a family of experiments using integrated development environments"",
    year = ""2018"",
    journal = ""Empirical Software Engineering"",
    volume = ""23"",
    number = ""5"",
    pages = ""2734 - 2763"",
    doi = ""10.1007/s10664-017-9593-2"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041817185\&doi=10.1007\%2fs10664-017-9593-2\&partnerID=40\&md5=08584b57449331c4801a21d3a4bc386c"",
    affiliations = ""Faculty of Electrical Engineering and Computer Science, University of Maribor, Koroska cesta 46, Maribor, 2000, Slovenia; Department of Computer Science, University of Alabama, Tuscaloosa, AL, United States"",
    abstract = ""Domain-specific languages (DSLs) allow developers to write code at a higher level of abstraction compared with general-purpose languages (GPLs). Developers often use DSLs to reduce the complexity of GPLs. Our previous study found that developers performed program comprehension tasks more accurately and efficiently with DSLs than with corresponding APIs in GPLs. This study replicates our previous study to validate and extend the results when developers use IDEs to perform program comprehension tasks. We performed a dependent replication of a family of experiments. We made two specific changes to the original study: (1) participants used IDEs to perform the program comprehension tasks, to address a threat to validity in the original experiment and (2) each participant performed program comprehension tasks on either DSLs or GPLs, not both as in the original experiment. The results of the replication are consistent with and expanded the results of the original study. Developers are significantly more effective and efficient in tool-based program comprehension when using a DSL than when using a corresponding API in a GPL. The results indicate that, where a DSL is available, developers will perform program comprehension better using the DSL than when using the corresponding API in a GPL. (c) 2018, Springer Science+Business Media, LLC, part of Springer Nature."",
    author_keywords = ""Controlled experiment; Domain-specific languages; General-purpose languages; Program comprehension; Replication"",
    keywords = ""Problem oriented languages; Controlled experiment; Domain specific languages; General purpose languages; Program comprehension; Replication; Digital subscriber lines"",
    correspondence_address = ""T. Kosar; Faculty of Electrical Engineering and Computer Science, University of Maribor, Maribor, Koroska cesta 46, 2000, Slovenia; email: tomaz.kosar@um.si"",
    publisher = ""Springer New York LLC"",
    issn = ""13823256"",
    coden = ""ESENF"",
    language = ""English"",
    abbrev_source_title = ""Empir Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 28""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Program comprehension of domain-specific and general-purpose languages: replication of a family of experiments using integrated development environments	https://www.scopus.com/record/display.uri?eid=2-s2.0-85041817185&origin=resultslist&sort=plf-f&src=s&sid=c90b5bbc91466be5a8ba1d9ad5261c2b&sot=b&sdt=b&s=TITLE-ABS-KEY%28program+comprehension+of+domain+specific+and+general+purpose+languages+replication+of+a+family+of+experiments+using+integrated+development+environments%29&sl=166&sessionSearchId=c90b5bbc91466be5a8ba1d9ad5261c2b&relpos=0	Springer New York LLC	nan; References
489	Behave	PTCWA: Performance Testing of Cloud Based Web Applications	http://link.springer.com/chapter/10.1007/978-3-030-41862-5_32		M. S. Geetha DevasenaR. Kingsy GraceS. ManjuV. Krishna Kumar						Excluded	Excluded	new_screen			2						
490	Behave	Public Administration for the Next Generation	http://link.springer.com/chapter/10.1007/978-3-319-63743-3_2		Peter Winstanley						Excluded	Excluded	new_screen			2						
491	Behave	Putting ASP.NET MVC in Context			Adam Freeman						Excluded	Excluded	new_screen			2						
492	Behave	QTREDS: a Ruby on Rails-based platform for omics laboratories			Piergiorgio PallaGianfranco FrauLaura VargiuPatricia Rodriguez-Tomé						Excluded	Excluded	new_screen			2						
493	Behave	Cognitive biases in software quality and testing	Humans are an integral entity for performing software quality and testing activities. The quality is compromised when human-thought process deviates from the laws of rational thinking, referred to as cognitive biases. The work carried out so far from this perspective in software quality and testing is very scarce and is limited to one cognitive bias only. This work aims to explore the phenomenon of cognitive biases in software quality and testing in more detail. Furthermore, investigating the factors that exist in an organisational context and that trigger the biases, which in turn deteriorate the quality of software, is also the focus of this work. Acquiring the knowledge of cognitive biases and the triggering factors will help in circumventing them, thus improving software quality.	software testing;  software quality;  software psychology;  human factors;  cognitive bias	Salman, Iflaah		https://doi.org/10.1145/2889160.2889265		823-826	"@inproceedings{10.1145/2889160.2889265,
    author = ""Salman, Iflaah"",
    title = ""Cognitive biases in software quality and testing"",
    year = ""2016"",
    isbn = ""9781450342056"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2889160.2889265"",
    doi = ""10.1145/2889160.2889265"",
    abstract = ""Humans are an integral entity for performing software quality and testing activities. The quality is compromised when human-thought process deviates from the laws of rational thinking, referred to as cognitive biases. The work carried out so far from this perspective in software quality and testing is very scarce and is limited to one cognitive bias only. This work aims to explore the phenomenon of cognitive biases in software quality and testing in more detail. Furthermore, investigating the factors that exist in an organisational context and that trigger the biases, which in turn deteriorate the quality of software, is also the focus of this work. Acquiring the knowledge of cognitive biases and the triggering factors will help in circumventing them, thus improving software quality."",
    booktitle = ""Proceedings of the 38th International Conference on Software Engineering Companion"",
    pages = ""823-826"",
    numpages = ""4"",
    keywords = ""software testing, software quality, software psychology, human factors, cognitive bias"",
    location = ""Austin, Texas"",
    series = ""ICSE '16""
}"	Excluded	Excluded	new_screen			2	ACM		Quality and Testing	https://dl.acm.org/doi/10.1145/2889160.2889265	Association for Computing Machinery	nan; Venue; References
494	Behave	Reengineering and Reverse Engineering			Ervin Varga						Excluded	Excluded	new_screen			2						
495	Behave	Exploiting the progress of OO refactoring tools with Android code smells: RAndroid, a plugin for Android studio	"Mobile applications market is facing a stronger demand continuously, due to the growing popularity of mobile phones. A demand that forces developers to rush the implementation process and shorten the conception phase, leading to poor conception and implementation choices known as code smells. These smells have a negative effect on both device and application's performance, and must therefore be corrected to ensure the quality of mobile applications and the smoothness of their users' experience. This task requires the identification of the infected entities and their refactoring. Most existing refactoring approaches and techniques are focused on object-oriented applications' code smells while only a few of them are destined to Android specific code smells.In this paper, we present a tool, named RAndroid, that handles automatic refactoring for four different Android specific code smells, and gives recommendations on how to manually refactor a fifth one. RAndroid is built as an Android Studio plugin adapting the logic of the well-known oriented-object refactoring tool ""JDeodorant"" [13] as it's first layer. We evaluated RAndroid on 52 real-world open-source Android applications, developed by both experts and beginners, covering 194 code smell instances."	refactoring;  mobile application;  code smells;  Java;  Android	Gattal, Abderraouf; Hammache, Abir; Bousbia, Nabila; Henniche, Adel Nassim		https://doi.org/10.1145/3412841.3442129		1580-1583	"@inproceedings{10.1145/3412841.3442129,
    author = ""Gattal, Abderraouf and Hammache, Abir and Bousbia, Nabila and Henniche, Adel Nassim"",
    title = ""Exploiting the progress of OO refactoring tools with Android code smells: RAndroid, a plugin for Android studio"",
    year = ""2021"",
    isbn = ""9781450381048"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3412841.3442129"",
    doi = ""10.1145/3412841.3442129"",
    abstract = {Mobile applications market is facing a stronger demand continuously, due to the growing popularity of mobile phones. A demand that forces developers to rush the implementation process and shorten the conception phase, leading to poor conception and implementation choices known as code smells. These smells have a negative effect on both device and application's performance, and must therefore be corrected to ensure the quality of mobile applications and the smoothness of their users' experience. This task requires the identification of the infected entities and their refactoring. Most existing refactoring approaches and techniques are focused on object-oriented applications' code smells while only a few of them are destined to Android specific code smells.In this paper, we present a tool, named RAndroid, that handles automatic refactoring for four different Android specific code smells, and gives recommendations on how to manually refactor a fifth one. RAndroid is built as an Android Studio plugin adapting the logic of the well-known oriented-object refactoring tool ""JDeodorant"" [13] as it's first layer. We evaluated RAndroid on 52 real-world open-source Android applications, developed by both experts and beginners, covering 194 code smell instances.},
    booktitle = ""Proceedings of the 36th Annual ACM Symposium on Applied Computing"",
    pages = ""1580-1583"",
    numpages = ""4"",
    keywords = ""refactoring, mobile application, code smells, Java, Android"",
    location = ""Virtual Event, Republic of Korea"",
    series = ""SAC '21""
}"	Excluded	Excluded	new_screen			2	ACM		Refactoring Tools	https://dl.acm.org/doi/10.1145/3412841.3442129	Association for Computing Machinery	nan; Venue; References
496	Behave	Requirement Engineering as a Software Development Process	http://link.springer.com/chapter/10.1007/978-3-030-34706-2_2		Pawel BaszuroJakub Swacha						Excluded	Excluded	new_screen			2						
497	Behave	Requirements Engineering and Semantic Web*	http://link.springer.com/article/10.1007/s10559-016-9808-3		L. P. Babenko						Excluded	Excluded	new_screen			2						
498	Behave	Requirements Engineering for Cyber-Physical Systems	http://link.springer.com/chapter/10.1007/978-3-662-44739-0_35		Stefan WiesnerChristian GorldtMathias SoekenKlaus-Dieter ThobenRolf Drechsler						Excluded	Excluded	new_screen			2						
499	Behave	Requirements Thread	http://link.springer.com/chapter/10.1007/978-1-4842-1679-8_9		Alan Cline						Excluded	Excluded	new_screen			2						
500	Behave	Resolving Interoperability in Concurrent Engineering	http://link.springer.com/chapter/10.1007/978-3-319-13776-6_6		Nicolas FigayCatarina Ferreira da SilvaParisa GhodousRicardo Jardim-Goncalves						Excluded	Excluded	new_screen			2						
501	Behave	REST API	http://link.springer.com/chapter/10.1007/978-1-4842-0037-7_21		Azat Mardan						Excluded	Excluded	new_screen			2						
502	Behave	Rigorous development process of a safety-critical system: from ASM models to Java code	http://link.springer.com/article/10.1007/s10009-015-0394-x		Paolo ArcainiAngelo GargantiniElvinia Riccobene						Excluded	Excluded	new_screen			2						
503	Behave	Robust Design of a Collaborative Platform for Model-Based System Engineering: Experience from an Industrial Deployment	http://link.springer.com/chapter/10.1007/978-3-030-32065-2_23		Christophe PonsardRobert DarimontMounir Touzani						Excluded	Excluded	new_screen			2						
504	Behave	ROM: An Approach to Self-consistency Verification of a Runnable Ontology Model	http://link.springer.com/chapter/10.1007/978-3-642-54105-6_18		Iaakov ExmanReuven Yagel						Excluded	Excluded	new_screen			2						
505	Behave	SAFECode Whitepaper: Fundamental Practices for Secure Software Development 2nd Edition			Stacy Simpson						Excluded	Excluded	new_screen			2						
506	Behave	Scala Testing	http://link.springer.com/chapter/10.1007/978-3-319-75771-1_37		John Hunt						Excluded	Excluded	new_screen			2						
507	Behave	Scaling Your Team			David Pollak						Excluded	Excluded	new_screen			2						
508	Behave	Benchmarking Runtime Scripting Performance in Wasmer	In this paper, we explore the use of Wasmer and WebAssembly (WASM) as a sandboxed environment for general-purpose runtime scripting. Our work differs from prior research focusing on browser-based performance or SPEC benchmarks. In particular, we use micro-benchmarks and a macro-benchmark (both written in Rust) to compare execution times between WASM and native mode. We first measure which elements of script execution have the largest performance impact, using simple micro-benchmarks. Then we consider a Web proxy caching simulator, with different cache replacement policies, as a macro-benchmark. Using this simulator, we demonstrate a 5-10x performance penalty for WASM compared to native execution.	benchmarking;  caching;  performance;  scripting;  webassembly	Hockley, Devon; Williamson, Carey		https://doi.org/10.1145/3491204.3527477		97-104	"@inproceedings{10.1145/3491204.3527477,
    author = ""Hockley, Devon and Williamson, Carey"",
    title = ""Benchmarking Runtime Scripting Performance in Wasmer"",
    year = ""2022"",
    isbn = ""9781450391597"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3491204.3527477"",
    doi = ""10.1145/3491204.3527477"",
    abstract = ""In this paper, we explore the use of Wasmer and WebAssembly (WASM) as a sandboxed environment for general-purpose runtime scripting. Our work differs from prior research focusing on browser-based performance or SPEC benchmarks. In particular, we use micro-benchmarks and a macro-benchmark (both written in Rust) to compare execution times between WASM and native mode. We first measure which elements of script execution have the largest performance impact, using simple micro-benchmarks. Then we consider a Web proxy caching simulator, with different cache replacement policies, as a macro-benchmark. Using this simulator, we demonstrate a 5-10x performance penalty for WASM compared to native execution."",
    booktitle = ""Companion of the 2022 ACM/SPEC International Conference on Performance Engineering"",
    pages = ""97-104"",
    numpages = ""8"",
    keywords = ""benchmarking, caching, performance, scripting, webassembly"",
    location = ""Bejing, China"",
    series = ""ICPE '22""
}"	Excluded	Excluded	new_screen			2	ScopusSignedIn		Scripting	https://dl.acm.org/doi/10.1145/3491204.3527477	Association for Computing Machinery	nan; Venue; References
509	Behave	Scrum Framework und Praxis	http://link.springer.com/chapter/10.1007/978-3-658-25085-0_3		Janko Böhm						Excluded	Excluded	new_screen			2						
510	Behave	Semi-automated Design Guidance Enhancer (SADGE): A Framework for Architectural Guidance Development			Mohsen AnvaariOlaf Zimmermann						Excluded	Excluded	new_screen			2						
511	Behave	Shorter Feedback Loops By Means of Continuous Deployment	http://link.springer.com/chapter/10.1007/978-3-319-18612-2_24		Arjan ClaassenLaurens Boekhorst						Excluded	Excluded	new_screen			2						
512	Behave	Software Processes in the Software Product Life Cycle	http://link.springer.com/chapter/10.1007/978-3-319-98845-0_3		Ralf Kneuper						Excluded	Excluded	new_screen			2						
513	Behave	Software Quality Assurance During Implementation: Results of a Survey in Software Houses from Germany, Austria and Switzerland	http://link.springer.com/chapter/10.1007/978-3-319-49421-0_7		Michael FeldererFlorian Auer						Excluded	Excluded	new_screen			2						
514	Behave	Quantum Software Testing 101	Quantum software testing (QST) is an emerging research area within quantum software engineering (QSE) to ensure quantum software functional and non-functional correctness and dependability. Since quantum computers perform computations significantly differently than classical computing, testing quantum software running on these quantum computers also differs due to quantum computing's unique characteristics, e.g., entanglement and superposition. Due to the rising interest of the software engineering community in QSE, we will provide an introduction to QST. We will introduce quantum computing and its various principles, quantum software development as quantum circuits, and current QST literature, including a key set of techniques with examples. Finally, a set of future research challenges related to QST will be presented.	quantum computing;  quantum programs;  quantum software testing	Ali, Shaukat		https://doi.org/10.1145/3639478.3643059		426-427	"@inproceedings{10.1145/3639478.3643059,
    author = ""Ali, Shaukat"",
    title = ""Quantum Software Testing 101"",
    year = ""2024"",
    isbn = ""9798400705021"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3639478.3643059"",
    doi = ""10.1145/3639478.3643059"",
    abstract = ""Quantum software testing (QST) is an emerging research area within quantum software engineering (QSE) to ensure quantum software functional and non-functional correctness and dependability. Since quantum computers perform computations significantly differently than classical computing, testing quantum software running on these quantum computers also differs due to quantum computing's unique characteristics, e.g., entanglement and superposition. Due to the rising interest of the software engineering community in QSE, we will provide an introduction to QST. We will introduce quantum computing and its various principles, quantum software development as quantum circuits, and current QST literature, including a key set of techniques with examples. Finally, a set of future research challenges related to QST will be presented."",
    booktitle = ""Proceedings of the 2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings"",
    pages = ""426-427"",
    numpages = ""2"",
    keywords = ""quantum computing, quantum programs, quantum software testing"",
    location = ""Lisbon, Portugal"",
    series = ""ICSE-Companion '24""
}"	Excluded	Excluded	new_screen			2	ACM		Software Testing	https://dl.acm.org/doi/10.1145/3639478.3643059	Association for Computing Machinery	nan; Venue; References
515	Behave	Specification by Example for Educational Purposes	The Specification By Example (SBE) is a guideline for building the right software, a software that meets customer requirements. It is based on seven process patterns and enhances communication and collaboration and it usually is used in agile software development. The connection between education and agile software development sounds actually as an emergent topic. In this paper, we propose to structure a teaching approach in analogy to an agile software developement by transposing each process pattern of SBE to a corresponding one in the teaching domain. Moreover, we show that thanks to the emergence of a collective intelligence process, the students are more confident and more responsible. Such a course offers the opportunity to learn not only technical skills, but also some values in a new mindset.	specification by example;  agile teaching;  agile software development	Blasquez, Isabelle; Leblanc, Herv\'{e}		https://doi.org/10.1145/3059009.3059039		212-217	"@inproceedings{10.1145/3059009.3059039,
    author = ""Blasquez, Isabelle and Leblanc, Herv\'{e}"",
    title = ""Specification by Example for Educational Purposes"",
    year = ""2017"",
    isbn = ""9781450347044"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3059009.3059039"",
    doi = ""10.1145/3059009.3059039"",
    abstract = ""The Specification By Example (SBE) is a guideline for building the right software, a software that meets customer requirements. It is based on seven process patterns and enhances communication and collaboration and it usually is used in agile software development. The connection between education and agile software development sounds actually as an emergent topic. In this paper, we propose to structure a teaching approach in analogy to an agile software developement by transposing each process pattern of SBE to a corresponding one in the teaching domain. Moreover, we show that thanks to the emergence of a collective intelligence process, the students are more confident and more responsible. Such a course offers the opportunity to learn not only technical skills, but also some values in a new mindset."",
    booktitle = ""Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education"",
    pages = ""212-217"",
    numpages = ""6"",
    keywords = ""specification by example, agile teaching, agile software development"",
    location = ""Bologna, Italy"",
    series = ""ITiCSE '17""
}"	Excluded	Excluded	new_screen			2	ACM		Specification by Example	https://dl.acm.org/doi/10.1145/3059009.3059039	Association for Computing Machinery	nan; Venue; References
516	Behave	Specifications and testing aided by a variant of the cause-effect process	For many years the cause-effect process has played a role in testing [1, 2]. A simplified variation of the cause-effect process will be shown. This variation is not only effective for testing and carefully analyzing existing specifications, but is also useful for developing complete specifications. The cause-effect graph is claimed to be unnecessary.		Baxter, Anthony Q.; French, J. Austin		https://doi.org/10.1145/503720.503750		405-408	"@inproceedings{10.1145/503720.503750,
    author = ""Baxter, Anthony Q. and French, J. Austin"",
    title = ""Specifications and testing aided by a variant of the cause-effect process"",
    year = ""1992"",
    isbn = ""0897915062"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/503720.503750"",
    doi = ""10.1145/503720.503750"",
    abstract = ""For many years the cause-effect process has played a role in testing [1, 2]. A simplified variation of the cause-effect process will be shown. This variation is not only effective for testing and carefully analyzing existing specifications, but is also useful for developing complete specifications. The cause-effect graph is claimed to be unnecessary."",
    booktitle = ""Proceedings of the 30th Annual ACM Southeast Regional Conference"",
    pages = ""405-408"",
    numpages = ""4"",
    location = ""Raleigh, North Carolina"",
    series = ""ACMSE '92""
}"	Excluded	Excluded	new_screen			2	ACM		Specifications and Testing	https://dl.acm.org/doi/10.1145/503720.503750	Association for Computing Machinery	nan; Venue; Keywords; References
517	Behave	SportsStore: A Real Application	http://link.springer.com/chapter/10.1007/978-1-4302-2887-5_4		Steven Sanderson						Excluded	Excluded	new_screen			2						
518	Behave	SportsStore: Navigation and Shopping Cart	http://link.springer.com/chapter/10.1007/978-1-4302-2887-5_5		Steven Sanderson						Excluded	Excluded	new_screen			2						
519	Behave	Spotify Tailoring for Architectural Governance	http://link.springer.com/chapter/10.1007/978-3-030-58858-8_24		Abdallah SalamehJulian M. Bass						Excluded	Excluded	new_screen			2						
520	Behave	Sprint 1: Starting a Game	http://link.springer.com/chapter/10.1007/978-1-4302-3534-7_5		Jerrel BlankenshipMatthew BussaScott Millett						Excluded	Excluded	new_screen			2						
521	Behave	Subconscious Requirements: The Fright of Every Tester			Hans van Loenhoud						Excluded	Excluded	new_screen			2						
522	Behave	Success and Failure Factors for Adopting a Combined Approach: A Case Study of Two Software Development Teams	http://link.springer.com/chapter/10.1007/978-3-030-64148-1_8		Ingrid SignorettiMaximilian ZorzettiLarissa SalernoCassiano MorallesEliana PereiraCássio TrindadeSabrina MarczakRicardo Bastos						Excluded	Excluded	new_screen			2						
523	Behave	Supporting Agile Software Development by Natural Language Processing	http://link.springer.com/chapter/10.1007/978-3-642-45260-4_7		Barbara PlankThomas SauerIna Schaefer						Excluded	Excluded	new_screen			2						
524	Behave	Taking It to 11			Jeffrey ScheafferAruna RavichandranAlex Martins						Excluded	Excluded	new_screen			2						
525	Behave	TDD and BDD for Node.js with Mocha	http://link.springer.com/chapter/10.1007/978-1-4302-6596-2_3		Azat Mardan						Excluded	Excluded	new_screen			2						
526	Behave	TDD as an API Design Technique			Ervin Varga						Excluded	Excluded	new_screen			2						
527	Behave	Temporal Random Testing for Spark Streaming	http://link.springer.com/chapter/10.1007/978-3-319-33693-0_25		Adrián RiescoJuan Rodríguez-Hortalá						Excluded	Excluded	new_screen			2						
528	Behave	Test early, test often: a formative usability kit for writers	http://link.springer.com/chapter/10.1007/978-3-030-30701-1_6		Kaminsky, Sophie Kohn		https://doi.org/10.1145/147001.147007		47-55	"@inproceedings{10.1145/147001.147007,
    author = ""Kaminsky, Sophie Kohn"",
    title = ""Test early, test often: a formative usability kit for writers"",
    year = ""1992"",
    isbn = ""0897915321"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/147001.147007"",
    doi = ""10.1145/147001.147007"",
    booktitle = ""Proceedings of the 10th Annual International Conference on Systems Documentation"",
    pages = ""47-55"",
    numpages = ""9"",
    location = ""Ottawa, Ontario, Canada"",
    series = ""SIGDOC '92""
}"	Excluded	Excluded	new_screen			2	ACM		Test Early, Test Often	https://dl.acm.org/doi/10.1145/147001.147007	Association for Computing Machinery	nan; Venue; Abstract; Keywords; References
529	Behave	Test Frameworks	http://link.springer.com/chapter/10.1007/978-1-4302-4024-2_12		Stephen D. Ritchie						Excluded	Excluded	new_screen			2						
530	Behave	Gamification in Test-Driven Development Practice	The challenge of effectively developing and sustaining high-performance professional development practices in software engineering education is one that must be addressed. Test-driven development (TDD), an example of a key professional practical activity, is strongly linked to these high-performance practices. To examine the effects of gamification - the use of game design elements in a non-game context - on motivating students to develop and sustain TDD practice, an experiment was conducted and utilized ordinary least squares (OLS) regression to analyze the data. This experiment showed that gamification motivates students to do high-performing TDD practice. More specifically, gamification changes the individual's TDD behavior, increases engagement in the development activity, and the effect continues for a longer period even after gamification has ceased. Furthermore, a positive association between gamification and the maintainability of the team codebase was supported by the data.	Engagement;  Gamification;  Maintainability;  Software Engineering;  Test-driven Development	Ren, Wei		https://doi.org/10.1145/3617553.3617889		38-46	"@inproceedings{10.1145/3617553.3617889,
    author = ""Ren, Wei"",
    title = ""Gamification in Test-Driven Development Practice"",
    year = ""2023"",
    isbn = ""9798400703737"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3617553.3617889"",
    doi = ""10.1145/3617553.3617889"",
    abstract = ""The challenge of effectively developing and sustaining high-performance professional development practices in software engineering education is one that must be addressed. Test-driven development (TDD), an example of a key professional practical activity, is strongly linked to these high-performance practices. To examine the effects of gamification - the use of game design elements in a non-game context - on motivating students to develop and sustain TDD practice, an experiment was conducted and utilized ordinary least squares (OLS) regression to analyze the data. This experiment showed that gamification motivates students to do high-performing TDD practice. More specifically, gamification changes the individual's TDD behavior, increases engagement in the development activity, and the effect continues for a longer period even after gamification has ceased. Furthermore, a positive association between gamification and the maintainability of the team codebase was supported by the data."",
    booktitle = ""Proceedings of the 2nd International Workshop on Gamification in Software Development, Verification, and Validation"",
    pages = ""38-46"",
    numpages = ""9"",
    keywords = ""Engagement, Gamification, Maintainability, Software Engineering, Test-driven Development"",
    location = ""San Francisco, CA, USA"",
    series = ""Gamify 2023""
}"	Excluded	Excluded	new_screen			2	ACM		Test-Driven Development	https://dl.acm.org/doi/10.1145/3617553.3617889	Association for Computing Machinery	nan; Venue; References
531	Behave	Test-Driven Development 101	http://link.springer.com/chapter/10.1007/978-1-4842-6972-5_3		Juntao Qiu						Excluded	Excluded	new_screen			2						
532	Behave	Test-Driven Development as a Reliable Embedded Software Engineering Practice	http://link.springer.com/chapter/10.1007/978-3-642-40888-5_4		Piet CordemansSille Van LandschootJeroen BoydensEric Steegmans						Excluded	Excluded	new_screen			2						
533	Behave	Test-Driven Development in Swift	http://link.springer.com/chapter/10.1007/978-1-4842-5602-2_12		Gio Lodi						Excluded	Excluded	new_screen			2						
534	Behave	Automated Testing of Networked Systems Reliability	The reliability of a network is a crucial requirement for systems such as IoT, client-server, or cloud-based solutions. Unfortunately, real networks cannot be assumed to be fault-free, especially when considering various hardware problems, performance issues, or malicious attacks. Testing networked systems should therefore include evaluating fault tolerance under various network conditions. The paper presents a doctoral research project on automated verification of networked systems using fault-attack injection using a derived model of network communication.	Networked systems;  fault/attack injection;  network model;  testing	Rozs\'{\i}val, Michal		https://doi.org/10.1145/3650212.3685559		1920-1922	"@inproceedings{10.1145/3650212.3685559,
    author = ""Rozs\'{\i}val, Michal"",
    title = ""Automated Testing of Networked Systems Reliability"",
    year = ""2024"",
    isbn = ""9798400706127"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3650212.3685559"",
    doi = ""10.1145/3650212.3685559"",
    abstract = ""The reliability of a network is a crucial requirement for systems such as IoT, client-server, or cloud-based solutions. Unfortunately, real networks cannot be assumed to be fault-free, especially when considering various hardware problems, performance issues, or malicious attacks. Testing networked systems should therefore include evaluating fault tolerance under various network conditions. The paper presents a doctoral research project on automated verification of networked systems using fault-attack injection using a derived model of network communication."",
    booktitle = ""Proceedings of the 33rd ACM SIGSOFT International Symposium on Software Testing and Analysis"",
    pages = ""1920-1922"",
    numpages = ""3"",
    keywords = ""Networked systems, fault/attack injection, network model, testing"",
    location = ""Vienna, Austria"",
    series = ""ISSTA 2024""
}"	Excluded	Excluded	new_screen			2	ACM		Testing	https://dl.acm.org/doi/10.1145/3650212.3685559	Association for Computing Machinery	nan; Venue; References
535	Behave	Testing & Debugging	http://link.springer.com/chapter/10.1007/978-1-4842-3519-5_10		Fanie Reynders						Excluded	Excluded	new_screen			2						
536	Behave	Testing and Debugging Projects	http://link.springer.com/chapter/10.1007/978-1-4302-1637-7_7								Excluded	Excluded	new_screen			2						
537	Behave	Testing Batch Processes	http://link.springer.com/chapter/10.1007/978-1-4842-3724-3_13		Michael T. Minella						Excluded	Excluded	new_screen			2						
538	Behave	Testing Chatbots with Charm	http://link.springer.com/chapter/10.1007/978-3-030-58793-2_34		Sergio Bravo-SantosEsther GuerraJuan de Lara						Excluded	Excluded	new_screen			2						
539	Behave	Testing Go Applications	http://link.springer.com/chapter/10.1007/978-1-4842-1052-9_10		Shiju Varghese						Excluded	Excluded	new_screen			2						
540	Behave	Testing Idempotence for Infrastructure as Code	http://link.springer.com/chapter/10.1007/978-3-030-29509-7_3		Waldemar HummerFlorian RosenbergFábio OliveiraTamar Eilam						Excluded	Excluded	new_screen			2						
541	Behave	Testing in DevOps	http://link.springer.com/chapter/10.1007/978-1-4302-6059-2_11		Frank Faber						Excluded	Excluded	new_screen			2						
542	Behave	Testing in Node.js	http://link.springer.com/chapter/10.1007/978-3-319-44902-9_7		Cory Gackenheimer						Excluded	Excluded	new_screen			2						
543	Behave	Testing Strategies in an Agile Context	http://link.springer.com/chapter/10.1007/978-3-030-29509-7_9		Zornitsa Nikolova						Excluded	Excluded	new_screen			2						
544	Behave	Testing Strategies: How to Become a Better Tester?	http://link.springer.com/chapter/10.1007/978-3-319-73195-7_2		Adam Roman						Excluded	Excluded	new_screen			2						
545	Behave	Testing the Distributed System	http://link.springer.com/chapter/10.1007/978-1-4842-3165-4_6		Moises Macero						Excluded	Excluded	new_screen			2						
546	Behave	Testing the User Interface	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_13		Abhishek Mishra						Excluded	Excluded	new_screen			2						
547	Behave	Testing URLSession	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_7		Abhishek Mishra						Excluded	Excluded	new_screen			2						
548	Behave	Testing Your Backbone.js Application	http://link.springer.com/chapter/10.1007/978-1-4302-6335-7_8		James Sugrue						Excluded	Excluded	new_screen			2						
549	Behave	Testing, Deployment, and Troubleshooting	http://link.springer.com/chapter/10.1007/978-1-4842-5116-4_7		Bryan LimRichard LaFranchi						Excluded	Excluded	new_screen			2						
550	Behave	Testmanagement und Softwaretest	http://link.springer.com/book/10.1007/978-3-658-25087-4		Frank Witte						Excluded	Excluded	new_screen			2						
551	Behave	Thailand’s Software Startup Ecosystem	http://link.springer.com/chapter/10.1007/978-3-030-35983-6_12		Aziz NanthaamornphongRattana Wetprasit						Excluded	Excluded	new_screen			2						
552	Behave	The ASMETA Approach to Safety Assurance of Software Systems	http://link.springer.com/chapter/10.1007/978-3-030-76020-5_13		Paolo ArcainiAndrea BombardaSilvia BonfantiAngelo GargantiniElvinia RiccobenePatrizia Scandurra						Excluded	Excluded	new_screen			2						
553	Behave	The Basic Spring Boot Application	http://link.springer.com/chapter/10.1007/978-1-4842-3165-4_2		Moises Macero						Excluded	Excluded	new_screen			2						
554	Behave	The basics of simulation	Simulation is experimentation with a model. The behavior of the model imitates some salient aspect of the behavior of the system under study and the user experiments with the model to infer this behavior. This general framework has proven a powerful adjunct to learning, problem solving, design, and control. In this tutorial, we focus principally on discrete-event simulation - its underlying concepts, structure, and application.		White, K. Preston; Ingalls, Ricki G.		https://dl.acm.org/doi/10.5555/3466184.3466308		1087-1101	"@inproceedings{10.5555/3466184.3466308,
    author = ""White, K. Preston and Ingalls, Ricki G."",
    title = ""The basics of simulation"",
    year = ""2021"",
    isbn = ""9781728194998"",
    publisher = ""IEEE Press"",
    abstract = ""Simulation is experimentation with a model. The behavior of the model imitates some salient aspect of the behavior of the system under study and the user experiments with the model to infer this behavior. This general framework has proven a powerful adjunct to learning, problem solving, design, and control. In this tutorial, we focus principally on discrete-event simulation - its underlying concepts, structure, and application."",
    booktitle = ""Proceedings of the Winter Simulation Conference"",
    pages = ""1087-1101"",
    numpages = ""15"",
    location = ""Orlando, Florida"",
    series = ""WSC '20""
}"	Excluded	Excluded	new_screen			2	ACM		The Basics	https://dl.acm.org/doi/10.5555/3466184.3466308	IEEE Press	nan; Venue; Keywords; References
555	Behave	The Big Green Check Mark	http://link.springer.com/chapter/10.1007/978-1-4842-2701-5_5		Patrick Gleeson						Excluded	Excluded	new_screen			2						
556	Behave	The Design, Evolution, and Use of KernelF	http://link.springer.com/chapter/10.1007/978-3-319-93317-7_1		Markus Voelter						Excluded	Excluded	new_screen			2						
557	Behave	The Distinct Trends and Transitions in the Information Technology (IT) Space	http://link.springer.com/chapter/10.1007/978-3-319-78637-7_1		Pethuru RajAnupama Raman						Excluded	Excluded	new_screen			2						
558	Behave	The Ecosystem: Extending React Native	http://link.springer.com/chapter/10.1007/978-1-4842-4454-8_10		Akshat PaulAbhishek Nalwaya						Excluded	Excluded	new_screen			2						
559	Behave	The evolution of agile software development in Brazil	http://link.springer.com/article/10.1007/s13173-013-0114-x		Claudia de O. MeloViviane SantosEduardo KatayamaHugo CorbucciRafael PrikladnickiAlfredo GoldmanFabio Kon						Excluded	Excluded	new_screen			2						
560	Behave	The Goals Approach: Agile Enterprise Driven Software Development	http://link.springer.com/chapter/10.1007/978-3-319-52593-8_13		Pedro ValenteThiago SilvaMarco WincklerNuno Nunes						Excluded	Excluded	new_screen			2						
561	Behave	The Goals Approach: Enterprise Model-Driven Agile Human-Centered Software Engineering	http://link.springer.com/chapter/10.1007/978-3-319-44902-9_17		Pedro ValenteThiago Rocha SilvaMarco WincklerNuno Jardim Nunes						Excluded	Excluded	new_screen			2						
562	Behave	The MVVM Architectural Pattern	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_3		Abhishek Mishra						Excluded	Excluded	new_screen			2						
563	Behave	The Product Backlog	http://link.springer.com/chapter/10.1007/978-1-4842-4164-6_9		Frederik M. Fowler						Excluded	Excluded	new_screen			2						
564	Behave	The Protractor Handbook	http://link.springer.com/book/10.1007/978-1-4842-7289-3		Shashank Shukla						Excluded	Excluded	new_screen			2						
565	Behave	The State of Agile Software Development in the Czech Republic: Preliminary Findings Indicate the Dominance of “Abridged” Scrum	http://link.springer.com/chapter/10.1007/978-3-030-37632-1_4		Michal DolezelAlena BuchalcevovaMichal Mencik						Excluded	Excluded	new_screen			2						
566	Behave	The Study of the Effectiveness of the Secure Software Development Life-Cycle Models in IT Project Management	http://link.springer.com/chapter/10.1007/978-3-030-14070-0_14		Saniora R. DuclervilJing-Chiou Liou						Excluded	Excluded	new_screen			2						
567	Behave	To Build a Fire	http://link.springer.com/chapter/10.1007/978-1-4842-4388-6_7		Dave HarrisonKnox Lively						Excluded	Excluded	new_screen			2						
568	Behave	Towards a Taxonomy of Microservices Architectures	http://link.springer.com/chapter/10.1007/978-3-319-74781-1_15		Martin Garriga						Excluded	Excluded	new_screen			2						
569	Behave	Towards a Verification-Driven Iterative Development of Software for Safety-Critical Cyber-Physical Systems	http://link.springer.com/article/10.1186/s13174-021-00132-z		Marjan SirjaniLuciana ProvenzanoSara Abbaspour AsadollahMahshid Helali MoghadamMehrdad Saadatmand						Excluded	Excluded	new_screen			2						
570	Behave	Towards an Executable Methodology for the Formalization of Legal Texts	http://link.springer.com/chapter/10.1007/978-3-030-44638-3_10		Tomer LibalAlexander Steen						Excluded	Excluded	new_screen			2						
571	Behave	Towards Automated UI-Tests for Sensor-Based Mobile Applications	http://link.springer.com/chapter/10.1007/978-3-319-22689-7_1		Tobias GriebeMarc HeseniusVolker Gruhn						Excluded	Excluded	new_screen			2						
572	Behave	Towards Establishing Mass Customization Methods for Cloud-Compliant Services	http://link.springer.com/chapter/10.1007/978-3-642-32847-3_75		Shigeru HosonoYoshiki Shimomura						Excluded	Excluded	new_screen			2						
573	Behave	Towards More Flexible Enterprise Information Systems	http://link.springer.com/chapter/10.1007/978-3-642-36611-6_12		Rogerio Atem de CarvalhoBjörn Johansson						Excluded	Excluded	new_screen			2						
574	Behave	Towards Transparent Legal Formalization	http://link.springer.com/chapter/10.1007/978-3-030-82017-6_18		Tomer LibalTereza Novotná						Excluded	Excluded	new_screen			2						
575	Behave	Towards User-Friendly Projectional Editors	http://link.springer.com/chapter/10.1007/978-3-319-11245-9_3		Markus VoelterJanet SiegmundThorsten BergerBernd Kolb						Excluded	Excluded	new_screen			2						
576	Behave	Transitioning Towards Continuous Experimentation in a Large Software Product and Service Development Organisation – A Case Study	http://link.springer.com/chapter/10.1007/978-3-319-49094-6_22		Sezin Gizem YamanFabian FagerholmMyriam MunezeroJürgen MünchMika AaltolaChristina PalmuTomi Männistö						Excluded	Excluded	new_screen			2						
577	Behave	TSTL: the template scripting testing language	http://link.springer.com/article/10.1007/s10009-016-0445-y		Josie HolmesAlex GroceJervis PintoPranjal MittalPooria AzimiKevin KellarJames O’Brien						Excluded	Excluded	new_screen			2						
578	Behave	Understanding Core JUnit 5	http://link.springer.com/chapter/10.1007/978-1-4842-3015-2_2		Shekhar GulatiRahul Sharma						Excluded	Excluded	new_screen			2						
579	Behave	Understanding Services with Reactive Programming	http://link.springer.com/chapter/10.1007/978-1-4842-2620-9_5		Oren Farhi						Excluded	Excluded	new_screen			2						
580	Behave	Engaging Developers in Exploratory Unit Testing through Gamification	Exploratory testing, known for its flexibility and ability to uncover unexpected issues, often faces challenges in maintaining systematic coverage and producing reproducible results. To address these challenges, we investigate whether gamification of testing directly in the Integrated Development Environment (IDE) can guide exploratory testing. We therefore show challenges and quests generated by the Gamekins gamification system to make testing more engaging and seamlessly blend it with regular coding tasks. In a 60-minute experiment, we evaluated Gamekins' impact on test suite quality and bug detection. The results show that participants actively interacted with the tool, achieving nearly 90\% line coverage and detecting 11 out of 14 bugs. Additionally, participants reported enjoying the experience, indicating that gamification can enhance developer participation in testing and improve software quality.	Exploratory Testing;  Gamification;  IDE;  IntelliJ;  Software Testing	Straubinger, Philipp; Fraser, Gordon		https://doi.org/10.1145/3678869.3685683		2-9	"@inproceedings{10.1145/3678869.3685683,
    author = ""Straubinger, Philipp and Fraser, Gordon"",
    title = ""Engaging Developers in Exploratory Unit Testing through Gamification"",
    year = ""2024"",
    isbn = ""9798400711138"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3678869.3685683"",
    doi = ""10.1145/3678869.3685683"",
    abstract = ""Exploratory testing, known for its flexibility and ability to uncover unexpected issues, often faces challenges in maintaining systematic coverage and producing reproducible results. To address these challenges, we investigate whether gamification of testing directly in the Integrated Development Environment (IDE) can guide exploratory testing. We therefore show challenges and quests generated by the Gamekins gamification system to make testing more engaging and seamlessly blend it with regular coding tasks. In a 60-minute experiment, we evaluated Gamekins' impact on test suite quality and bug detection. The results show that participants actively interacted with the tool, achieving nearly 90\\% line coverage and detecting 11 out of 14 bugs. Additionally, participants reported enjoying the experience, indicating that gamification can enhance developer participation in testing and improve software quality."",
    booktitle = ""Proceedings of the 3rd ACM International Workshop on Gamification in Software Development, Verification, and Validation"",
    pages = ""2-9"",
    numpages = ""8"",
    keywords = ""Exploratory Testing, Gamification, IDE, IntelliJ, Software Testing"",
    location = ""Vienna, Austria"",
    series = ""Gamify 2024""
}"	Excluded	Excluded	new_screen			2	ACM		Unit Testing	https://dl.acm.org/doi/10.1145/3678869.3685683	Association for Computing Machinery	nan; Venue; References
581	Behave	Unit Testing and Integration Testing	http://link.springer.com/chapter/10.1007/978-1-4302-4726-5_15		Tugberk UgurluAlexander ZeitlerAli Kheyrollahi						Excluded	Excluded	new_screen			2						
582	Behave	Unit Tests and TDD	http://link.springer.com/chapter/10.1007/978-1-4842-3832-5_17		Arnon Axelrod						Excluded	Excluded	new_screen			2						
583	Behave	Unity Application Testing Automation with Appium and Image Recognition	http://link.springer.com/chapter/10.1007/978-3-319-71734-0_12		Maxim MozgovoyEvgeny Pyshkin						Excluded	Excluded	new_screen			2						
584	Behave	Use, potential, and showstoppers of models in automotive requirements engineering	http://link.springer.com/article/10.1007/s10270-018-0683-4		Grischa LiebelMatthias TichyEric Knauss						Excluded	Excluded	new_screen			2						
585	Behave	Useful RSpec Tools	http://link.springer.com/chapter/10.1007/978-1-4842-6141-5_5		Panos Matsinopoulos						Excluded	Excluded	new_screen			2						
586	Behave	User Interface Design	http://link.springer.com/chapter/10.1007/978-1-4842-4303-9_4		Shailesh Kumar ShivakumarSourabhh Sethii						Excluded	Excluded	new_screen			2						
587	Behave	Using Agile Testing in an Academic Health System Case Study	http://link.springer.com/chapter/10.1007/978-3-319-67549-7_11		Daniela America da SilvaSamara Cardoso dos SantosRodrigo Monteiro de Barros SantanaFilipe Santiago QueirozGildarcio Sousa GoncalvesVictor Ulisses PuglieseAlexandre NascimentoLuiz Alberto Vieira DiasAdilson Marques da CunhaJohnny MarquesPaulo Marcelo Tasinaffo						Excluded	Excluded	new_screen			2						
588	Behave	Using Data Integration for Security Testing	http://link.springer.com/chapter/10.1007/978-3-658-19969-2_3		Sébastien SalvaLoukmen Regainia						Excluded	Excluded	new_screen			2						
589	Behave	Using language workbenches and domain-specific languages for safety-critical software development	http://link.springer.com/chapter/10.1007/978-3-662-50263-1_3		Markus VoelterBernd KolbKlaus BirkenFederico TomassettiPatrick AlffLaurent WiartAndreas WortmannArne Nordmann						Excluded	Excluded	new_screen			2						
590	Behave	Web Testing Practices	http://link.springer.com/chapter/10.1007/978-1-4302-3970-3_3		Matthew Sacks						Excluded	Excluded	new_screen			2						
591	Behave	What Do They Do All Day?	http://link.springer.com/chapter/10.1007/978-1-4842-2701-5_4		Patrick Gleeson						Excluded	Excluded	new_screen			2						
592	Behave	What Is Unit Testing?	http://link.springer.com/chapter/10.1007/978-1-4842-1212-7_2		Rādhārādhya Dāsa						Excluded	Excluded	new_screen			2						
593	Behave	What your plug-in test suites really test: an integration perspective on test suite understanding	http://link.springer.com/article/10.1007/s10664-012-9235-7		Michaela GreilerArie van Deursen						Excluded	Excluded	new_screen			2						
594	Behave	What’s Ahead for You and Scrum?	http://link.springer.com/chapter/10.1007/978-1-4302-2887-5_1		Jerrel BlankenshipMatthew BussaScott Millett						Excluded	Excluded	new_screen			2						
595	Behave	What’s the Big Idea?	http://link.springer.com/chapter/10.1007/978-1-4842-6711-0_2		Adam Freeman						Excluded	Excluded	new_screen			2						
596	Behave	Why Test-Driven Development Is a Must for Code Quality	http://link.springer.com/chapter/10.1007/978-3-662-56386-1_9		Paul David Hardy						Excluded	Excluded	new_screen			2						
597	Behave	Windows Server-Administration mit PowerShell 5.1	http://link.springer.com/book/10.1007/978-3-658-17666-2		Peter Monadjemi						Excluded	Excluded	new_screen			2						
598	Behave	Secure Generic Remote Workflow Execution with TEEs	In scientific environments, the frequent need to process substantial volumes of data poses a common challenge. Individuals tasked with executing these computations frequently encounter a deficit in local computational resources, leading them to opt for the facilities of a Cloud Service Provider (CSP) for data processing. However, the data subjected to these calculations may be subject to confidentiality constraints. This paper introduces a proof-of-concept framework that leverages Gramine LibOS and Intel SGX, enabling the protection of generic remote workflow computations through SGX enclaves as Trusted Execution Environments (TEEs). The framework entails the delineation of user and CSP behavior and has been implemented using Bash scripts. Furthermore, an infrastructure has been designed for the Data Center Attestation Primitives (DCAP) remote attestation mechanism, wherein the user gains trust in the proper instantiation of the enclave within the CSP. To assess the framework efficacy, it has been tested on two distinct workflows, one trivial and the other involving real-world bioinformatics applications for processing DNA data. The performance study revealed that the framework incurred an acceptable overhead, ranging from a factor of x1.4 to x1.8 compared to unsafe execution practice.	trusted execution environment;  workflow;  Intel SGX;  gramine;  privacy-preserving;  confidential computing	Brescia, Lorenzo; Aldinucci, Marco		https://doi.org/10.1145/3642978.3652834		8-13	"@inproceedings{10.1145/3642978.3652834,
    author = ""Brescia, Lorenzo and Aldinucci, Marco"",
    title = ""Secure Generic Remote Workflow Execution with TEEs"",
    year = ""2024"",
    isbn = ""9798400705465"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3642978.3652834"",
    doi = ""10.1145/3642978.3652834"",
    abstract = ""In scientific environments, the frequent need to process substantial volumes of data poses a common challenge. Individuals tasked with executing these computations frequently encounter a deficit in local computational resources, leading them to opt for the facilities of a Cloud Service Provider (CSP) for data processing. However, the data subjected to these calculations may be subject to confidentiality constraints. This paper introduces a proof-of-concept framework that leverages Gramine LibOS and Intel SGX, enabling the protection of generic remote workflow computations through SGX enclaves as Trusted Execution Environments (TEEs). The framework entails the delineation of user and CSP behavior and has been implemented using Bash scripts. Furthermore, an infrastructure has been designed for the Data Center Attestation Primitives (DCAP) remote attestation mechanism, wherein the user gains trust in the proper instantiation of the enclave within the CSP. To assess the framework efficacy, it has been tested on two distinct workflows, one trivial and the other involving real-world bioinformatics applications for processing DNA data. The performance study revealed that the framework incurred an acceptable overhead, ranging from a factor of x1.4 to x1.8 compared to unsafe execution practice."",
    booktitle = ""Proceedings of the 2nd Workshop on Workflows in Distributed Environments"",
    pages = ""8-13"",
    numpages = ""6"",
    keywords = ""trusted execution environment, workflow, Intel SGX, gramine, privacy-preserving, confidential computing"",
    location = ""Athens, Greece"",
    series = ""WiDE '24""
}"	Excluded	Excluded	new_screen			2	ACM		Workflow	https://dl.acm.org/doi/10.1145/3642978.3652834	Association for Computing Machinery	nan; Venue; References
599	Behave	Working with Legacy Code	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_8		Abhishek Mishra						Excluded	Excluded	new_screen			2						
600	Behave	Writing Your First Set of Unit Tests with Xcode	http://link.springer.com/chapter/10.1007/978-1-4842-2689-6_2		Abhishek Mishra						Excluded	Excluded	new_screen			2						
