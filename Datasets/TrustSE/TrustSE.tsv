key	project	title	abstract	keywords	authors	venue	doi	references	pages	bibtex	screened_decision	final_decision	mode	inclusion_criteria	exclusion_criteria	reviewer_count	source	year	meta_title	link	publisher	metadata_missing
0	TrustSE	On the impact of security vulnerabilities in the npm package dependency network	Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.	dependency network; security vulnerability; semantic versioning; software ecosystem; software repository mining	Alexandre Decan; Tom Mens; Eleni Constantinou	MSR '18: Proceedings of the 15th International Conference on Mining Software Repositories	https://doi.org/10.1145/3196398.3196401		181-191							2	ACM		On the impact of security vulnerabilities in the npm package dependency network	https://dl.acm.org/doi/10.1145/3196398.3196401	Association for Computing Machinery	nan; References; Year; Bibtex
1	TrustSE	Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
2	TrustSE	Toward an approach to measuring software trust														2						
3	TrustSE	Selecting third-party libraries: The practitioners' perspective														2						
4	TrustSE	Evaluating and selecting software packages: A review														2						
5	TrustSE	Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
6	TrustSE	Assessing software service quality and trustworthiness at selection time														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
7	TrustSE	The importance of trust in software engineers' assessment and choice of information sources														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
8	TrustSE	Quality Process-Oriented Software Credibility Measurement and Assessment														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
9	TrustSE	A survey on open source software trustworthiness														2						
10	TrustSE	Software ecosystem call graph for dependency management	A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven ornpm.Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and theleftpadpackage removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.		Joseph Hejderup; Arie van Deursen; Georgios Gousios	ICSE-NIER '18: Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1145/3183399.3183417		101-104							2	ACM		Software ecosystem call graph for dependency management	https://dl.acm.org/doi/10.1145/3183399.3183417	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
11	TrustSE	Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
12	TrustSE	Trusting a library: A study of the latency to adopt the latest maven release														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
13	TrustSE	Requirements engineering for trust management: model, methodology, and reasoning														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
14	TrustSE	FESR - Framework to evaluate Software Reliability based on software metrics	Evaluating reliability of software is hot concern for decision makers and software engineers seeing as if we assess, it cannot be mastered. It is common that reliability of system stratum could be employed for evaluating growth of testing of system with help of comparison of failure of currently implemented software with required system. It is also generic that reliability of system echelon assures improved utilization by the user consequently enhanced contentment of customers. In this paper, our goal is to put forward a meticulously analysis of reliability measurement process. As the existing approaches still lack software reliability, quality and its growth, successful generation of test cases, scalability with large software systems, cost and customer satisfaction. we have projected a new framework of software reliability measurement process based on software metrics. Our model is evaluated by comparing it with an existing model and a published case study. The control experiment is used to evaluate FESR Framework.	Mean Time to Failure; Reliability Growth Metrics; Service Level Objectives; Software Quality	Hurriya Fahad; Irfan Ahmed; Jabar Mahmood; Saman .; Khadija Batool; Qasim Ali	HP3C '24: Proceedings of the 2024 8th International Conference on High Performance Compilation, Computing and Communications	https://doi.org/10.1145/3675018.3675030		139-145							2	ACM		Software reliability	https://dl.acm.org/doi/10.1145/3675018.3675030	Association for Computing Machinery	nan; References; Year; Bibtex
15	TrustSE	On the topology of package dependency networks:a comparison of three programming language ecosystems	Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one.	JavaScript; Python; R; component dependency graph; software distribution; software ecosystem	Alexandre Decan; Tom Mens; Maelick Claes	ECSAW '16: Proccedings of the 10th European Conference on Software Architecture Workshops	https://doi.org/10.1145/2993412.3003382		1-4							2	ACM		On the topology of package dependency networks: A comparison of three programming language ecosystems	https://dl.acm.org/doi/10.1145/2993412.3003382	Association for Computing Machinery	nan; References; Year; Bibtex
16	TrustSE	When GitHub meets CRAN: An analysis of inter-repository package dependency problems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
17	TrustSE	A comprehensive approach for software dependency resolution														2						
18	TrustSE	Security and trust requirements engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
19	TrustSE	A process-oriented methodology for assessing and improving software trustworthiness	A high-level, technical summary of the Trusted Software Methodology (TSM) is provided in this paper. The trust principles and trust classes that comprise the TSM are presented and several engineering investigations and case studies surrounding the TSM are outlined. Appendices are included that highlight important areas of the TSM.		Edward Amoroso; Carol Taylor; John Watson; Jonathan Weiss	CCS '94: Proceedings of the 2nd ACM Conference on Computer and communications security	https://doi.org/10.1145/191177.191188		39-50							2	ACM		A process-oriented methodology for assessing and improving software trustworthiness	https://dl.acm.org/doi/10.1145/191177.191188	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
20	TrustSE	Enhancing functionality in an enterprise software package														2						
21	TrustSE	Validation of ultra-high dependability for software-based systems														2						
22	TrustSE	Competition and collaboration in requirements engineering: A case study of an emerging software ecosystem														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
23	TrustSE	Managing the unmanageable: integrating the supply chain with new developments in software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
24	TrustSE	Human factors in information security: The insider threat–Who can you trust these days?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
25	TrustSE	Software ecosystems:a software ecosystem strategy assessment model	Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem.	business ecosystems; software ecosystems	Ivo van den Berk; Slinger Jansen; Lútzen Luinenburg	ECSA '10: Proceedings of the Fourth European Conference on Software Architecture: Companion Volume	https://doi.org/10.1145/1842752.1842781		127-134							2	ACM		Software ecosystems: a software ecosystem strategy assessment model	https://dl.acm.org/doi/10.1145/1842752.1842781	Association for Computing Machinery	nan; References; Year; Bibtex
26	TrustSE	Trust, partner selection and innovation outcome in collaborative new product development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
27	TrustSE	From ratings to trust:an empirical study of implicit trust in recommender systems	Trust has been extensively studied and its effectiveness demonstrated in recommender systems. Due to the lack of explicit trust information in most systems, manytrust metricapproaches have been proposed to infer implicit trust from user ratings. However, previous works have not compared these different approaches, and oftentimes focus only on the performance of predictive item ratings. In this paper, we first analyse five kinds of trust metrics in light of the properties of trust. We conduct an empirical study to explore the ability of trust metrics to distinguish explicit trust from implicit trust and to generate accurate predictions. Experimental results on two real-world data sets show that existing trust metrics cannot provide satisfying performance, and indicate that future metrics should be designed more carefully.	ratings; recommender systems; similarity; trust metrics	Guibing Guo; Jie Zhang; Daniel Thalmann; Anirban Basu; Neil Yorke-Smith	SAC '14: Proceedings of the 29th Annual ACM Symposium on Applied Computing	https://doi.org/10.1145/2554850.2554878		248-253							2	ACM		From ratings to trust: an empirical study of implicit trust in recommender systems	https://dl.acm.org/doi/10.1145/2554850.2554878	Association for Computing Machinery	nan; References; Year; Bibtex
28	TrustSE	A Survey on Trust Modeling	The concept of trust and/or trust management has received considerable attention in engineering research communities as trust is perceived as the basis for decision making in many contexts and the motivation for maintaining long-term relationships based on cooperation and collaboration. Even if substantial research effort has been dedicated to addressing trust-based mechanisms or trust metrics (or computation) in diverse contexts, prior work has not clearly solved the issue of how to model and quantify trust with sufficient detail and context-based adequateness. The issue of trust quantification has become more complicated as we have the need to derive trust from complex, composite networks that may involve four distinct layers of communication protocols, information exchange, social interactions, and cognitive motivations. In addition, the diverse application domains require different aspects of trust for decision making such as emotional, logical, and relational trust. This survey aims to outline the foundations of trust models for applications in these contexts in terms of the concept of trust, trust assessment, trust constructs, trust scales, trust properties, trust formulation, and applications of trust. We discuss how different components of trust can be mapped to different layers of a complex, composite network; applicability of trust metrics and models; research challenges; and future work directions.	Trust modeling; composite trust; decision making; trust; trustee; trustor	Jin-Hee Cho; Kevin Chan; Sibel Adali	ACM Computing Surveys (CSUR)	https://doi.org/10.1145/2815595									2	ACM		A survey on trust modeling	https://dl.acm.org/doi/10.1145/2815595	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
29	TrustSE	Enabling trusted software integrity	Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications.		Darko Kirovski; Milenko Drinić; Miodrag Potkonjak	ASPLOS X: Proceedings of the 10th international conference on Architectural support for programming languages and operating systems	https://doi.org/10.1145/605397.605409		108-120							2	ACM		Enabling trusted software integrity	https://dl.acm.org/doi/10.1145/605397.605409	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
30	TrustSE	A software-based trusted platform module emulator														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
31	TrustSE	From trust to dependability through risk analysis														2						
32	TrustSE	Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
33	TrustSE	A cognitive theory of trust														2						
34	TrustSE	Trust factors influencing the adoption of internet-based interorganizational systems														2						
35	TrustSE	Trust based service optimization selection for cloud computing														2						
36	TrustSE	Project governance: Balancing control and trust in dealing with risk														2						
37	TrustSE	Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
38	TrustSE	Establishing and maintaining trust in software outsourcing relationships: An empirical investigation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
39	TrustSE	Trust in information technology														2						
40	TrustSE	CAN I TRUST THIS SOFTWARE PACKAGE?														2						
41	TrustSE	Software reliability and dependability:a roadmap		COTS reliability; dependability modelling and assessment; diversity; reliability engineering	Bev Littlewood; Lorenzo Strigini	ICSE '00: Proceedings of the Conference on The Future of Software Engineering	https://doi.org/10.1145/336512.336551		175-188							2	ACM		Software reliability and dependability: a roadmap	https://dl.acm.org/doi/10.1145/336512.336551	Association for Computing Machinery	nan; Abstract; References; Year; Bibtex
42	TrustSE	Service-based software: the future for flexible software														2						
43	TrustSE	Analyzing package dependencies in open source software using a directed random graph														2						
44	TrustSE	Structure and evolution of package dependency networks	Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.		Riivo Kikas; Georgios Gousios; Marlon Dumas; Dietmar Pfahl	MSR '17: Proceedings of the 14th International Conference on Mining Software Repositories	https://doi.org/10.1109/MSR.2017.55		102-112							2	ACM		Structure and evolution of package dependency networks	https://dl.acm.org/doi/10.1109/MSR.2017.55	IEEE Press	nan; Keywords; References; Year; Bibtex
45	TrustSE	The development and evaluation of an online master's module using an open-source software package														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
46	TrustSE	Trust in a specific technology:An investigation of its components and measures	Trust plays an important role in many Information Systems (IS)-enabled situations. Most IS research employs trust as a measure of interpersonal or person-to-firm relations, such as trust in a Web vendor or a virtual team member. Although trust in other people is important, this article suggests that trust in the Information Technology (IT) itself also plays a role in shaping IT-related beliefs and behavior. To advance trust and technology research, this article presents a set of trust in technology construct definitions and measures. We also empirically examine these construct measures using tests of convergent, discriminant, and nomological validity. This study contributes to the literature by providing: (a) a framework that differentiates trust in technology from trust in people, (b) a theory-based set of definitions necessary for investigating different kinds of trust in technology, and (c) validated trust in technology measures useful to research and practice.	Trust; construct development; trust in technology	D. Harrison Mcknight; Michelle Carter; Jason Bennett Thatcher; Paul F. Clay	ACM Transactions on Management Information Systems (TMIS)	https://doi.org/10.1145/1985347.1985353									2	ACM		Trust in a specific technology: An investigation of its components and measures	https://dl.acm.org/doi/10.1145/1985347.1985353	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
47	TrustSE	Estimating Security Risk in Open Source Package Repositories: An Empirical Analysis and Predictive Model of Software Vulnerabilities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
48	TrustSE	Small business preference for software package														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
49	TrustSE	Defining open source software project success														2						
50	TrustSE	Toward Decentralized Package Management														2						
51	TrustSE	Toward a distributed package management system														2						
52	TrustSE	Self-organization of teams for free/libre open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
53	TrustSE	Why Free-Libre/Open Source Software (FLOSS)? Look at the Numbers!														2						
54	TrustSE	The role of trust management in distributed systems security														2						
55	TrustSE	Open source software: perspectives for development														2						
56	TrustSE	A look in the mirror:attacks on package managers	This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers.	mirrors; package management; replay attack	Justin Cappos; Justin Samuel; Scott Baker; John H. Hartman	CCS '08: Proceedings of the 15th ACM conference on Computer and communications security	https://doi.org/10.1145/1455770.1455841		565-574							2	ACM		Attacks on Package Managers	https://dl.acm.org/doi/10.1145/1455770.1455841	Association for Computing Machinery	nan; References; Year; Bibtex
57	TrustSE	Entering the circle of trust:developer initiation as committers in open-source projects	The success of an open-source project depends to a large degree on the proactive and constructive participation by the developer community. An important role that developers play in a project is that of a code committer. However, code-commit privilege is typically restricted to the core group of a project. In this paper, we study the phenomenon of the induction of external developers as code committers. The trustworthiness of an external developer is one of the key factors that determines the granting of commit privileges. Therefore, we formulate different hypotheses to explain how the trust is established in practice. To investigate our hypotheses, we developed an automated approach based on mining code repositories and bug-tracking systems. We implemented the approach and performed an empirical study, using the Eclipse projects, to test the hypotheses. Our results indicate that, most frequently, developers establish trust and credibility in a project by contributing to the project in a non-committer role. Moreover, the employing organization of a developer is another factor--although a less significant one--that influences trust.	code committer; developer roles; mining bug repository; mining code repository; open-source software	Vibha Singhal Sinha; Senthil Mani; Saurabh Sinha	MSR '11: Proceedings of the 8th Working Conference on Mining Software Repositories	https://doi.org/10.1145/1985441.1985462		133-142							2	ACM		Entering the circle of trust: developer initiation as committers in open-source projects	https://dl.acm.org/doi/10.1145/1985441.1985462	Association for Computing Machinery	nan; References; Year; Bibtex
58	TrustSE	Striking a balance between trust and control in a virtual organization: a content analysis of open source software case studies														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
59	TrustSE	What do we know about developer motivation?														2						
60	TrustSE	A Quantitative Analysis of Developer Information Needs in Software Ecosystems	We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs.	Software ecosystems; frameworks and libraries; open source software; program comprehension; programmer needs	Nicole Haenni; Mircea Lungu; Niko Schwarz; Oscar Nierstrasz	ECSAW '14: Proceedings of the 2014 European Conference on Software Architecture Workshops	https://doi.org/10.1145/2642803.2642815		1-6							2	ACM		A quantitative analysis of developer information needs in software ecosystems	https://dl.acm.org/doi/10.1145/2642803.2642815	Association for Computing Machinery	nan; References; Year; Bibtex
61	TrustSE	Trust (and mistrust) in secure applications			John Viega; Tadayoshi Kohno; Bruce Potter	Communications of the ACM	https://doi.org/10.1145/359205.359223		31-36							2	ACM		Trust (and mistrust) in secure applications	https://dl.acm.org/doi/10.1145/359205.359223	Association for Computing Machinery	nan; Abstract; Keywords; References; Year; Bibtex
62	TrustSE	The moderating role of development stage in free/open source software project performance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
63	TrustSE	The open source software development phenomenon: An analysis based on social network theory														2						
64	TrustSE	Determinants of open source software project success: A longitudinal study														2						
65	TrustSE	From software product lines to software ecosystems	Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software.		Jan Bosch	SPLC '09: Proceedings of the 13th International Software Product Line Conference	https://doi.org/10.5555/1753235.1753251		111-119							2	ACM		From software product lines to software ecosystems.	https://dl.acm.org/doi/10.5555/1753235.1753251	Carnegie Mellon University	nan; Keywords; References; Year; Bibtex
66	TrustSE	Open source interface politics:identity, acceptance, trust, and lobbying	A study of the Drupal open source project shows the problematic status of usability designers with respect to the larger developer community. Issues of power, trust, and identity arise and affect the way that usability recommendations are acted on or ignored. Making a straightforward case for a particular interface design can be insufficient to convince developers. Instead various additional lobbying strategies may be employed to build up support for the design.	lobbying; open source; politics; usability	Roshanak Zilouchian Moghaddam; Michael Twidale; Kora Bongen	CHI EA '11: CHI '11 Extended Abstracts on Human Factors in Computing Systems	https://doi.org/10.1145/1979742.1979835		1723-1728							2	ACM		Open source interface politics: identity, acceptance, trust, and lobbying	https://dl.acm.org/doi/10.1145/1979742.1979835	Association for Computing Machinery	nan; References; Year; Bibtex
67	TrustSE	Multi-dimensions of Developer Trustworthiness Assessment in OSS Community														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
68	TrustSE	Theory of software reliability based on components	We present a foundational theory of software system reliability based on components. The theory describes how component developers can design and test their components to produce measurements that are later used by system designers to calculate composite system reliability — without implementation and test of the system being designed. The theory describes how to make component measurements that are independent of operational profiles, and how to incorporate the overall system-level operational profile into the system reliability calculations. In principle, the theory resolves the central problem of assessing a component, which is: a component developer cannot know how the component will be used and so cannot certify it for an arbitrary use; but if the component buyer must certify each component before using it, component-based development loses much of its appeal. This dilemma is resolved if the component developer does the certification and provides the results in such a way that the component buyer can factor in the usage information later, without repeating the certification. Our theory addresses the basic technical problems inherent in certifying components to be released for later use in an arbitrary system.	CBSE; COTS; foundational theory; reliability composition; software components	Dick Hamlet; Dave Mason; Denise Woit	ICSE '01: Proceedings of the 23rd International Conference on Software Engineering	https://doi.org/10.5555/381473.381511		361-370							2	ACM		Theory of software reliability based on components	https://dl.acm.org/doi/10.5555/381473.381511	IEEE Computer Society	nan; References; Year; Bibtex
69	TrustSE	An empirical study of developer quality														2						
70	TrustSE	Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
71	TrustSE	Understanding sustained participation in open source software projects														2						
72	TrustSE	Mission-critical development with open source software: Lessons learned														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
73	TrustSE	Developer Motivations, Social Aspects and Challenges of Open Source Software.														2						
74	TrustSE	Social coding in GitHub:transparency and collaboration in an open software repository	Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation.	awareness; collaboration; coordination; open source software development; social computing; transparency	Laura Dabbish; Colleen Stuart; Jason Tsay; Jim Herbsleb	CSCW '12: Proceedings of the ACM 2012 conference on Computer Supported Cooperative Work	https://doi.org/10.1145/2145204.2145396		1277-1286							2	ACM		Social coding in GitHub: transparency and collaboration in an open software repository	https://dl.acm.org/doi/10.1145/2145204.2145396	Association for Computing Machinery	nan; References; Year; Bibtex
75	TrustSE	Techniques for trusted software engineering			Premkumar T. Devanbu; Philip W-L Fong; Stuart G. Stubblebine	ICSE '98: Proceedings of the 20th international conference on Software engineering	https://doi.org/10.5555/302163.302176		126-135							2	ACM		Techniques for trusted software engineering	https://dl.acm.org/doi/10.5555/302163.302176	IEEE Computer Society	nan; Abstract; Keywords; References; Year; Bibtex
76	TrustSE	Understanding the requirements for developing open source software systems														2						
77	TrustSE	Trust case: Justifying trust in an IT solution														2						
78	TrustSE	Factors affecting the success of Open Source Software														2						
79	TrustSE	The promise of research on open source software														2						
80	TrustSE	Information Needs in Collocated Software Development Teams	Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers.		Andrew J. Ko; Robert DeLine; Gina Venolia	ICSE '07: Proceedings of the 29th international conference on Software Engineering	https://doi.org/10.1109/ICSE.2007.45		344-353							2	ACM		Information needs in collocated software development teams	https://dl.acm.org/doi/10.1109/ICSE.2007.45	IEEE Computer Society	nan; Keywords; References; Year; Bibtex
81	TrustSE	Governance of open source software: state of the art														2						
82	TrustSE	The Effect of License Type and Status Hierarchy on Developer Motivation in Open Source Communities.														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
83	TrustSE	Open-source versus proprietary software: Is one more reliable and secure than the other?														2						
84	TrustSE	The secret life of bugs:Going past the errors and omissions in software repositories	Every bug has a story behind it. The people that discover and resolve it need to coordinate, to get information from documents, tools, or other people, and to navigate through issues of accountability, ownership, and organizational structure. This paper reports on a field study of coordination activities around bug fixing that used a combination of case study research and a survey of software professionals. Results show that the histories of even simple bugs are strongly dependent on social, organizational, and technical knowledge that cannot be solely extracted through automation of electronic repositories, and that such automation provides incomplete and often erroneous accounts of coordination. The paper uses rich bug histories and survey results to identify common bug fixing coordination patterns and to provide implications for tool designers and researchers of coordination in software development.		Jorge Aranda; Gina Venolia	ICSE '09: Proceedings of the 31st International Conference on Software Engineering	https://doi.org/10.1109/ICSE.2009.5070530		298-308							2	ACM		The secret life of bugs: Going past the errors and omissions in software repositories	https://dl.acm.org/doi/10.1109/ICSE.2009.5070530	IEEE Computer Society	nan; Keywords; References; Year; Bibtex
85	TrustSE	Scalable architectural support for trusted software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
86	TrustSE	Software development governance and its concerns	In this paper, we start with a discussion of Software Development Governance (SDG), and clarify its relationships to management and process. We discuss how these organizational components are related and present our view on SDG and its concerns. Throughout the paper, we use the Linux open source development project where we show how SDG is used to achieve productive development in an environment which is often considered to have anarchic characteristics.	management; software development governance; software development organizations; software processes	Sunita Chulani; Clay Williams; Avi Yaeli	SDG '08: Proceedings of the 1st international workshop on Software development governance	https://doi.org/10.1145/1370720.1370723		3-6							2	ACM		Software development governance and its concerns	https://dl.acm.org/doi/10.1145/1370720.1370723	Association for Computing Machinery	nan; References; Year; Bibtex
87	TrustSE	Technology, humanness, and trust: Rethinking trust in technology														2						
88	TrustSE	A direct path to dependable software	Who could fault an approach that offers greater credibility at reduced cost?		Daniel Jackson	Communications of the ACM	https://doi.org/10.1145/1498765.1498787		78-88							2	ACM		A direct path to dependable software	https://dl.acm.org/doi/10.1145/1498765.1498787	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
89	TrustSE	An exploratory study of factors influencing the level of vitality and popularity of open source projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
90	TrustSE	The institutions of open source software: Examining the Debian community														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
91	TrustSE	Technology choice and its performance: Towards a sociology of software package procurement														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
92	TrustSE	Global software and its provenance: generification work in the production of organizational software packages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
93	TrustSE	Software preannouncements and their impact on customers' perceptions and vendor reputation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
94	TrustSE	Packaged software: implications of the differences from custom approaches to software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
95	TrustSE	Certified software	Only if the programmer can prove (through formal machine-checkable proofs) it is free of bugs with respect to a claim of dependability.		Zhong Shao	Communications of the ACM	https://doi.org/10.1145/1859204.1859226		56-66							2	ACM		Certified software	https://dl.acm.org/doi/10.1145/1859204.1859226	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
96	TrustSE	Free/open source software development: Recent research results and methods														2						
97	TrustSE	Analysis of the impact of open source software														2						
98	TrustSE	A review of capacity planning techniques within standard software packages														2						
99	TrustSE	Uncertainty management in software engineering: Past, present, and future														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
100	TrustSE	A bibliography on uncertainty management in information systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
101	TrustSE	The management of uncertainty in software development														2						
102	TrustSE	Software engineering in an uncertain world	In this paper, we argue that the reality of today's software systems requires us to consider uncertainty as a first-class concern in the design, implementation, and deployment of those systems. We further argue that this induces a paradigm shift, and a number of research challenges that must be addressed.	software architecture; software design; software engineering; uncertainty	David Garlan	FoSER '10: Proceedings of the FSE/SDP workshop on Future of software engineering research	https://doi.org/10.1145/1882362.1882389		125-128							2	ACM		Software engineering in an uncertain world	https://dl.acm.org/doi/10.1145/1882362.1882389	Association for Computing Machinery	nan; References; Year; Bibtex
103	TrustSE	Software risk management: principles and practices														2						
104	TrustSE	Uncertainty: A meta-property of software														2						
105	TrustSE	Understanding software project risk: a cluster analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
106	TrustSE	Selecting the optimal software solution under conditions of uncertainty														2						
107	TrustSE	Learning to Live with Uncertainty in our Software														2						
108	TrustSE	Software Size Uncertainty: The Effects of Growth and Estimation Variability														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
109	TrustSE	Optimizing the incremental delivery of software features under uncertainty														2						
110	TrustSE	Reliability of composite software by different forms of uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
111	TrustSE	Uncertainty explicit assessment of off-the-shelf software: Selection of an optimal diverse pair														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
112	TrustSE	Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
113	TrustSE	Structural reliability software and calculation tools: a review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
114	TrustSE	Deriving a usage-independent software quality metric														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
115	TrustSE	How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
116	TrustSE	Software Development Kits for Cloud Computing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
117	TrustSE	Development Problems of Trusted Software in Critical Information Infrastructure Systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
118	TrustSE	Fuzzy model estimation of the risk factors impact on the target of promotion of the software product														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
119	TrustSE	SIGNALS BY SOFTWARE														2						
120	TrustSE	Peacebuilding Software														2						
121	TrustSE	Success of software packages in small businesses: an exploratory study														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
122	TrustSE	Software to support expert elicitation: An exploratory study of existing software packages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
123	TrustSE	Open source software development: an overview														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
124	TrustSE	Selection of packaged software in small businesses														2						
125	TrustSE	Factors used in the selection of packaged software in small businesses: views of owners and managers														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
126	TrustSE	Enterprise resource planning: componentizing the enterprise application packages			David Sprott	Communications of the ACM	https://doi.org/10.1145/332051.332074		63-69							2	ACM		Enterprise resource planning: componentizing the enterprise application packages	https://dl.acm.org/doi/10.1145/332051.332074	Association for Computing Machinery	nan; Abstract; Keywords; References; Year; Bibtex
127	TrustSE	Reputation management of an Open Source Software system based on the trustworthiness of its contributions														2						
128	TrustSE	Packaged software: selection and implementation policies														2						
129	TrustSE	How open source software works:“free” user-to-user assistance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
130	TrustSE	Transition of governance in a mature open software source community: Evidence from the Debian case														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
131	TrustSE	Understanding free software developers: Findings from the FLOSS study														2						
132	TrustSE	A framework analysis of the open source software development paradigm			Joseph Feller; Brian Fitzgerald	ICIS '00: Proceedings of the twenty first international conference on Information systems	https://doi.org/10.5555/359640.359723		58-69							2	ACM		A framework analysis of the open source software development paradigm	https://dl.acm.org/doi/10.5555/359640.359723	Association for Information Systems	nan; Abstract; Keywords; References; Year; Bibtex
133	TrustSE	Information systems success in free and open source software development: Theory and measures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
134	TrustSE	The penguin has entered the building: The commercialization of open source software products														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
135	TrustSE	Open source software: Free provision of complex public goods														2						
136	TrustSE	The social structure of free and open source software development														2						
137	TrustSE	The allocation of software development resources in 'open source'production mode														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
138	TrustSE	Entry strategies under competing standards: Hybrid business models in the open source software industry														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
139	TrustSE	The open source software phenomenon: Characteristics that promote research														2						
140	TrustSE	Socialization in an open source software community: A socio-technical analysis														2						
141	TrustSE	How copyleft uses license rights to succeed in the open source software revolution and the implications for article 2B														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
142	TrustSE	Decoding the free/open source software puzzle: A survey of theoretical and empirical contributions														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
143	TrustSE	Open source software: A survey from 10,000 feet														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
144	TrustSE	Categorizing bugs with social networks: a case study on four open source software communities	Efficient bug triaging procedures are an important precondition for successful collaborative software engineering projects. Triaging bugs can become a laborious task particularly in open source software (OSS) projects with a large base of comparably inexperienced part-time contributors. In this paper, we propose an efficient and practical method to identify valid bug reports which a) refer to an actual software bug, b) are not duplicates and c) contain enough information to be processed right away. Our classification is based on nine measures to quantify the social embeddedness of bug reporters in the collaboration network. We demonstrate its applicability in a case study, using a comprehensive data set of more than 700,000 bug reports obtained from the Bugzilla installation of four major OSS communities, for a period of more than ten years. For those projects that exhibit the lowest fraction of valid bug reports, we find that the bug reporters' position in the collaboration network is a strong indicator for the quality of bug reports. Based on this finding, we develop an automated classification scheme that can easily be integrated into bug tracking platforms and analyze its performance in the considered OSS communities. A support vector machine (SVM) to identify valid bug reports based on the nine measures yields a precision of up to 90.3% with an associated recall of 38.9%. With this, we significantly improve the results obtained in previous case studies for an automated early identification of bugs that are eventually fixed. Furthermore, our study highlights the potential of using quantitative measures of social organization in collaborative software engineering. It also opens a broad perspective for the integration of social awareness in the design of support infrastructures.		Marcelo Serrano Zanetti; Ingo Scholtes; Claudio Juan Tessone; Frank Schweitzer	ICSE '13: Proceedings of the 2013 International Conference on Software Engineering	https://doi.org/10.5555/2486788.2486930		1032-1041							2	ACM		Categorizing bugs with social networks: a case study on four open source software communities	https://dl.acm.org/doi/10.5555/2486788.2486930	IEEE Press	nan; Keywords; References; Year; Bibtex
145	TrustSE	Open source software as consumer integration into production														2						
146	TrustSE	Core and periphery in free/libre and open source software team communications														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
147	TrustSE	The economics of open source software: A survey of the early literature														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
148	TrustSE	Open source software: the new intellectual property paradigm														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
149	TrustSE	The attraction of contributors in free and open source software projects														2						
150	TrustSE	Open source movements as a model for organising														2						
151	TrustSE	Networking beyond the software code? an explorative examination of the development of an open source car project														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
152	TrustSE	Infectious open source software: Spreading incentives or promoting resistance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
153	TrustSE	Analysis of license inconsistency in large collections of open source projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
154	TrustSE	Coordinating interdependencies in online communities: A study of an open source software project														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
155	TrustSE	Vertical interaction in open software engineering communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
156	TrustSE	The mysteries of open source software: Black and white and red all over?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
157	TrustSE	Trust engineering: rejecting the tyranny of the weakest link														2						
158	TrustSE	Learning from open source software projects to improve scientific review														2						
159	TrustSE	Managing the Bazaar: Commercialization and peripheral participation in mature, community-led Free/Open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
160	TrustSE	A survey of trust in computer science and the semantic web														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
161	TrustSE	The mechanics of trust: A framework for research and design														2						
162	TrustSE	Open source software user communities: A study of participation in Linux user groups														2						
163	TrustSE	The transformation of open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
164	TrustSE	Antecedents of commitment and trust in customer–supplier relationships in high technology markets														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
165	TrustSE	Free/Libre open-source software development:What we know and what we do not know	We review the empirical research on Free/Libre and Open-Source Software (FLOSS) development and assess the state of the literature. We develop a framework for organizing the literature based on the input-mediator-output-input (IMOI) model from the small groups literature. We present a quantitative summary of articles selected for the review and then discuss findings of this literature categorized into issues pertaining to inputs (e.g., member characteristics, technology use, and project characteristics), processes (software development practices, social processes, and firm involvement practices), emergent states (e.g., social states and task-related states), and outputs (e.g. team performance, FLOSS implementation, and project evolution). Based on this review, we suggest topics for future research, as well as identify methodological and theoretical issues for future inquiry in this area, including issues relating to sampling and the need for more longitudinal studies.	Free/Libre open-source software; computer-mediated communication; development; distributed work	Kevin Crowston; Kangning Wei; James Howison; Andrea Wiggins	ACM Computing Surveys (CSUR)	https://doi.org/10.1145/2089125.2089127									2	ACM		Free/Libre open-source software development: What we know and what we do not know	https://dl.acm.org/doi/10.1145/2089125.2089127	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
166	TrustSE	The ALPS project release 2.0: open source software for strongly correlated systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
167	TrustSE	Tragedy of the FOSS commons? Investigating the institutional designs of free/libre and open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
168	TrustSE	On the Impact of Software Ecosystems in Requirements Communication and Management														2						
169	TrustSE	An empirical analysis of software vendors' patch release behavior: impact of vulnerability disclosure														2						
170	TrustSE	Progressive open source	The success of several Open Source™ software systems, e.g., Apache, Bind, Emacs, and Linux, has recently sparked interest in studying and emulating the software engineering principles underlying this innovative development and use model. Certain aspects of the Open Source development method, e.g., community building, open discussions for requirements and features, and evolvable and modular designs are having fundamental and far reaching consequences on general software engineering practices.To leverage such Open Source methods and tools, we have defined an innovative software engineering paradigm for large corporations:Progressive Open Source (POS).POS leverages the power of Open Source methods and tools for large corporations in a progressive manner: starting from completely within the corporation, to include partner businesses, and eventually complete Open Source. In this paper we present the design goals and principles for POS. We illustrate POS with two programs in HP: Corporate Source and the Collaborative Development Program (CDP). We present early results from both these programs suggesting the power and necessity of POS for all modern large corporations.		Jamie Dinkelacker; Pankaj K. Garg; Rob Miller; Dean Nelson	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581363		177-184							2	ACM		Progressive open source	https://dl.acm.org/doi/10.1145/581339.581363	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
171	TrustSE	Predicting fault incidence using software change history														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
172	TrustSE	Convicting exploitable software vulnerabilities: An efficient input provenance based approach														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
173	TrustSE	Robust open-source software	No abstract available.		Peter G. Neumann	Intellectual property in the age of universal access	https://doi.org/10.1145/318536.318542									2	ACM		Robust open-source software	https://dl.acm.org/doi/10.1145/318536.318542	Association for Computing Machinery	nan; Keywords; References; Pages; Year; Bibtex
174	TrustSE	The social shaping of packaged software selection														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
175	TrustSE	Organizational adoption of open source software:barriers and remedies	Introduction		Del Nagy; Areej M. Yassin; Anol Bhattacherjee	Communications of the ACM	https://doi.org/10.1145/1666420.1666457		148-151							2	ACM		Organizational adoption of open source software	https://dl.acm.org/doi/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
176	TrustSE	Comparison of open-source cloud management platforms: OpenStack and OpenNebula														2						
177	TrustSE	Do developers update their library dependencies?														2						
178	TrustSE	Component-based systems: A classification of issues														2						
179	TrustSE	Trust Perceptions of Metadata in Open-Source Software: The Role of Performance and Reputation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
180	TrustSE	Online trust and reputation systems	As online commerce, social networks, and user-generated content become common, need for trust and reputation models become prime. This tutorial will give an overview of trust and reputation systems as studied by social network researchers. Other topics include: Reputation and its relationship to security and fraud; Feedback and other Manifestations and Implementations of trust and reputations; Models of reputation; platforms: P2P systems, Centralized systems; Auctions, Incentive systems; Collaborative filtering; Social Networking and Social reputation; Portability and Universality of Identity, trust, and reputation.	electronic commerce; feedback; fraud detection; reputation; trust	Neel Sundaresan	EC '07: Proceedings of the 8th ACM conference on Electronic commerce	https://doi.org/10.1145/1250910.1250969		366-367							2	ACM		Trust and reputation systems	https://dl.acm.org/doi/10.1145/1250910.1250969	Association for Computing Machinery	nan; References; Year; Bibtex
181	TrustSE	The extent of orphan vulnerabilities from code reuse in open source software	Motivation: A key premise of open source software is the ability to copy code to other open source projects (white-box reuse). Such copying accelerates development of new projects, but the code flaws in the original projects, such as vulnerabilities, may also spread even if fixed in the projects from where the code was appropriated. The extent of the spread of vulnerabilities through code reuse, the potential impact of such spread, or avenues for mitigating risk of these secondary vulnerabilities has not been studied in the context of a nearly complete collection of open source code.	CVE; code reuse; git; security vulnerabilities	David Reid; Mahmoud Jahanshahi; Audris Mockus	ICSE '22: Proceedings of the 44th International Conference on Software Engineering	https://doi.org/10.1145/3510003.3510216		2104-2115							2	ACM		Code reuse in open source software	https://dl.acm.org/doi/10.1145/3510003.3510216	Association for Computing Machinery	nan; References; Year; Bibtex
182	TrustSE	The grand challenge of Trusted Components	"Reusable components equipped with strict guarantees of quality can help reestablish software development on a stronger footing, by taking advantage of the scaling effect of reuse to justify the extra effort of ensuring impeccable quality. This discussion examines work intended to help the concept of Trusted Component brings its full potential to the software industry, along two complementary directions: a ""low road"" leading to qualification of existing components, and a ""high road"" aimed at the production of components with fully proved correctness properties."		Bertrand Meyer	ICSE '03: Proceedings of the 25th International Conference on Software Engineering	https://doi.org/10.5555/776816.776911		660-667							2	ACM		The grand challenge of trusted components	https://dl.acm.org/doi/10.5555/776816.776911	IEEE Computer Society	nan; Keywords; References; Year; Bibtex
183	TrustSE	The impact of ideology on effectiveness in open source software development teams														2						
184	TrustSE	A framework for creating hybrid‐open source software communities														2						
185	TrustSE	Comparative assessment of software quality classification techniques: An empirical case study														2						
186	TrustSE	Has open source software a future														2						
187	TrustSE	Adoption of open source software in software-intensive organizations–A systematic literature review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
188	TrustSE	Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
189	TrustSE	The economic motivation of open source software: Stakeholder perspectives														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
190	TrustSE	Open source software development—Just another case of collective invention?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
191	TrustSE	Open source software: Private provision of a public good														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
192	TrustSE	Process improvement and risk management in Off-the-Shelf Component-based development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
193	TrustSE	Code reuse in open source software development: Quantitative evidence, drivers, and impediments														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
194	TrustSE	Opportunities and risks of software-as-a-service: Findings from a survey of IT executives														2						
195	TrustSE	Operational profiles in software-reliability engineering														2						
196	TrustSE	The ecology of open-source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
197	TrustSE	Usability and open-source software development	Open-source is becoming an increasingly popular software development method. This paper reports a usability study of the open-source Greenstone Digital Library collection-building software. The problems highlighted by the study are analysed to identify their likely source within the social context of Greenstone's development environment. We discuss how characteristics of open-source software development influence the usability of resulting software products.		David M. Nichols; Kirsten Thomson; Stuart A. Yeates	CHINZ '01: Proceedings of the Symposium on Computer Human Interaction	https://doi.org/10.1145/2331812.2331822		49-54							2	ACM		Usability and open source software.	https://dl.acm.org/doi/10.1145/2331812.2331822	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
198	TrustSE	Effects of empowerment on performance in open-source software projects														2						
199	TrustSE	A brief overview of trust and reputation over various domains														2						
200	TrustSE	Legal implications of open-source software														2						
201	TrustSE	Optimal policy for software vulnerability disclosure														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
202	TrustSE	Socio-technical interaction networks in free/open source software development processes														2						
203	TrustSE	Combining static source code analysis and threat assessment modeling for testing open source software security														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
204	TrustSE	Social status in an open-source community														2						
205	TrustSE	The many meanings of open source														2						
206	TrustSE	A comprehensive trust model for component software	The growing importance of component software introduces special requirements on trust due to the nature of applications they provide, in particular when the system supports dynamic component deployment. This paper presents a comprehensive trust model in order to specify, evaluate and manage various trust relationships that exist among entities in a component software system. It contains a sub-model to present trust relationships among system entities, a sub-model to specify the information related to trust management for a software component, a sub-model for trust evaluation and a sub-model for trust management. This trust model supports trust management based on trust evaluation both at component download time and runtime.	component software; security; trust; trust management; trust model	Zheng Yan	SecPerU '08: Proceedings of the 4th international workshop on Security, privacy and trust in pervasive and ubiquitous computing	https://doi.org/10.1145/1387329.1387330		1-6							2	ACM		A comprehensive trust model for component software	https://dl.acm.org/doi/10.1145/1387329.1387330	Association for Computing Machinery	nan; References; Year; Bibtex
207	TrustSE	Trust Management Mechanism in IoV based on Bayesian classification	The Internet of Vehicles (IoV) significantly enhances the perception of the traffic environment and facilitates information exchange among vehicles, thereby bolstering transportation safety. Nevertheless, the intricate nature of traffic scenes, the swift movement of vehicles and the dynamic nature of the vehicle network's topology present challenges in guaranteeing the reliability of shared messages among vehicles. The intricacy of the situation additionally poses challenges for vehicles in evaluating the reliability of received messages, creating substantial potential for traffic accidents. Therefore, this article proposes an IoV trust management mechanism based on Bayesian classification, which designs a complete vehicle trust value calculation scheme. The verification of messages received from neighboring vehicles is carried out using the Bayesian inference model, which can effectively detect vehicles sending malicious information. After the verification results, rating parameters are produced for every source vehicle of the messages. Ultimately, the trust value of the vehicle is calibrated and penalized based on these rating parameters. The vehicle uploads rating parameters to the RSU, which calculates the trust value of the relevant vehicles. By excluding vehicles with low trust values, the cooperation success rate among vehicles within the network has risen from 65% to approximately 70%.	Bayesian Classification; Internet of Vehicles; Trust Management	Xiumei Fan; Yuchen Wang	CNIOT '24: Proceedings of the 2024 5th International Conference on Computing, Networks and Internet of Things	https://doi.org/10.1145/3670105.3670213		620-625							2	ACM		Trust Management	https://dl.acm.org/doi/10.1145/3670105.3670213	Association for Computing Machinery	nan; References; Year; Bibtex
208	TrustSE	A Survey on Trust Management [J]														2						
209	TrustSE	Predicting trustworthiness for component software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
210	TrustSE	Can you trust software capability evaluations?														2						
211	TrustSE	Automated dependency resolution for open source software														2						
212	TrustSE	Extracting Acyclic Dependency Models from Quality Standards for COTS Software Evaluation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
213	TrustSE	Software release planning under soft resource and dependency constraints														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
214	TrustSE	The role of dependency propagation in the accumulation of technical debt for software implementations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
215	TrustSE	Analysis of issue and dependency management in open-source software projects														2						
216	TrustSE	Quantitative studies in software release planning under risk and resource constraints														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
217	TrustSE	Software dependencies, work dependencies, and their impact on failures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
218	TrustSE	IusWare: A methodology for the evaluation and selection of software products														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
219	TrustSE	Theoretical and empirical validation of software product measures														2						
220	TrustSE	An investigation of 'build vs. buy'decision for software acquisition by small to medium enterprises														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
221	TrustSE	A systematic literature review on the barriers faced by newcomers to open source software projects														2						
222	TrustSE	Scalable trust establishment with software reputation	Users and administrators are often faced with the choice between different software solutions, sometimes even have to assess the security of complete software systems. With sufficient time and resources, such decisions can be based on extensive testing and review. However, in practice this is often too expensive and time consuming.	reputation; software security	Sven Bugiel; Lucas Vincenzo Davi; Steffen Schulz	STC '11: Proceedings of the sixth ACM workshop on Scalable trusted computing	https://doi.org/10.1145/2046582.2046587		15-24							2	ACM		Scalable trust establishment with software reputation	https://dl.acm.org/doi/10.1145/2046582.2046587	Association for Computing Machinery	nan; References; Year; Bibtex
223	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies; free software; open source software; socio-technical relationships; software development practices	Walt Scacchi	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468							2	ACM		Clustering and dependencies in free/open source software development: Methodology and tools	https://dl.acm.org/doi/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Year; Bibtex
224	TrustSE	The open source movement: a revolution in software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
225	TrustSE	Effective work practices for software engineering:free/libre open source software development	We review the literature on Free/Libre Open Source Software (FLOSS) development and on software development, distributed work and teams more generally to develop a theoretical model to explain the performance of FLOSS teams. The proposed model is based on Hackman's [34] model of effectiveness of work teams, with coordination theory [52] and collective mind [79] to extend Hackman's model by elaborating team practices relevant to effectiveness in software development. We propose a set of propositions to guide further research.	collective mind theory; coordination theory; free and open source software; team effectiveness	Kevin Crowston; Hala Annabi; James Howison; Chengetai Masango	WISER '04: Proceedings of the 2004 ACM workshop on Interdisciplinary software engineering research	https://doi.org/10.1145/1029997.1030003		18-26							2	ACM		Effective work practices for software engineering: free/libre open source software development	https://dl.acm.org/doi/10.1145/1029997.1030003	Association for Computing Machinery	nan; References; Year; Bibtex
226	TrustSE	A market-based approach to software evolution	Software correctness has bedeviled the field of computer science since its inception. Software complexity has increased far more quickly than our ability to control it, reaching sizes that are many orders of magnitude beyond the reach of formal or automated verification techniques.	markets; mechanism design; software correctness	David F. Bacon; Yiling Chen; David Parkes; Malvika Rao	OOPSLA '09: Proceedings of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications	https://doi.org/10.1145/1639950.1640066		973-980							2	ACM		A market-based approach to software evolution	https://dl.acm.org/doi/10.1145/1639950.1640066	Association for Computing Machinery	nan; References; Year; Bibtex
227	TrustSE	Open source software from commercial firms–tools, complements, and collective invention														2						
228	TrustSE	Towards a metric for Open Source Software Quality														2						
229	TrustSE	Appropriation and appropriability in open source software														2						
230	TrustSE	Vulnerability scrying method for software vulnerability discovery prediction without a vulnerability database														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
231	TrustSE	Multi-criteria evaluation of design and manufacturing software packages considering the interdependencies among criteria: the analytic network process approach														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
232	TrustSE	An open source software evaluation model														2						
233	TrustSE	Survival factors for Free Open Source Software projects: A multi-stage perspective														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
234	TrustSE	Impact of organisational maturity on software quality														2						
235	TrustSE	Software measurement: Uncertainty and causal modeling														2						
236	TrustSE	The uncertainty principle in software engineering														2						
237	TrustSE	Organizational adoption of open source software:barriers and remedies	Introduction		Del Nagy; Areej M. Yassin; Anol Bhattacherjee	Communications of the ACM	https://doi.org/10.1145/1666420.1666457		148-151							2	ACM		Organizational adoption of open source software: barriers and remedies	https://dl.acm.org/doi/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
238	TrustSE	Software estimation perspectives														2						
239	TrustSE	Coordination of free/libre open source software development														2						
240	TrustSE	Software quality evaluation based on expert judgement														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
241	TrustSE	Software metrics and reliability														2						
242	TrustSE	Free/libre and open source software: Survey and study														2						
243	TrustSE	Why develop open-source software? The role of non-pecuniary benefits, monetary rewards, and open-source licence type														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
244	TrustSE	Managerial and technical barriers to the adoption of open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
245	TrustSE	Teams in packaged software development														2						
246	TrustSE	Collaboration with Lean Media:how open-source software succeeds	Open-source software, usually created by volunteer programmers dispersed worldwide, now competes with that developed by software firms. This achievement is particularly impressive as open-source programmers rarely meet. They rely heavily on electronic media, which preclude the benefits of face-to-face contact that programmers enjoy within firms. In this paper, we describe findings that address this paradox based on observation, interviews and quantitative analyses of two open-source projects. The findings suggest that spontaneous work coordinated afterward is effective, rational organizational culture helps achieve agreement among members and communications media moderately support spontaneous work. These findings can imply a new model of dispersed collaboration.	CVS; cooperative work; distributed work; electronic media; innovation; open-source; software engineering	Yutaka Yamauchi; Makoto Yokozawa; Takeshi Shinohara; Toru Ishida	CSCW '00: Proceedings of the 2000 ACM conference on Computer supported cooperative work	https://doi.org/10.1145/358916.359004		329-338							2	ACM		Collaboration with Lean Media: how open-source software succeeds	https://dl.acm.org/doi/10.1145/358916.359004	Association for Computing Machinery	nan; References; Year; Bibtex
247	TrustSE	How perceptions of open source software influence adoption: An exploratory study														2						
248	TrustSE	Integrated software quality evaluation: a fuzzy multi-criteria approach														2						
249	TrustSE	Knowledge reuse in open source software: An exploratory study of 15 open source projects														2						
250	TrustSE	A process model for packaged software development														2						
251	TrustSE	Determinants of the choice of open source software license														2						
252	TrustSE	Linux vs. Windows: A comparison of application and platform innovation incentives for open source and proprietary software platforms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
253	TrustSE	Adoption and utilization of commercial software packages: Exploring utilization equilibria, transitions, triggers, and tracks														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
254	TrustSE	American Hegemony in Packaged Software Trade and the''Culture of Software''														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
255	TrustSE	A New Method of Model Combination Based on the NHPP Software Reliability Models	For fitting the failure data with non-steady growth trend better, a new method is proposed to establish combinational models by combining two NHPP models, which have better fitting effects in four candidate models including G-O model, S-Shaped model, M-O model and Duane model for the same data. A real-valued genetic algorithm is used to calculate the maximum likelihood estimates of the parameters in combinational models for solving the problem that the traditional maximum likelihood estimation algorithms cannot give parameter estimates when fitting some data sets. Then, five published failure data sets, most of which have non-steady growth trend, are selected to verify the effectiveness of our models. The results show that the MSE of our models are always lower. It reduces at least 3.12%, and at most 69.31% compared with the single optimal model. These indicate that our method is feasible and effective.	Combinational model; Genetic algorithm; Maximum likelihood estimation; NHPP model; Software reliability	Haiyan Sun; Lu Zhang; Jing Wu; Ji Wu; Haiyan Yang	ICMSS 2018: Proceedings of the 2018 2nd International Conference on Management Engineering, Software Engineering and Service Sciences	https://doi.org/10.1145/3180374.3181344		153-158							2	ACM		Software reliability models	https://dl.acm.org/doi/10.1145/3180374.3181344	Association for Computing Machinery	nan; References; Year; Bibtex
256	TrustSE	Resources contributing to gaining competitive advantage for open source software projects: An application of resource-based theory														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
257	TrustSE	Open source software production: Climbing on the shoulders of giants														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
258	TrustSE	Governance in open source software development projects: A comparative multi-level analysis														2						
259	TrustSE	Software quality factors and software quality metrics to enhance software quality assurance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
260	TrustSE	Reputation management in an open source developer social network: An empirical study on determinants of positive evaluations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
261	TrustSE	Dynamic service selection with reputation management														2						
262	TrustSE	Reputation in open source software														2						
263	TrustSE	Something for nothing: management rejection of open source software in Australia's top firms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
264	TrustSE	Trust and reputation for successful software self-organisation														2						
265	TrustSE	Do the allocation and quality of intellectual assets affect the reputation of open source software projects?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
266	TrustSE	An approach for selecting software-as-a-service (SaaS) product														2						
267	TrustSE	Motivation, governance, and the viability of hybrid forms in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
268	TrustSE	Why hackers do what they do: Understanding motivation and effort in free/open source software projects														2						
269	TrustSE	How social Q&A sites are changing knowledge sharing in open source software communities	Historically, mailing lists have been the preferred means for coordinating development and user support activities. With the emergence and popularity growth of social Q&A sites such as the StackExchange network (e.g., StackOverflow), this is beginning to change. Such sites offer different socio-technical incentives to their participants than mailing lists do, e.g., rich web environments to store and manage content collaboratively, or a place to showcase their knowledge and expertise more vividly to peers or potential recruiters. A key difference between StackExchange and mailing lists is gamification, i.e., StackExchange participants compete to obtain reputation points and badges. In this paper, we use a case study of R (a widely-used tool for data analysis) to investigate how mailing list participation has evolved since the launch of StackExchange. Our main contribution is the assembly of a joint data set from the two sources, in which participants in both the texttt{r-help} mailing list and StackExchange are identifiable. This permits their activities to be linked across the two resources and also over time. With this data set we found that user support activities show a strong shift away from texttt{r-help}. In particular, mailing list experts are migrating to StackExchange, where their behaviour is different. First, participants active both on texttt{r-help} and on StackExchange are more active than those who focus exclusively on only one of the two. Second, they provide faster answers on StackExchange than on texttt{r-help}, suggesting they are motivated by the emph{gamified} environment. To our knowledge, our study is the first to directly chart the changes in behaviour of specific contributors as they migrate into gamified environments, and has important implications for knowledge management in software engineering.	crowdsourced knowledge; gamification.; mailing lists; open source; social q&a	Bogdan Vasilescu; Alexander Serebrenik; Prem Devanbu; Vladimir Filkov	CSCW '14: Proceedings of the 17th ACM conference on Computer supported cooperative work & social computing	https://doi.org/10.1145/2531602.2531659		342-354							2	ACM		How social Q&A sites are changing knowledge sharing in open source software communities	https://dl.acm.org/doi/10.1145/2531602.2531659	Association for Computing Machinery	nan; References; Year; Bibtex
270	TrustSE	Towards reputation-as-a-service														2						
271	TrustSE	Motivation of software developers in Open Source projects: an Internet-based survey of contributors to the Linux kernel														2						
272	TrustSE	Reputation in Open Source Software Virtual Communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
273	TrustSE	Reputation in an open source software community: Antecedents and impacts														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
274	TrustSE	Relationships between open source software companies and communities: Observations from Nordic firms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
275	TrustSE	A Reputation-Based Mechanism for Software Vulnerability Disclosure														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
276	TrustSE	Analyzing and Identifying SaaS for Development of a Project by calculating its Reputation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
277	TrustSE	Assessing the Impact of Project Founder Reputation and Project Structure on Motivation to Participate in Open Source Software Projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
278	TrustSE	Location, location, location: How network embeddedness affects project success in open source systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
279	TrustSE	Collaborative SLA and reputation-based trust management in cloud federations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
280	TrustSE	The governance of free/open source software projects: monolithic, multidimensional, or configurational?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
281	TrustSE	Impacts of license choice and organizational sponsorship on user interest and development activity in open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
282	TrustSE	Why open source software can succeed														2						
283	TrustSE	Intrinsic motivation in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
284	TrustSE	Emergence of new project teams from open source software developer networks: Impact of prior collaboration ties														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
285	TrustSE	SLA-Based Resource Allocation for Software as a Service Provider (SaaS) in Cloud Computing Environments	Cloud computing has been considered as a solution for solving enterprise application distribution and configuration challenges in the traditional software sales model. Migrating from traditional software to Cloud enables on-going revenue for software providers. However, in order to deliver hosted services to customers, SaaS companies have to either maintain their own hardware or rent it from infrastructure providers. This requirement means that SaaS providers will incur extra costs. In order to minimize the cost of resources, it is also important to satisfy a minimum service level to customers. Therefore, this paper proposes resource allocation algorithms for SaaS providers who want to minimize infrastructure cost and SLA violations. Our proposed algorithms are designed in a way to ensure that Saas providers are able to manage the dynamic change of customers, mapping customer requests to infrastructure level parameters and handling heterogeneity of Virtual Machines. We take into account the customers' Quality of Service parameters such as response time, and infrastructure level parameters such as service initiation time. This paper also presents an extensive evaluation study to analyze and demonstrate that our proposed algorithms minimize the SaaS provider's cost and the number of SLA violations in a dynamic resource sharing Cloud environment.	Cloud computing; Resource Allocation; Scheduling; Service Level Agreement (SLA); Software as a Service	Linlin Wu; Saurabh Kumar Garg; Rajkumar Buyya	CCGRID '11: Proceedings of the 2011 11th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing	https://doi.org/10.1109/CCGrid.2011.51		195-204							2	ACM		SLA-based resource allocation for software as a service provider (SaaS) in cloud computing environments	https://dl.acm.org/doi/10.1109/CCGrid.2011.51	IEEE Computer Society	nan; References; Year; Bibtex
286	TrustSE	Carrots and rainbows: Motivation and social practice in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
287	TrustSE	Software reuse: From library to factory														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
288	TrustSE	An empirical analysis of the impact of software vulnerability announcements on firm stock price														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
289	TrustSE	Secured trust and reputation system: analysis of malicious behaviors and optimization														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
290	TrustSE	Open source software projects as virtual organisations: competency rallying for software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
291	TrustSE	Measuring the health of open source software ecosystems: Beyond the scope of project health														2						
292	TrustSE	The paradoxes of free software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
293	TrustSE	The infeasibility of quantifying the reliability of life-critical real-time software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
294	TrustSE	A systematic literature review on fault prediction performance in software engineering														2						
295	TrustSE	Software fault prediction metrics: A systematic literature review														2						
296	TrustSE	The infeasibility of experimental quantification of life-critical software reliability			Ricky W. Butler; George B. Finelli	SIGSOFT '91: Proceedings of the conference on Software for citical systems	https://doi.org/10.1145/125083.123054		66-76							2	ACM		The infeasibility of experimental quantification of life-critical software reliability	https://dl.acm.org/doi/10.1145/125083.123054	Association for Computing Machinery	nan; Abstract; Keywords; References; Year; Bibtex
297	TrustSE	Open source software for the public administration														2						
298	TrustSE	Temporal metrics for software vulnerabilities	It is widely recognized that metrics are important to information security. Metrics can be an effective tool for companies and information security professionals to measure, control, and improve their security control and mechanisms. However, common security metrics are often qualitative, subjective, and informal in the sense that they are lacking formal models and automated support. This paper discussed our work on temporal metrics for software vulnerabilities based on the Common Vulnerability Scoring System 2.0. A mathematical model is provided to calculate the severity and risk of a vulnerability, which is time dependent including exploitability, remediation level, and report confidence attributes of an information asset in a computing environment. A prototype of an automated tool, CVSSWizzard, is illustrated with examples.	common vulnerability scoring system; information security; metrics and measurement; threats and vulnerabilities	Ju An Wang; Fengwei Zhang; Min Xia	CSIIRW '08: Proceedings of the 4th annual workshop on Cyber security and information intelligence research: developing strategies to meet the cyber security and information intelligence challenges ahead	https://doi.org/10.1145/1413140.1413191		1-3							2	ACM		Temporal metrics for software vulnerabilities	https://dl.acm.org/doi/10.1145/1413140.1413191	Association for Computing Machinery	nan; References; Year; Bibtex
299	TrustSE	Open source software and open data standards in public administration														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
300	TrustSE	Government preferences for promoting open-source software: A solution in search of a problem														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
301	TrustSE	Research on testing-based software credibility measurement and assessment														2						
302	TrustSE	Software metrics: successes, failures and new directions														2						
303	TrustSE	Understanding broadcast based peer review on open source software projects	Software peer review has proven to be a successful technique in open source software (OSS) development. In contrast to industry, where reviews are typically assigned to specific individuals, changes are broadcast to hundreds of potentially interested stakeholders. Despite concerns that reviews may be ignored, or that discussions will deadlock because too many uninformed stakeholders are involved, we find that this approach works well in practice. In this paper, we describe an empirical study to investigate the mechanisms and behaviours that developers use to find code changes they are competent to review. We also explore how stakeholders interact with one another during the review process. We manually examine hundreds of reviews across five high profile OSS projects. Our findings provide insights into the simple, community-wide techniques that developers use to effectively manage large quantities of reviews. The themes that emerge from our study are enriched and validated by interviewing long-serving core developers.	case studies; grounded theory; open source software; peer review	Peter C. Rigby; Margaret-Anne Storey	ICSE '11: Proceedings of the 33rd International Conference on Software Engineering	https://doi.org/10.1145/1985793.1985867		541-550							2	ACM		Understanding broadcast based peer review on open source software projects	https://dl.acm.org/doi/10.1145/1985793.1985867	Association for Computing Machinery	nan; References; Year; Bibtex
304	TrustSE	Understanding the sources of variation in software inspections	In a previous experiment, we determined how various changes in three structural elements of the software inspection process (team size and the number and sequencing of sessions) altered effectiveness and interval. Our results showed that such changes did not significantly influence the defect detection rate, but that certain combinations of changes dramatically increased the inspection interval. We also observed a large amount of unexplained variance in the data, indicating that other factors must be affecting inspection performance. The nature and extent of these other factors now have to be determined to ensure that they had not biased our earlier results. Also, identifying these other factors might suggest additional ways to improve the efficiency of inspections. Acting on the hypothesis that the “inputs” into the inspection process (reviewers, authors, and code units) were significant sources of variation, we modeled their effects on inspection performance. We found that they were responsible for much more variation in detect detection than was process structure. This leads us to conclude that better defect detection techniques, not better process structures, are the key to improving inspection effectiveness. The combined effects of process inputs and process structure on the inspection interval accounted for only a small percentage of the variance in inspection interval. Therefore, there must be other factors which need to be identified.	empirical studies; software inspection; software process; statistical models	W. Richards Adrion; Adam Porter; Harvey Siy; Audris Mockus; Lawrence Votta	ACM Transactions on Software Engineering and Methodology (TOSEM)	https://doi.org/10.1145/268411.268421		41-79							2	ACM		Understanding the sources of variation in software inspections	https://dl.acm.org/doi/10.1145/268411.268421	Association for Computing Machinery	nan; References; Year; Bibtex
305	TrustSE	The Collaborative Integrity of Open-Source Software														2						
306	TrustSE	Auditing and maintaining provenance in software packages														2						
307	TrustSE	Software processes analysis with provenance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
308	TrustSE	Software Provenance:Track the Reality Not the Virtual Machine	The growing use of computers and massive storage by individuals is driving interest in digital preservation. The scientific method demands accountability through digital reproducibility, adding another strong motivation for preservation. However, data alone can become obsolete if the interactivity of software required to interpret the data is lost. Virtual machines (VMs) may preserve interactivity however do so at the cost of obscuring the nature of what lies within. Occam, instead, builds VMs on-the-fly while storing and distributing well-described software packages. Thus, the system can track the exact components inside VMs without storing the machines themselves, allowing software to be repeatably built and executed. For Occam to recreate VMs, it needs to know exactly what software was used within. Through this tracking, such software can even be modified and rebuilt. Occam keeps track of all such components in manifests, allowing anybody to know exactly what is in each VM, and the origins of each component.		David Wilkinson; Luís Oliveira; Daniel Mossé; Bruce Childers	P-RECS'18: Proceedings of the First International Workshop on Practical Reproducible Evaluation of Computer Systems	https://doi.org/10.1145/3214239.3214244		1-6							2	ACM		Software Provenance: Track the Reality Not the Virtual Machine	https://dl.acm.org/doi/10.1145/3214239.3214244	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
309	TrustSE	Modeling library dependencies and updates in large software repository universes														2						
310	TrustSE	The Spack package manager:bringing order to HPC software chaos	Large HPC centers spend considerable time supporting software for thousands of users, but the complexity of HPC software is quickly outpacing the capabilities of existing software management tools. Scientific applications require specific versions of compilers, MPI, and other dependency libraries, so using a single, standard software stack is infeasible. However, managing many configurations is difficult because the configuration space is combinatorial in size.		Todd Gamblin; Matthew LeGendre; Michael R. Collette; Gregory L. Lee; Adam Moody; Bronis R. de Supinski; Scott Futral	SC '15: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis	https://doi.org/10.1145/2807591.2807623		1-12							2	ACM		The Spack package manager: bringing order to HPC software chaos	https://dl.acm.org/doi/10.1145/2807591.2807623	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
311	TrustSE	Secure dependency enforcement in package management systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
312	TrustSE	Automatic polymorphic exploit generation for software vulnerabilities														2						
313	TrustSE	Software applications have on average 24 vulnerabilities inherited from buggy components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
314	TrustSE	Large-scale Modeling, Analysis, and Preservation of Free and Open Source Software														2						
315	TrustSE	'Computing'Requirements in Open Source Software Projects														2						
316	TrustSE	User and developer mediation in an Open Source Software community: Boundary spanning through cross participation in online discussions														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
317	TrustSE	Creating and evolving developer documentation:understanding the decisions of open source contributors	Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects' community positively impacted the documentation.	developer documentation; framework; grounded theory; open source projects; qualitative studies; software documentation	Barthélémy Dagenais; Martin P. Robillard	FSE '10: Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering	https://doi.org/10.1145/1882291.1882312		127-136							2	ACM		Creating and evolving developer documentation: understanding the decisions of open source contributors	https://dl.acm.org/doi/10.1145/1882291.1882312	Association for Computing Machinery	nan; References; Year; Bibtex
318	TrustSE	A model of open source developer foundations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
319	TrustSE	Research of trustworthy software system in the network														2						
320	TrustSE	Study on credibility level of trustworthy software development process based on grey nonlinear cluster														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
321	TrustSE	Estimating development effort in Free/Open source software projects by mining software repositories: a case study of OpenStack	Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error.	Effort estimation; free software; mining software repositories; open source	Gregorio Robles; Jesús M. González-Barahona; Carlos Cervigón; Andrea Capiluppi; Daniel Izquierdo-Cortázar	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597107		222-231							2	ACM		Estimating development effort in free/open source software projects by mining software repositories: a case study of openstack	https://dl.acm.org/doi/10.1145/2597073.2597107	Association for Computing Machinery	nan; References; Year; Bibtex
322	TrustSE	Resistance as motivation for innovation: Open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
323	TrustSE	Bounty programs in free/libre/open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
324	TrustSE	A non-functional requirements tradeoff model in trustworthy software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
325	TrustSE	Using innovative instructions to create trustworthy software solutions	Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions.		Matthew Hoekstra; Reshma Lal; Pradeep Pappachan; Vinay Phegade; Juan Del Cuvillo	HASP '13: Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy	https://doi.org/10.1145/2487726.2488370									2	ACM		Using innovative instructions to create trustworthy software solutions.	https://dl.acm.org/doi/10.1145/2487726.2488370	Association for Computing Machinery	nan; Keywords; References; Pages; Year; Bibtex
326	TrustSE	A software component quality model: A preliminary evaluation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
327	TrustSE	THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES.														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
328	TrustSE	How peripheral developers contribute to open-source software development														2						
329	TrustSE	Research note—Lock-in strategy in software competition: Open-source software vs. proprietary software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
330	TrustSE	Software reliability and system reliability														2						
331	TrustSE	A systematic examination of knowledge loss in open source software projects														2						
332	TrustSE	3.5 Open Source Software Research and Blockchain														2						
333	TrustSE	“Constructing the users” in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
334	TrustSE	Hackers vs. testers: A comparison of software vulnerability discovery processes														2						
335	TrustSE	Agents of responsibility in software vulnerability processes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
336	TrustSE	Code forking in open-source software: a requirements perspective														2						
337	TrustSE	A theory-grounded framework of Open Source Software adoption in SMEs														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
338	TrustSE	From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
339	TrustSE	Predicting software reliability from testing taking into account other knowledge about a program														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
340	TrustSE	Why do commercial companies contribute to open source software?														2						
341	TrustSE	Learning and best practices for learning in open-source software communities														2						
342	TrustSE	OSS opportunities in open source software—CRM and OSS standards														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
343	TrustSE	Participant satisfaction with open source software														2						
344	TrustSE	Maintenance effort estimation for open source software: A systematic literature review														2						
345	TrustSE	Understanding open source software peer review: Review processes, parameters and statistical models, and underlying behaviours and mechanisms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
346	TrustSE	New Perspectives on Public Goods Production: Policy Implications of Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
347	TrustSE	A business model for commercial open source software: A systematic literature review														2						
348	TrustSE	Design and evaluation of a process for identifying architecture patterns in open source software														2						
349	TrustSE	Transactive memory system, communication quality, and knowledge sharing in distributed teams: An empirical examination in open source software project teams														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
350	TrustSE	STRAM:Measuring the Trustworthiness of Computer-Based Systems	Various system metrics have been proposed for measuring the quality of computer-based systems, such as dependability and security metrics for estimating their performance and security characteristics. As computer-based systems grow in complexity with many subsystems or components, measuring their quality in multiple dimensions is a challenging task. In this work, we tackle the problem of measuring the quality of computer-based systems based on the four key attributes of trustworthiness we developed: security, trust, resilience, and agility. In addition to conducting a systematic survey on metrics, measurements, attributes of metrics, and associated ontologies, we propose a system-level trustworthiness metric framework that accommodates four submetrics, called STRAM (<u>S</u>ecurity, <u>T</u>rust, <u>R</u>esilience, and <u>A</u>gility <u>M</u>etrics). The proposed STRAM framework offers a hierarchical ontology structure where each submetric is defined as a sub-ontology. Moreover, this work proposes developing and incorporating metrics describing key assessment tools, including vulnerability assessment, risk assessment, and red teaming, to provide additional evidence in the measurement and quality of trustworthy systems. We further discuss how assessment tools are related to measuring the quality of computer-based systems and the limitations of the state-of-the-art metrics and measurements. Finally, we suggest future research directions for system-level metrics research toward measuring fundamental attributes of the quality of computer-based systems and improving the current metric and measurement methodologies.	Measurement; agility; metric; resilience; security; trust; trustworthiness	Jin-Hee Cho; Shouhuai Xu; Patrick M. Hurley; Matthew Mackay; Trevor Benjamin; Mark Beaumont	ACM Computing Surveys (CSUR)	https://doi.org/10.1145/3277666									2	ACM		Stram: Measuring the trustworthiness of computer-based systems	https://dl.acm.org/doi/10.1145/3277666	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
351	TrustSE	Raising the general public's awareness and adoption of open source software through social Q&A interactions														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
352	TrustSE	How to break an API: cost negotiation and community values in three software ecosystems	Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node.js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in making community values and accepted tradeoffs explicit and transparent in order to resolve conflicts and negotiate change-related costs.	Collaboration; Dependency management; Qualitative research; Software ecosystems; semantic versioning	Christopher Bogart; Christian Kästner; James Herbsleb; Ferdian Thung	FSE 2016: Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering	https://doi.org/10.1145/2950290.2950325		109-120							2	ACM		How to break an API: cost negotiation and community values in three software ecosystems	https://dl.acm.org/doi/10.1145/2950290.2950325	Association for Computing Machinery	nan; References; Year; Bibtex
353	TrustSE	Overview of root causes of software vulnerabilities-technical and user-side perspectives														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
354	TrustSE	Open source and accessibility: advantages and limitations														2						
355	TrustSE	DEVELOPER RESPONSIVENESS AND PERCEIVED USEFULNESS.														2						
356	TrustSE	Is the future of software development in open source? Proprietary vs. open source software: A cross country analysis														2						
357	TrustSE	Github projects. quality analysis of open-source software														2						
358	TrustSE	A longitudinal study of the impact of open source software project characteristics on positive outcomes														2						
359	TrustSE	A model-driven approach for engineering trust and reputation into software services														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
360	TrustSE	Mutual assessment in the social programmer ecosystem:an empirical investigation of developer profile aggregators	The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around thesocial programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills.	gamification; motivation; reputation; social code sharing; social media; software development; software engineering; virtual communities	Leif Singer; Fernando Figueira Filho; Brendan Cleary; Christoph Treude; Margaret-Anne Storey; Kurt Schneider	CSCW '13: Proceedings of the 2013 conference on Computer supported cooperative work	https://doi.org/10.1145/2441776.2441791		103-116							2	ACM		Mutual assessment in the social programmer ecosystem: An empirical investigation of developer profile aggregators	https://dl.acm.org/doi/10.1145/2441776.2441791	Association for Computing Machinery	nan; References; Year; Bibtex
361	TrustSE	From open-source software to Wikipedia:'Backgrounding'trust by collective monitoring and reputation tracking														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
362	TrustSE	Motivations for participating in open source software communities: Roles of psychological needs and altruism														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
363	TrustSE	Exploring the role of outside organizations in Free/Open Source Software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
364	TrustSE	Notice of Violation of IEEE Publication Principles: Open source reuse in commercial firms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
365	TrustSE	Increasing software quality using the provenance of software development processes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
366	TrustSE	Determining the provenance of software artifacts	Software clone detection has made substantial progress in the last 15 years, and software clone analysis is starting to provide real insight into how and why code clones are born, evolve, and sometimes die. In this position paper, we make the case that there is a more general problem lurking in the background: software artifact provenance analysis. We argue that determining the origin of software artifacts is an increasingly important problem with many dimensions. We call for simple and lightweight techniques that can be used to help narrow the search space, so that more expensive techniques - including manual examination can be used effectively on a smaller candidate set. We predict the problem of software provenance will lead towards new avenues of research for the software clones community.	bertillonage; code evolution; code fingerprints; provenance	Michael W. Godfrey; Daniel M. German; Julius Davies; Abram Hindle	IWSC '11: Proceedings of the 5th International Workshop on Software Clones	https://doi.org/10.1145/1985404.1985418		65-66							2	ACM		Determining the provenance of software artifacts	https://dl.acm.org/doi/10.1145/1985404.1985418	Association for Computing Machinery	nan; References; Year; Bibtex
367	TrustSE	The Rise and Evolution of the Open Source Software Foundation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
368	TrustSE	Improving reusability of software libraries through usage pattern mining														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
369	TrustSE	Developing artificial agents worthy of trust:“Would you buy a used car from this artificial agent?”														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
370	TrustSE	Managing license compliance in free and open source software development														2						
371	TrustSE	Assessing Security Health of Open Source Software Packages														2						
372	TrustSE	A Public Domain Approach to Free and Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
373	TrustSE	Open source-New rules in software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
374	TrustSE	Open source software success: Measures and analysis														2						
375	TrustSE	Measuring software library stability through historical version analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
376	TrustSE	Practical approach to automate the discovery and eradication of open-source software vulnerabilities at scale														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
377	TrustSE	Empirical study of open source software selection for adoption, based on software quality characteristics														2						
378	TrustSE	Trust and community in open source software production														2						
379	TrustSE	Waiting for usable open source software? Don't hold your breath!														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
380	TrustSE	Mining social networks for software vulnerabilities monitoring														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
381	TrustSE	Vulnerability likelihood: A probabilistic approach to software assurance														2						
382	TrustSE	Bug Report Quality Evaluation Considering the Effect of Submitter Reputation														2						
383	TrustSE	Studying re-opened bugs in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
384	TrustSE	Meeting challenges and surviving success:the 2nd workshop on open source software engineering	No abstract available.		Joseph Feller	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581436		669-670							2	ACM		Meeting challenges and surviving success: the 2nd workshop on open source software engineering	https://dl.acm.org/doi/10.1145/581339.581436	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
385	TrustSE	Trustworthiness evaluation and testing of open source components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
386	TrustSE	Evolution of open source communities														2						
387	TrustSE	Software and seeds: Open source methods														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
388	TrustSE	Exploring the Effects of Process Characteristics on Products Quality in Open Source Software Development														2						
389	TrustSE	Software quality attributes and trade-offs														2						
390	TrustSE	Evaluation criteria for free/open source software products based on project analysis														2						
391	TrustSE	What makes computational open source software libraries successful?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
392	TrustSE	Attack patterns as a knowledge resource for building secure software														2						
393	TrustSE	Measuring security requirements for software security														2						
394	TrustSE	A literature review of research in software defect reporting														2						
395	TrustSE	Software editions: An application of segmentation theory to the packaged software market														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
396	TrustSE	Patch release behaviors of software vendors in response to vulnerabilities: An empirical analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
397	TrustSE	Improvement of open source software usability: an empirical evaluation from developers' perspective														2						
398	TrustSE	Assessing free/open source software quality														2						
399	TrustSE	Exploitation and exploration networks in open source software development: An artifact-level analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
400	TrustSE	Software vulnerability markets: Discoverers and buyers														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
401	TrustSE	Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
402	TrustSE	Technical perspective: Bootstrapping a future of open source, specialized hardware	No abstract available.		Michael B. Taylor	Communications of the ACM	https://doi.org/10.1145/3366341									2	ACM		Future of Open Source	https://dl.acm.org/doi/10.1145/3366341	Association for Computing Machinery	nan; Keywords; References; Pages; Year; Bibtex
403	TrustSE	Quality of EIS support and maintenance services														2						
404	TrustSE	Future Trends and Development Methods in Software Quality Assurance														2						
405	TrustSE	A Case Study in Open Source Patch Submission														2						
406	TrustSE	SECURA: Unified Reference Architecture for Advanced Security and Trust in Safety Critical Infrastructures	In the evolving landscape of safety-critical infrastructures, ensuring the integrity and security of systems has become paramount. Building upon a previously established security architecture tailored for the railway sector, this work introduces significant enhancements that extend its applicability beyond the confines of any singular industry. Key advancements include the integration of a security heartbeat to augment safety monitoring, the implementation of a sophisticated secure update mechanism leveraging Trusted Platform Module (TPM) Enhanced Authorization (EA) policies, local Trusted Platform Module (TPM) based attestation, a cyber-resiliency watchdog in a Trusted Execution Environment (TEE) that detects compromised system components and triggers remediation actions, automated vulnerability scanning leveraging Linux Integrity Measurement Architecture (IMA) logs to check against vulnerability databases, and a formal evaluation of system integrity reporting capabilities through remote attestation.	Confidential Computing; Trusted Computing; critical infrastructures; cyber-resiliency watchdog; local attestation; remote attestation; safety; secure update; security	Michael Eckel; Sigrid Gürgens	ARES '24: Proceedings of the 19th International Conference on Availability, Reliability and Security	https://doi.org/10.1145/3664476.3664513		1-13							2	ACM		Security and Trust	https://dl.acm.org/doi/10.1145/3664476.3664513	Association for Computing Machinery	nan; References; Year; Bibtex
407	TrustSE	Quality assurance for open source software configuration management														2						
408	TrustSE	Free and open source cloud technology based on the type Software as a Service														2						
409	TrustSE	RLM: A general model for trust representation and aggregation														2						
410	TrustSE	ERP in China:one package, two profiles	How and why the same software system implementation can produce fundamentally different results.		Maris G. Martinsons	Communications of the ACM	https://doi.org/10.1145/1005817.1005823		65-68							2	ACM		ERP in China: one package, two profiles	https://dl.acm.org/doi/10.1145/1005817.1005823	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
411	TrustSE	centralized package management using Stork														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
412	TrustSE	A survey of trust in internet applications														2						
413	TrustSE	Interdependencies, trust and information in relationships, alliances and networks														2						
414	TrustSE	Self-Governance Developer Framework														2						
415	TrustSE	Design architecture, developer networks and performance of open source software projects														2						
416	TrustSE	Global software development:where are the benefits?	Introduction		Eoin Ó Conchúir; Pär J. Ågerfalk; Helena H. Olsson; Brian Fitzgerald	Communications of the ACM	https://doi.org/10.1145/1536616.1536648		127-131							2	ACM		Global software development: where are the benefits?	https://dl.acm.org/doi/10.1145/1536616.1536648	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
417	TrustSE	The GNOME project: a case study of open source, global software development														2						
418	TrustSE	"Bootstrapping Trust in a"" Trusted"" Platform."														2						
419	TrustSE	Quality, productivity and economic benefits of software reuse: a review of industrial studies														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
420	TrustSE	Quality and the reliance on individuals in free software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
421	TrustSE	Issues in global software development: A critical review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
422	TrustSE	Two case studies of open source software development:Apache and Mozilla	According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids.	Apache; Mozilla; Open source software; code ownership; defect density; repair interval	Audris Mockus; Roy T. Fielding; James D. Herbsleb	ACM Transactions on Software Engineering and Methodology (TOSEM)	https://doi.org/10.1145/567793.567795		309-346							2	ACM		Two case studies of open source software development: Apache and Mozilla	https://dl.acm.org/doi/10.1145/567793.567795	Association for Computing Machinery	nan; References; Year; Bibtex
423	TrustSE	Requirements engineering meets trust management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
424	TrustSE	Modelling security and trust with secure tropos														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
425	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies; free software; open source software; socio-technical relationships; software development practices	Walt Scacchi	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468							2	ACM		Free/open source software development	https://dl.acm.org/doi/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Year; Bibtex
426	TrustSE	Reuse-conducive development environments														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
427	TrustSE	Software deployment, past, present and future														2						
428	TrustSE	Updating Model of Software Component Trustworthiness Based on Users Feedback														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
429	TrustSE	SV-AF ?€? A Security Vulnerability Analysis Framework														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
430	TrustSE	A software component assembly approach supporting credibility index quantitative evaluation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
431	TrustSE	Software Testing, Software Quality and Trust in Software-Based Systems														2						
432	TrustSE	Enhancing Trust ?€? Software Vulnerability Analysis Framework														2						
433	TrustSE	A multi-property trust model for reconfiguring component software														2						
434	TrustSE	Assessing uncertainty in reliability of component-based software systems														2						
435	TrustSE	Decision of Trusted Software Behavior														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
436	TrustSE	Reference Model of Trustworthy Proof for Trusted Components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
437	TrustSE	Third-Party Software's Trust Quagmire														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
438	TrustSE	Modeling trusted software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
439	TrustSE	Toward trustworthy software systems														2						
440	TrustSE	Trusted components - 2nd Workshop on Trusted Components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
441	TrustSE	Product Review Credibility Analysis														2						
442	TrustSE	A trusted model for service selection in trustworthy service composition														2						
443	TrustSE	Sandboxing Adoption in Open Source Ecosystems	Sandboxing mechanisms allow developers to limit how much access applications have to resources, following the least-privilege principle. However, it's not clear how much and in what ways developers are using these mechanisms. This study looks at the use ofSeccomp, Landlock, Capsicum, Pledge, andUnveilin all packages of four open-source operating systems. We found that less than 1% of packages directly use these mechanisms, but many more indirectly use them. Examining how developers apply these mechanisms reveals interesting usage patterns, such as cases where developers simplify their sandbox implementation. It also highlights challenges that may be hindering the widespread adoption of sandboxing mechanisms.		Maysara Alhindi; Joseph Hallett	SESoS '24: Proceedings of the 12th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems	https://doi.org/10.1145/3643655.3643878		13-20							2	ACM		Open source ecosystems	https://dl.acm.org/doi/10.1145/3643655.3643878	Association for Computing Machinery	nan; Keywords; References; Year; Bibtex
444	TrustSE	Trusted Software Architectural Modeling Method														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
445	TrustSE	TRUSTIE: Design of a Trustworthy Software Production Environment														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
446	TrustSE	Providing trusted components to the industry														2						
447	TrustSE	Towards trusted composition in software design														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
448	TrustSE	A new trusted software modeling method														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
449	TrustSE	Autonomic Trust Management for a Component-Based Software System														2						
450	TrustSE	Barriers to adoption of software reuse: A qualitative study														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
451	TrustSE	Evaluation and Application of Bounded Generalized Pareto Analysis to Fault Distributions in Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
452	TrustSE	Trust and vulnerability in open source software														2						
453	TrustSE	Trustworthy Software: lessons from `goto fail' & Heartbleed bugs														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
454	TrustSE	Trusted software supply chain	Modern software delivery happens in a geographically distributed environment and resembles like a supply chain - consists of various participants, involves various phases, needs adherence to multiple regulations and needs to maintain artifacts' integrity throughout the delivery phases. This shift in software development brings along with it several challenges ranging from communication of information/knowledge, coordination and control of teams, activities adhering to goals and policies and artifacts adhering to quality, visibility, and management. With the dispersion of centralized control over software delivery to autonomous delivery organizations, the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes, tools, and metrics, leading to issues likeineffective compliance monitoring, friction prone coordination, andlack of provenance, and therebytrust.In this paper, we present a delivery governance framework based on distributed ledger technology that uses a notion of 'software telemetry' to record data from disparate delivery partners and enables compliance monitoring and adherence, provenance and traceability, transparency, and thereby trust.		Kapil Singi; R. P. Jagadeesh Chandra Bose; Sanjay Podder; Adam P. Burden	ASE '19: Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering	https://doi.org/10.1109/ASE.2019.00141		1212-1213							2	ACM		Trusted Software Supply Chain	https://dl.acm.org/doi/10.1109/ASE.2019.00141	IEEE Press	nan; Keywords; References; Year; Bibtex
455	TrustSE	Research on Management Scheme of Trusted Application Software														2						
456	TrustSE	Position Statement: Software Testing, Software Quality and Trust in Software-Based Systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
457	TrustSE	Trust services: a framework for service-based solutions														2						
458	TrustSE	Toward a Formalism for Conservative Claims about the Dependability of Software-Based Systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
459	TrustSE	Importance Measures for a Modular Software System (Short Paper)														2						
460	TrustSE	Software reliability with architectural uncertainties														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
461	TrustSE	Measuring Software Assurance														2						
462	TrustSE	Software reliability estimation under certainty: generalization of the method of moments														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
463	TrustSE	"Is My Software ""Good Enough"" to Release? - A Probabilistic Assessment"														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
464	TrustSE	Are we developers liars or just fools [software managers]														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
465	TrustSE	The three dimensions of software risk: technical, organizational, and environmental														2						
466	TrustSE	An entropy based approach for software risk assessment: A perspective of trustworthiness enhancement														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
467	TrustSE	Extracting Development Organization from Open Source Software														2						
468	TrustSE	Mining and analyzing the characteristic of projects collaborative relationship in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
469	TrustSE	Visibility & Control: Addressing Supply Chain Challenges to Trustworthy Software-Enabled Things														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
470	TrustSE	Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
471	TrustSE	Secure Identification of Actively Executed Code on a Generic Trusted Component														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
472	TrustSE	Trust Trade-off Analysis for Security Requirements Engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
473	TrustSE	An approach for cross-domain access control policy generation from reputation evaluation to trust management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
474	TrustSE	Consumers' Trust Maintenance: From the Perspective of Knowledge-Based and Identification-Based Trust														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
475	TrustSE	A security-enhanced key authorization management scheme for trusted computing platform														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
476	TrustSE	On the Personalization of Trust Management														2						
477	TrustSE	Trust-but-Verify in Cyber-Physical Systems	Cyber-physical systems span a wide spectrum, from long-lived legacy systems to more modern installations. Trust is an issue that arises across the spectrum, albeit with different variants of goals and constraints. On the one end of the spectrum, legacy systems are characterized by function-based designs in which trust is an implicitly in-built concept -- the operation is historically designed, implemented, and optimized in a benign stance with respect to intended use. On the other end of the spectrum, modern systems are characterized by offerings from manufacturers, vendors, and system installers -- the devices and deployments use a variety of security features that offer promises of increased trust. All along this spectrum of cyber-physical systems, extending trust beyond the traditional cyber portions to the arteries that connect the physical portions to the cyber portions is a major challenge. Here, we identify a Trust-but-Verify approach that spans this spectrum in addressing trust.	automation; cyber-physical systems; intelligent analysis; machine learning; security; trust; verification; vetting	Kalyan Perumalla	SAT-CPS '21: Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical Systems	https://doi.org/10.1145/3445969.3450434		1-2							2	ACM		Trust, but Verify	https://dl.acm.org/doi/10.1145/3445969.3450434	Association for Computing Machinery	nan; References; Year; Bibtex
478	TrustSE	The effect of trust in product chains in a Digital Business Ecosystem														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
479	TrustSE	Microsoft - anti trust case														2						
480	TrustSE	Multi-criterion Evaluation of Development Strategy Components in the Presence of Intangibles and Uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
481	TrustSE	Attack simulation based software protection assessment method														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
482	TrustSE	(Do not) trust in ecosystems	In the context of Smart Ecosystems, systems engage in dynamic cooperation with other systems to achieve their goals. Expedient operation is only possible when all systems cooperate as expected. This requires a level of trust between the components of the ecosystem. New systems that join the ecosystem therefore first need to build up a level of trust. Humans derive trust from behavioral reputation in key situations. In Smart Ecosystems (SES), the reputation of a system or system component can also be based on observation of its behavior.	automotive; building trust; malicious behavior; smart ecosystems; virtual evaluation	Emilia Cioroaica; Thomas Kuhn; Barbora Buhnova	ICSE-NIER '19: Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1109/ICSE-NIER.2019.00011		9-12							2	ACM		(Do Not) Trust in Ecosystems	https://dl.acm.org/doi/10.1109/ICSE-NIER.2019.00011	IEEE Press	nan; References; Year; Bibtex
483	TrustSE	Openness and requirements: Opportunities and tradeoffs in software ecosystems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
484	TrustSE	On developers' personality in large-scale distributed projects:the case of the apache ecosystem	Large-scale distributed projects are typically the results of collective efforts performed by multiple developers, each one having a different personality. The study of developers' personalities has the potential of explaining their' behavior in various contexts. For example, the propensity to trust others, a critical factor to the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects.	apache; ecosystems; large-scale distributed projects; open source software; personality traits; social and human aspects; team-building	Fabio Calefato; Giuseppe Iaffaldano; Filippo Lanubile; Bogdan Vasilescu	ICGSE '18: Proceedings of the 13th International Conference on Global Software Engineering	https://doi.org/10.1145/3196369.3196372		92-101							2	ACM		On Developers' Personality in Large-Scale Distributed Projects: The Case of the Apache Ecosystem	https://dl.acm.org/doi/10.1145/3196369.3196372	Association for Computing Machinery	nan; References; Year; Bibtex
485	TrustSE	A survey on technical threat intelligence in the age of sophisticated cyber attacks														2						
486	TrustSE	Selection of third party software in Off-The-Shelf-based software development—An interview study with industrial practitioners														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
487	TrustSE	Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
488	TrustSE	Forecasting IT security vulnerabilities – An empirical analysis														2						
489	TrustSE	Dual-use open source security software in organizations – Dilemma: Help or hinder?														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
490	TrustSE	Quality assurance in software ecosystems: A systematic literature mapping and research agenda														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
491	TrustSE	What happens when software developers are (un)happy														2						
492	TrustSE	A trusted feature aggregator federated learning for distributed malicious attack detection														2						
493	TrustSE	Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
494	TrustSE	Satisfaction and its correlates in agile software development														2						
495	TrustSE	Software evaluation problem situations														2						
496	TrustSE	A comparative study of challenges in integrating Open Source Software and Inner Source Software														2						
497	TrustSE	Explaining reputation assessments														2						
498	TrustSE	The reliability estimation, prediction and measuring of component-based software														2						
499	TrustSE	Characterizing and predicting blocking bugs in open source projects	As software becomes increasingly important, its quality becomes an increasingly important issue. Therefore, prior work focused on software quality and proposed many prediction models to identify the location of software bugs, to estimate their fixing-time, etc. However, one special type of severe bugs is blocking bugs. Blocking bugs are software bugs that prevent other bugs from being fixed. These blocking bugs may increase maintenance costs, reduce overall quality and delay the release of the software systems.	Code Metrics; Post-release Defects; Process Metrics	Harold Valdivia Garcia; Emad Shihab	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597099		72-81							2	ACM		Characterizing and predicting blocking bugs in open source projects	https://dl.acm.org/doi/10.1145/2597073.2597099	Association for Computing Machinery	nan; References; Year; Bibtex
500	TrustSE	Open source software––an evaluation														2						
501	TrustSE	Comparative case studies of open source software peer review practices														2						
502	TrustSE	Empirical study of the effects of open source adoption on software development economics														2						
503	TrustSE	Social network analysis of open source software: A review and categorisation														2						
504	TrustSE	Towards comprehending the non-functional requirements through Developers’ eyes: An exploration of Stack Overflow using topic analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
505	TrustSE	Open source software ecosystems: A Systematic mapping														2						
506	TrustSE	A large-scale, in-depth analysis of developers’ personalities in the Apache ecosystem														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
507	TrustSE	An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers’ software evolution														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
508	TrustSE	A theory of power in emerging software ecosystems formed by small-to-medium enterprises														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
509	TrustSE	Making the operating system trusted — A trend														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
510	TrustSE	Whom do you trust?														2						
511	TrustSE	Design and implementation of a query processor for a trusted distributed data base management system														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
512	TrustSE	Adopters’ trust in enterprise open source vendors: An empirical examination														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
513	TrustSE	A fuzzy-based credibility model to assess Web services trust under uncertainty														2						
514	TrustSE	A formal approach for the specification and verification of trustworthy component-based systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
515	TrustSE	Model checking of robustness properties in trust and reputation systems														2						
516	TrustSE	An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
517	TrustSE	Special Section: Trusted computing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
518	TrustSE	Facilitating contagion trust through tools in Global Systems Engineering teams														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
519	TrustSE	Multi-Value Models for Allocation of Software Component Development Costs Based on Trustworthiness														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
520	TrustSE	A preliminary analysis on the effects of propensity to trust in distributed software development	Establishing trust between developers working at distant sites facilitates team collaboration in distributed software development. While previous research has focused on how to build and spread trust in absence of direct, face-to-face communication, it has overlooked the effects of the propensity to trust, i.e., the trait of personality representing the individual disposition to perceive the others as trustworthy. In this study, we present a preliminary, quantitative analysis on how the propensity to trust affects the success of collaborations in a distributed project, where the success is represented by pull requests whose code changes and contributions are successfully merged into the project's repository.	distributed software development; personality traits; pull requests; trust	Fabio Calefato; Filippo Lanubile; Nicole Novielli	ICGSE '17: Proceedings of the 12th International Conference on Global Software Engineering	https://doi.org/10.1109/ICGSE.2017.1		56-60							2	ACM		A Preliminary Analysis on the Effects of Propensity to Trust in Distributed Software Development	https://dl.acm.org/doi/10.1109/ICGSE.2017.1	IEEE Press	nan; References; Year; Bibtex
521	TrustSE	Model Checking the Uncertainties in Software Systems Introduced by Intelligent Components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
522	TrustSE	Designing Safety Critical Software Systems to Manage Inherent Uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
523	TrustSE	Expert software development estimation with uncertainty correction														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
524	TrustSE	The Use of Multilegged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN Analysis of an Idealized Example														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
525	TrustSE	Software reuse with uncertainties														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
526	TrustSE	Scenario-based reliability analysis of component-based software														2						
527	TrustSE	Software quality: a market perspective														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
528	TrustSE	Early prediction of software component reliability	The ability to predict the reliability of a software system early in its development, e.g., during architectural design, can help to improve the system's quality in a cost-effective manner. Existing architecture-level reliability prediction approaches focus on system-level reliability and assume that the reliabilities of individual components are known. In general, this assumption is unreasonable, making component reliability prediction an important missing ingredient in the current literature. Early prediction of component reliability is a challenging problem because of many uncertainties associated with components under development. In this paper we address these challenges in developing a software component reliability prediction framework. We do this by exploiting architectural models and associated analysis techniques, stochastic modeling approaches, and information sources available early in the development lifecycle. We extensively evaluate our framework to illustrate its utility as an early reliability prediction approach.	modeling; reliability prediction; software architecture	Leslie Cheung; Roshanak Roshandel; Nenad Medvidovic; Leana Golubchik	ICSE '08: Proceedings of the 30th international conference on Software engineering	https://doi.org/10.1145/1368088.1368104		111-120							2	ACM		Early prediction of software component reliability	https://dl.acm.org/doi/10.1145/1368088.1368104	Association for Computing Machinery	nan; References; Year; Bibtex
529	TrustSE	Dealing with Uncertainties in Software Project Management														2						
530	TrustSE	Managing Non-Technical Requirements in COTS Components Selection														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
531	TrustSE	Identifying and Addressing Uncertainty in Architecture-Level Software Reliability Modeling														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
532	TrustSE	A formal model for the reuse of software specifications														2						
533	TrustSE	A Common Terminology for Software Risk Management	In order to improve and sustain their competitiveness over time, organisations nowadays need to undertake different initiatives to adopt frameworks, models and standards that will allow them to align and improve their business processes. In spite of these efforts, organisations may still encounter governance and management problems. This is whereRisk Management (RM)can play a major role, since its purpose is to contribute to the creation and preservation of value in the context of the organisation's processes. RM is a complex and subjective activity that requires experience and a high level of knowledge about risks, and it is for this reason that standardisation institutions and researchers have made great efforts to define initiatives to overcome these challenges. However, the RM field nevertheless presents a lack of uniformity in its terms and concepts, due to the different contexts and scopes of application, a situation that can generate ambiguities and misunderstandings. To address these issues, this paper aims to present an ontology calledSRMO (Software Risk Management Ontology), which seeks to unify the terms and concepts associated with RM and provide an integrated and holistic view of risk. In doing so, the Pipeline framework has been applied in order to assure and verify the quality of the proposed ontology, and it has been implemented in Protégé and validated by means of competency questions. Three application scenarios of this ontology demonstrating their usefulness in the software engineering field are presented in this paper. We believe that this ontology can be useful for organisations that are interested in: (i) establishing an RM strategy from an integrated approach, (ii) defining the elements that help to identify risks and the criteria that support decision-making in risk assessment, and (iii) helping the involved stakeholders during the process of risk management.	Risk management; integrated risk management; risk ontology; ISO 31000	Jhon Masso; Félix García; César Pardo; Francisco J. Pino; Mario Piattini	ACM Transactions on Software Engineering and Methodology (TOSEM)	https://doi.org/10.1145/3498539									2	ACM		Software risk management	https://dl.acm.org/doi/10.1145/3498539	Association for Computing Machinery	nan; References; Pages; Year; Bibtex
534	TrustSE	Uncertainties in software projects management														2						
535	TrustSE	Towards providing decision support for COTS selection														2						
536	TrustSE	Uncertainty-aware reliability analysis and optimization	Due to manufacturing tolerances and aging effects, future embedded systems have to cope with unreliable components. The intensity of such effects depends onuncertain aspectslike environmental or usage conditions such that highly safety-critical systems are pessimistically designed for worst-case mission profiles. In this work, we propose to explicitly model theuncertain characteristicsof system components, i. e. we model components using reliability functions with parameters distributed between a best and worst case. Since destructive effects like temperature may affect several components simultaneously (e. g. those in the same package), acorrelationbetween uncertainties of components exists. The proposed uncertainty-aware method combines a formal analysis approach and a Monte Carlo simulation to consider uncertain characteristics and their different correlations. It delivers a holistic view on the system's reliability with best/worst/average-case behavior and also insights on variance and quantiles. But, existing optimization approaches typically assume design objectives to be single values or to follow a predefined distribution. As a remedy, we propose a dominance criterion for meta-heuristic optimization approaches like evolutionary algorithms that enables the comparison of system implementations with arbitrarily distributed characteristics. Our presented experimental results show that (a) the proposed analysis comes at low overhead while capturing existing uncertainties with sufficient accuracy, and (b) the optimization process is significantly enhanced when guiding the search process by additional aspects like variance and the 95% quantile, delivering better system implementations as found by an uncertainty-oblivious optimization approach.		Faramarz Khosravi; Malte Müller; Michael Glaß; Jürgen Teich	DATE '15: Proceedings of the 2015 Design, Automation & Test in Europe Conference & Exhibition	https://doi.org/10.5555/2755753.2755775		97-102							2	ACM		Uncertainty-aware reliability analysis and optimization	https://dl.acm.org/doi/10.5555/2755753.2755775	EDA Consortium	nan; Keywords; References; Year; Bibtex
537	TrustSE	An empirically evaluated checklist for surveys in software engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
538	TrustSE	Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
539	TrustSE	Adapting usability techniques for application in open source Software: A multiple case study														2						
540	TrustSE	Uncertainty in information system development: Causes, effects, and coping mechanisms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
541	TrustSE	Reliability prediction for component-based software architectures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
542	TrustSE	Characterizing the contribution of quality requirements to software sustainability														2						
543	TrustSE	Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
544	TrustSE	R2Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
545	TrustSE	A revised open source usability defect classification taxonomy														2						
546	TrustSE	Trusted Product Lines														2						
547	TrustSE	Trust in the information society														2						
548	TrustSE	Understanding reuse of software examples: A case study of prejudice in a community of practice														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
549	TrustSE	Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
550	TrustSE	Using reputation stable analysis patterns as model based software reuse														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
551	TrustSE	Improving the model development process:what use is model reuse: is there a crook at the end of the rainbow?	The emergence of new technologies in simulation modeling such as the World Wide Web has fostered debate on the reuse of models. In this paper we present a case for model reuse and the pot of gold that it promises. We then discuss model reuse from the viewpoint of simulation modelers who use COTS simulation packages and suggest that model reuse may in fact cost more than developing new models as candidates for reuse as trust must be established through thorough testing. An alternative to this is put forward that suggests that a Grab-and-Glue, Run, Reject, Reply (G<sup>2</sup> R<sup>3</sup>) approach is a more appropriate use of model reuse as it emphasizes the intellectual process of problem understanding rather than model correctness as an means to itself.		Ray J. Paul; Simon J. E. Taylor	WSC '02: Proceedings of the 34th conference on Winter simulation: exploring new frontiers	https://doi.org/10.5555/1030453.1030544		648-652							2	ACM		What use is model reuse: is there a crook at the end of the rainbow?	https://dl.acm.org/doi/10.5555/1030453.1030544	Winter Simulation Conference	nan; Keywords; References; Year; Bibtex
552	TrustSE	Trustie_a software development platform for Crowdsourcing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
553	TrustSE	Categorizing developer information needs in software ecosystems	We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information. The results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage. The current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research.	Software ecosystems; frameworks and libraries; grounded theory; open source software; program comprehension; programmer needs	Nicole Haenni; Mircea Lungu; Niko Schwarz; Oscar Nierstrasz	WEA 2013: Proceedings of the 2013 International Workshop on Ecosystem Architectures	https://doi.org/10.1145/2501585.2501586		1-5							2	ACM		Categorizing developer information needs in software ecosystems	https://dl.acm.org/doi/10.1145/2501585.2501586	Association for Computing Machinery	nan; References; Year; Bibtex
554	TrustSE	The power of propagation:on the role of software operation knowledge within software ecosystems	Knowledge of in-the-field software operation is still unrecognized as an essential pulse in the veins of software ecosystems. Although software-producing organizations are aware of the ecosystems in which they operate and their relationships with other ecosystem participants, all too often, vendors are unsuccessful in recognizing the potential value and role of such knowledge in their software ecosystems. This paper presents a classification of successful operational software ecosystem practices that may help software-producing organizations to effectively utilize and propagate knowledge of the in-the-field operation of their software, and therewith address challenges that result from ecosystem participation. Analysis of these practices confirms that infrastructures for acquisition, utilization and propagation of such knowledge, allow ecosystem participants to use the 'power of many' in increasing the quality and robustness of their software, and provide them with competitive advantage in terms of software quality, end-user satisfaction, ecosystem stability and ecosystem attractiveness.	ecosystem orchestration; knowledge propagation; software ecosystems; software operation knowledge	Henk van der Schuur; Slinger Jansen; Sjaak Brinkkemper	MEDES '11: Proceedings of the International Conference on Management of Emergent Digital EcoSystems	https://doi.org/10.1145/2077489.2077503		76-84							2	ACM		The power of propagation: on the role of software operation knowledge within software ecosystems	https://dl.acm.org/doi/10.1145/2077489.2077503	Association for Computing Machinery	nan; References; Year; Bibtex
555	TrustSE	Software ecosystems--A systematic literature review														2						
